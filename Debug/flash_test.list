
flash_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08006008  08006008  00016008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064fc  080064fc  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  080064fc  080064fc  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064fc  080064fc  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006500  08006500  00016500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08006504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000220  08006724  00020220  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08006724  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3e6  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ed  00000000  00000000  0002d62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0002f820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  00030548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019060  00000000  00000000  00031178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d385  00000000  00000000  0004a1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd7e  00000000  00000000  0005755d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e42db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004838  00000000  00000000  000e4330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000220 	.word	0x20000220
 800012c:	00000000 	.word	0x00000000
 8000130:	08005fec 	.word	0x08005fec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000224 	.word	0x20000224
 800014c:	08005fec 	.word	0x08005fec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a94:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d013      	beq.n	8000ac8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000aa0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000aa4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000aa8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d00b      	beq.n	8000ac8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ab0:	e000      	b.n	8000ab4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ab2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ab4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0f9      	beq.n	8000ab2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000abe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ac8:	687b      	ldr	r3, [r7, #4]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	e009      	b.n	8000afe <_write+0x2a>
	{
		ITM_SendChar(*ptr++);
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1c5a      	adds	r2, r3, #1
 8000aee:	60ba      	str	r2, [r7, #8]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ffc8 	bl	8000a88 <ITM_SendChar>
	for (i = 0; i < len; i++)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	3301      	adds	r3, #1
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	dbf1      	blt.n	8000aea <_write+0x16>
	}
   return len;
 8000b06:	687b      	ldr	r3, [r7, #4]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <save_mission_data>:
//This function overwrites the Flash memory
//STM32F103 is a medium-density device
//128 pages of 1Kbyte memory
//Starting at page 126 (addr 0x0801_F800)
void save_mission_data(struct MissionData * md) //Involves Flash Pages, using HAL_Flash, not EEPROM emulation
{
 8000b10:	b5b0      	push	{r4, r5, r7, lr}
 8000b12:	b098      	sub	sp, #96	; 0x60
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef erase_struct;
	uint8_t buf[64];
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    |
 8000b18:	4ba8      	ldr	r3, [pc, #672]	; (8000dbc <save_mission_data+0x2ac>)
 8000b1a:	2234      	movs	r2, #52	; 0x34
 8000b1c:	60da      	str	r2, [r3, #12]
	                       FLASH_FLAG_WRPERR |
	                       FLASH_FLAG_PGERR);
	uint32_t page_error = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
	//char * message = "inside save mission data\r\n";
	//HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
	erase_struct.PageAddress = ADDR_PAGE_126;
 8000b22:	4ba7      	ldr	r3, [pc, #668]	; (8000dc0 <save_mission_data+0x2b0>)
 8000b24:	657b      	str	r3, [r7, #84]	; 0x54
	erase_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b26:	2300      	movs	r3, #0
 8000b28:	64fb      	str	r3, [r7, #76]	; 0x4c
	erase_struct.NbPages = 1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	65bb      	str	r3, [r7, #88]	; 0x58
	//Unlock first
	HAL_FLASH_Unlock();
 8000b2e:	f000 fed7 	bl	80018e0 <HAL_FLASH_Unlock>

	//Erase page
	if (HAL_FLASHEx_Erase(&erase_struct, &page_error) != HAL_OK)
 8000b32:	f107 0208 	add.w	r2, r7, #8
 8000b36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 ffb7 	bl	8001ab0 <HAL_FLASHEx_Erase>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d019      	beq.n	8000b7c <save_mission_data+0x6c>
	{
		strcpy((char*)buf, "Flash Erase Error \r\n");
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	4a9d      	ldr	r2, [pc, #628]	; (8000dc4 <save_mission_data+0x2b4>)
 8000b4e:	461c      	mov	r4, r3
 8000b50:	4615      	mov	r5, r2
 8000b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b5a:	6020      	str	r0, [r4, #0]
 8000b5c:	3404      	adds	r4, #4
 8000b5e:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff faf3 	bl	8000150 <strlen>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	f107 010c 	add.w	r1, r7, #12
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	4894      	ldr	r0, [pc, #592]	; (8000dc8 <save_mission_data+0x2b8>)
 8000b78:	f002 f9ed 	bl	8002f56 <HAL_UART_Transmit>
	}
	//HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
	//Write (aka program) page
	//half word 16-bit = 2 bytes, which is the minimum writable size for the STM32F1xx series
	uint8_t offset = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	//But I'm hardcoding it instead
	//
	//for (int i = 0, i < MD_SIZE, i++)
	//	{
	//	}
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGERR);
 8000b82:	4b8e      	ldr	r3, [pc, #568]	; (8000dbc <save_mission_data+0x2ac>)
 8000b84:	2204      	movs	r2, #4
 8000b86:	60da      	str	r2, [r3, #12]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_PAGE_126, RESET_FLAG);
 8000b88:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
 8000b8c:	f04f 0300 	mov.w	r3, #0
 8000b90:	498b      	ldr	r1, [pc, #556]	; (8000dc0 <save_mission_data+0x2b0>)
 8000b92:	2002      	movs	r0, #2
 8000b94:	f000 fe34 	bl	8001800 <HAL_FLASH_Program>
	offset += 4;
 8000b98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_PAGE_126+offset, md->hours);
 8000ba2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ba6:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000baa:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f000 fe21 	bl	8001800 <HAL_FLASH_Program>
	offset += 4;
 8000bbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_PAGE_126+offset, md->minutes);
 8000bc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000bcc:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000bd0:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	785b      	ldrb	r3, [r3, #1]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	f04f 0300 	mov.w	r3, #0
 8000bde:	2002      	movs	r0, #2
 8000be0:	f000 fe0e 	bl	8001800 <HAL_FLASH_Program>
	offset += 4;
 8000be4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000be8:	3304      	adds	r3, #4
 8000bea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_PAGE_126+offset, md->seconds);
 8000bee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000bf2:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000bf6:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	789b      	ldrb	r3, [r3, #2]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	2002      	movs	r0, #2
 8000c06:	f000 fdfb 	bl	8001800 <HAL_FLASH_Program>
	offset += 4;
 8000c0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c0e:	3304      	adds	r3, #4
 8000c10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_PAGE_126+offset, md->telemetry_on);
 8000c14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c18:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000c1c:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7c1b      	ldrb	r3, [r3, #16]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	f04f 0300 	mov.w	r3, #0
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f000 fde8 	bl	8001800 <HAL_FLASH_Program>
	offset += 4;
 8000c30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c34:	3304      	adds	r3, #4
 8000c36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_PAGE_126+offset, md->sp1_released);
 8000c3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c3e:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000c42:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	7c5b      	ldrb	r3, [r3, #17]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	2002      	movs	r0, #2
 8000c52:	f000 fdd5 	bl	8001800 <HAL_FLASH_Program>
	offset += 4;
 8000c56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c5a:	3304      	adds	r3, #4
 8000c5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_PAGE_126+offset, md->sp2_released);
 8000c60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c64:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000c68:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	7c9b      	ldrb	r3, [r3, #18]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	f04f 0300 	mov.w	r3, #0
 8000c76:	2002      	movs	r0, #2
 8000c78:	f000 fdc2 	bl	8001800 <HAL_FLASH_Program>
	offset += 4;
 8000c7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c80:	3304      	adds	r3, #4
 8000c82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_PAGE_126+offset, md->sim_enabled);
 8000c86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c8a:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000c8e:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	7d5b      	ldrb	r3, [r3, #21]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f000 fdaf 	bl	8001800 <HAL_FLASH_Program>
	offset += 4;
 8000ca2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_PAGE_126+offset, md->sim_active);
 8000cac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000cb0:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000cb4:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	7d9b      	ldrb	r3, [r3, #22]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f000 fd9c 	bl	8001800 <HAL_FLASH_Program>
	offset += 4;
 8000cc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ccc:	3304      	adds	r3, #4
 8000cce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_PAGE_126+offset, md->flight_or_sim);
 8000cd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000cd6:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000cda:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7e9b      	ldrb	r3, [r3, #26]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f000 fd89 	bl	8001800 <HAL_FLASH_Program>
	offset += 4;
 8000cee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_PAGE_126+offset, md->packet_num);
 8000cf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000cfc:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000d00:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7edb      	ldrb	r3, [r3, #27]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f000 fd76 	bl	8001800 <HAL_FLASH_Program>
	offset += 4;
 8000d14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000d18:	3304      	adds	r3, #4
 8000d1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_PAGE_126+offset, md->altitude);
 8000d1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000d22:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000d26:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	2002      	movs	r0, #2
 8000d36:	f000 fd63 	bl	8001800 <HAL_FLASH_Program>
	offset += 4;
 8000d3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000d3e:	3304      	adds	r3, #4
 8000d40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_PAGE_126+offset, md->temperature);
 8000d44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000d48:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000d4c:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d54:	461a      	mov	r2, r3
 8000d56:	f04f 0300 	mov.w	r3, #0
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f000 fd50 	bl	8001800 <HAL_FLASH_Program>
	offset += 4;
 8000d60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000d64:	3304      	adds	r3, #4
 8000d66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_PAGE_126+offset, md->voltage);
 8000d6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000d6e:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000d72:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f04f 0300 	mov.w	r3, #0
 8000d80:	2002      	movs	r0, #2
 8000d82:	f000 fd3d 	bl	8001800 <HAL_FLASH_Program>
	offset += 4;
 8000d86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_PAGE_126+offset, md->apogee);
 8000d90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000d94:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000d98:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	2002      	movs	r0, #2
 8000daa:	f000 fd29 	bl	8001800 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 8000dae:	f000 fdbd 	bl	800192c <HAL_FLASH_Lock>
	//message = "after FLASH lock";
	//HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
}
 8000db2:	bf00      	nop
 8000db4:	3760      	adds	r7, #96	; 0x60
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40022000 	.word	0x40022000
 8000dc0:	0801f800 	.word	0x0801f800
 8000dc4:	08006018 	.word	0x08006018
 8000dc8:	200002cc 	.word	0x200002cc

08000dcc <check_reset>:
void check_reset(struct MissionData * md)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b08d      	sub	sp, #52	; 0x34
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint32_t check = *(__IO uint32_t *)ADDR_PAGE_126;
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <check_reset+0x84>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t message[32] = "Reset present\r\n";
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <check_reset+0x88>)
 8000ddc:	f107 040c 	add.w	r4, r7, #12
 8000de0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000de2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
	if(check == RESET_FLAG)
 8000df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df6:	f1b3 3f0f 	cmp.w	r3, #252645135	; 0xf0f0f0f
 8000dfa:	d10e      	bne.n	8000e1a <check_reset+0x4e>
	{
		HAL_UART_Transmit(&huart1, (char *)message, strlen((char *)message), HAL_MAX_DELAY);
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff f9a5 	bl	8000150 <strlen>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	f107 010c 	add.w	r1, r7, #12
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	4811      	ldr	r0, [pc, #68]	; (8000e58 <check_reset+0x8c>)
 8000e14:	f002 f89f 	bl	8002f56 <HAL_UART_Transmit>
	else
	{
		strcpy((char *)message,"Reset error\r\n");
		HAL_UART_Transmit(&huart1, (char *)message, strlen((char *)message), HAL_MAX_DELAY);
	}
}
 8000e18:	e015      	b.n	8000e46 <check_reset+0x7a>
		strcpy((char *)message,"Reset error\r\n");
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <check_reset+0x90>)
 8000e20:	461c      	mov	r4, r3
 8000e22:	4613      	mov	r3, r2
 8000e24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e26:	c407      	stmia	r4!, {r0, r1, r2}
 8000e28:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (char *)message, strlen((char *)message), HAL_MAX_DELAY);
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff f98e 	bl	8000150 <strlen>
 8000e34:	4603      	mov	r3, r0
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	f107 010c 	add.w	r1, r7, #12
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <check_reset+0x8c>)
 8000e42:	f002 f888 	bl	8002f56 <HAL_UART_Transmit>
}
 8000e46:	bf00      	nop
 8000e48:	3734      	adds	r7, #52	; 0x34
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd90      	pop	{r4, r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	0801f800 	.word	0x0801f800
 8000e54:	08006040 	.word	0x08006040
 8000e58:	200002cc 	.word	0x200002cc
 8000e5c:	08006030 	.word	0x08006030

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b5b0      	push	{r4, r5, r7, lr}
 8000e62:	b08e      	sub	sp, #56	; 0x38
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t message[21] = "TIMER 2 VALUE: %d";
 8000e66:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <main+0x88>)
 8000e68:	f107 0410 	add.w	r4, r7, #16
 8000e6c:	461d      	mov	r5, r3
 8000e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e72:	682b      	ldr	r3, [r5, #0]
 8000e74:	8023      	strh	r3, [r4, #0]
 8000e76:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	801a      	strh	r2, [r3, #0]
 8000e80:	460a      	mov	r2, r1
 8000e82:	709a      	strb	r2, [r3, #2]

	uint16_t tim2_val = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e88:	f000 fb1a 	bl	80014c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8c:	f000 f83a 	bl	8000f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e90:	f000 f8f2 	bl	8001078 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e94:	f000 f8c6 	bl	8001024 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000e98:	f000 f876 	bl	8000f88 <MX_TIM2_Init>
  //HAL_TIM_Base_Start_IT(&htim2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  struct TestStruct test1 = {"Hello!\r\n","This can vary\r\n"};
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <main+0x8c>)
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  	    char * buf;
  	    char * template = "Fixed:%s\r\nVariable:%s\r\n";
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <main+0x90>)
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30

  test1.test_string_pointer = "This can vary widely, so be careful";
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <main+0x94>)
 8000eac:	60fb      	str	r3, [r7, #12]

  double tester = -111.546789;
 8000eae:	a30c      	add	r3, pc, #48	; (adr r3, 8000ee0 <main+0x80>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	 // HAL_UART_Transmit(&huart1, tester_str, 11, HAL_MAX_DELAY);

	  //HAL_Delay(1000);
	 // snprintf(buf,strlen(buf),template, test1.test_string,test1.test_string_pointer);

	  HAL_UART_Transmit(&huart1, "In main\n", 10,HAL_MAX_DELAY);
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	220a      	movs	r2, #10
 8000ebe:	490e      	ldr	r1, [pc, #56]	; (8000ef8 <main+0x98>)
 8000ec0:	480e      	ldr	r0, [pc, #56]	; (8000efc <main+0x9c>)
 8000ec2:	f002 f848 	bl	8002f56 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000ec6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eca:	f000 fb5b 	bl	8001584 <HAL_Delay>
		 check_reset(&mission_data);
 8000ece:	480c      	ldr	r0, [pc, #48]	; (8000f00 <main+0xa0>)
 8000ed0:	f7ff ff7c 	bl	8000dcc <check_reset>
		 save_mission_data(&mission_data);
 8000ed4:	480a      	ldr	r0, [pc, #40]	; (8000f00 <main+0xa0>)
 8000ed6:	f7ff fe1b 	bl	8000b10 <save_mission_data>
	  HAL_UART_Transmit(&huart1, "In main\n", 10,HAL_MAX_DELAY);
 8000eda:	e7ed      	b.n	8000eb8 <main+0x58>
 8000edc:	f3af 8000 	nop.w
 8000ee0:	974a3401 	.word	0x974a3401
 8000ee4:	c05be2fe 	.word	0xc05be2fe
 8000ee8:	080060a8 	.word	0x080060a8
 8000eec:	080060c0 	.word	0x080060c0
 8000ef0:	08006060 	.word	0x08006060
 8000ef4:	08006078 	.word	0x08006078
 8000ef8:	0800609c 	.word	0x0800609c
 8000efc:	200002cc 	.word	0x200002cc
 8000f00:	20000000 	.word	0x20000000

08000f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b090      	sub	sp, #64	; 0x40
 8000f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0a:	f107 0318 	add.w	r3, r7, #24
 8000f0e:	2228      	movs	r2, #40	; 0x28
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 f9b4 	bl	8003280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f2e:	2310      	movs	r3, #16
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f32:	2302      	movs	r3, #2
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f36:	2300      	movs	r3, #0
 8000f38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f3a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0318 	add.w	r3, r7, #24
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 fff7 	bl	8001f38 <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f50:	f000 f90a 	bl	8001168 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f54:	230f      	movs	r3, #15
 8000f56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 fa62 	bl	8002438 <HAL_RCC_ClockConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f7a:	f000 f8f5 	bl	8001168 <Error_Handler>
  }
}
 8000f7e:	bf00      	nop
 8000f80:	3740      	adds	r7, #64	; 0x40
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <MX_TIM2_Init+0x98>)
 8000fa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000faa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <MX_TIM2_Init+0x98>)
 8000fae:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000fb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_TIM2_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <MX_TIM2_Init+0x98>)
 8000fbc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <MX_TIM2_Init+0x98>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <MX_TIM2_Init+0x98>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fce:	4814      	ldr	r0, [pc, #80]	; (8001020 <MX_TIM2_Init+0x98>)
 8000fd0:	f001 fbcc 	bl	800276c <HAL_TIM_Base_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000fda:	f000 f8c5 	bl	8001168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480d      	ldr	r0, [pc, #52]	; (8001020 <MX_TIM2_Init+0x98>)
 8000fec:	f001 fd15 	bl	8002a1a <HAL_TIM_ConfigClockSource>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ff6:	f000 f8b7 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <MX_TIM2_Init+0x98>)
 8001008:	f001 fee8 	bl	8002ddc <HAL_TIMEx_MasterConfigSynchronization>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001012:	f000 f8a9 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  //__HAL_TIM_ENABLE_IT(&htim2,);
  /* USER CODE END TIM2_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000030c 	.word	0x2000030c

08001024 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <MX_USART1_UART_Init+0x50>)
 800102c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001034:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 800104a:	220c      	movs	r2, #12
 800104c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 800105c:	f001 ff2e 	bl	8002ebc <HAL_UART_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001066:	f000 f87f 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200002cc 	.word	0x200002cc
 8001074:	40013800 	.word	0x40013800

08001078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_GPIO_Init+0x78>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <MX_GPIO_Init+0x78>)
 8001092:	f043 0310 	orr.w	r3, r3, #16
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_GPIO_Init+0x78>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0310 	and.w	r3, r3, #16
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_GPIO_Init+0x78>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <MX_GPIO_Init+0x78>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_GPIO_Init+0x78>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c2:	480c      	ldr	r0, [pc, #48]	; (80010f4 <MX_GPIO_Init+0x7c>)
 80010c4:	f000 ff20 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80010c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2302      	movs	r3, #2
 80010d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	4619      	mov	r1, r3
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_GPIO_Init+0x7c>)
 80010e2:	f000 fd8d 	bl	8001c00 <HAL_GPIO_Init>

}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40011000 	.word	0x40011000

080010f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	static uint8_t packetnum = 0;
  UNUSED(htim);
  if(htim == &htim2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a13      	ldr	r2, [pc, #76]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d11e      	bne.n	8001146 <HAL_TIM_PeriodElapsedCallback+0x4e>
  {

	  pin_state = !pin_state;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	bf0c      	ite	eq
 8001110:	2301      	moveq	r3, #1
 8001112:	2300      	movne	r3, #0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	461a      	mov	r2, r3
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800111a:	701a      	strb	r2, [r3, #0]
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, pin_state);
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001126:	480c      	ldr	r0, [pc, #48]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001128:	f000 feee 	bl	8001f08 <HAL_GPIO_WritePin>
	 snprintf(uart_buf, 128, "INTERRUPT TIMER 2 MESSAGE NUM: %d\r\n", packetnum);
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	480b      	ldr	r0, [pc, #44]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001136:	f002 fd0b 	bl	8003b50 <sniprintf>
	 //HAL_UART_Transmit(&huart1, uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
	 packetnum++;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001144:	701a      	strb	r2, [r3, #0]
  }
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000030c 	.word	0x2000030c
 8001154:	20000040 	.word	0x20000040
 8001158:	40011000 	.word	0x40011000
 800115c:	2000023c 	.word	0x2000023c
 8001160:	080060d0 	.word	0x080060d0
 8001164:	2000024c 	.word	0x2000024c

08001168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
}
 800116e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001170:	e7fe      	b.n	8001170 <Error_Handler+0x8>
	...

08001174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_MspInit+0x5c>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <HAL_MspInit+0x5c>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6193      	str	r3, [r2, #24]
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_MspInit+0x5c>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_MspInit+0x5c>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <HAL_MspInit+0x5c>)
 8001198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119c:	61d3      	str	r3, [r2, #28]
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_MspInit+0x5c>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_MspInit+0x60>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <HAL_MspInit+0x60>)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010000 	.word	0x40010000

080011d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e8:	d113      	bne.n	8001212 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_TIM_Base_MspInit+0x44>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <HAL_TIM_Base_MspInit+0x44>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	61d3      	str	r3, [r2, #28]
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_TIM_Base_MspInit+0x44>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	201c      	movs	r0, #28
 8001208:	f000 fab7 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800120c:	201c      	movs	r0, #28
 800120e:	f000 fad0 	bl	80017b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000

08001220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <HAL_UART_MspInit+0x8c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d131      	bne.n	80012a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_UART_MspInit+0x90>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <HAL_UART_MspInit+0x90>)
 8001246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_UART_MspInit+0x90>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_UART_MspInit+0x90>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <HAL_UART_MspInit+0x90>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_UART_MspInit+0x90>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001274:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4619      	mov	r1, r3
 8001284:	480b      	ldr	r0, [pc, #44]	; (80012b4 <HAL_UART_MspInit+0x94>)
 8001286:	f000 fcbb 	bl	8001c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800128a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4619      	mov	r1, r3
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <HAL_UART_MspInit+0x94>)
 80012a0:	f000 fcae 	bl	8001c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012a4:	bf00      	nop
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010800 	.word	0x40010800

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <NMI_Handler+0x4>

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr

080012fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fe:	f000 f925 	bl	800154c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001302:	f000 fa70 	bl	80017e6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <TIM2_IRQHandler+0x10>)
 8001312:	f001 fa7a 	bl	800280a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000030c 	.word	0x2000030c

08001320 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
	return 1;
 8001324:	2301      	movs	r3, #1
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <_kill>:

int _kill(int pid, int sig)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001338:	f001 ff78 	bl	800322c <__errno>
 800133c:	4603      	mov	r3, r0
 800133e:	2216      	movs	r2, #22
 8001340:	601a      	str	r2, [r3, #0]
	return -1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_exit>:

void _exit (int status)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001356:	f04f 31ff 	mov.w	r1, #4294967295
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffe7 	bl	800132e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001360:	e7fe      	b.n	8001360 <_exit+0x12>

08001362 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e00a      	b.n	800138a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001374:	f3af 8000 	nop.w
 8001378:	4601      	mov	r1, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	60ba      	str	r2, [r7, #8]
 8001380:	b2ca      	uxtb	r2, r1
 8001382:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	429a      	cmp	r2, r3
 8001390:	dbf0      	blt.n	8001374 <_read+0x12>
	}

return len;
 8001392:	687b      	ldr	r3, [r7, #4]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <_close>:
	}
	return len;
}

int _close(int file)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	return -1;
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013c2:	605a      	str	r2, [r3, #4]
	return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <_isatty>:

int _isatty(int file)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	return 1;
 80013d8:	2301      	movs	r3, #1
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001404:	4a14      	ldr	r2, [pc, #80]	; (8001458 <_sbrk+0x5c>)
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <_sbrk+0x60>)
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d102      	bne.n	800141e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <_sbrk+0x64>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <_sbrk+0x68>)
 800141c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	429a      	cmp	r2, r3
 800142a:	d207      	bcs.n	800143c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800142c:	f001 fefe 	bl	800322c <__errno>
 8001430:	4603      	mov	r3, r0
 8001432:	220c      	movs	r2, #12
 8001434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	e009      	b.n	8001450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <_sbrk+0x64>)
 800144c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20005000 	.word	0x20005000
 800145c:	00000400 	.word	0x00000400
 8001460:	20000240 	.word	0x20000240
 8001464:	20000388 	.word	0x20000388

08001468 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001474:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001476:	e003      	b.n	8001480 <LoopCopyDataInit>

08001478 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001478:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800147a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800147c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800147e:	3104      	adds	r1, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001480:	480a      	ldr	r0, [pc, #40]	; (80014ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001484:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001486:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001488:	d3f6      	bcc.n	8001478 <CopyDataInit>
  ldr r2, =_sbss
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800148c:	e002      	b.n	8001494 <LoopFillZerobss>

0800148e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001490:	f842 3b04 	str.w	r3, [r2], #4

08001494 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001496:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001498:	d3f9      	bcc.n	800148e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800149a:	f7ff ffe5 	bl	8001468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149e:	f001 fecb 	bl	8003238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014a2:	f7ff fcdd 	bl	8000e60 <main>
  bx lr
 80014a6:	4770      	bx	lr
  ldr r3, =_sidata
 80014a8:	08006504 	.word	0x08006504
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014b0:	20000220 	.word	0x20000220
  ldr r2, =_sbss
 80014b4:	20000220 	.word	0x20000220
  ldr r3, = _ebss
 80014b8:	20000388 	.word	0x20000388

080014bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC1_2_IRQHandler>
	...

080014c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_Init+0x28>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_Init+0x28>)
 80014ca:	f043 0310 	orr.w	r3, r3, #16
 80014ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d0:	2003      	movs	r0, #3
 80014d2:	f000 f947 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 f808 	bl	80014ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014dc:	f7ff fe4a 	bl	8001174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40022000 	.word	0x40022000

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x54>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_InitTick+0x58>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	fbb3 f3f1 	udiv	r3, r3, r1
 8001506:	fbb2 f3f3 	udiv	r3, r2, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f95f 	bl	80017ce <HAL_SYSTICK_Config>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e00e      	b.n	8001538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d80a      	bhi.n	8001536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001520:	2200      	movs	r2, #0
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f000 f927 	bl	800177a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800152c:	4a06      	ldr	r2, [pc, #24]	; (8001548 <HAL_InitTick+0x5c>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000044 	.word	0x20000044
 8001544:	2000004c 	.word	0x2000004c
 8001548:	20000048 	.word	0x20000048

0800154c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_IncTick+0x1c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_IncTick+0x20>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <HAL_IncTick+0x20>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	2000004c 	.word	0x2000004c
 800156c:	20000354 	.word	0x20000354

08001570 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b02      	ldr	r3, [pc, #8]	; (8001580 <HAL_GetTick+0x10>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	20000354 	.word	0x20000354

08001584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800158c:	f7ff fff0 	bl	8001570 <HAL_GetTick>
 8001590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159c:	d005      	beq.n	80015aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_Delay+0x44>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015aa:	bf00      	nop
 80015ac:	f7ff ffe0 	bl	8001570 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d8f7      	bhi.n	80015ac <HAL_Delay+0x28>
  {
  }
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000004c 	.word	0x2000004c

080015cc <__NVIC_SetPriorityGrouping>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_GetPriorityGrouping>:
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_EnableIRQ>:
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db0b      	blt.n	800165a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	4906      	ldr	r1, [pc, #24]	; (8001664 <__NVIC_EnableIRQ+0x34>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2001      	movs	r0, #1
 8001652:	fa00 f202 	lsl.w	r2, r0, r2
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <SysTick_Config>:
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001730:	d301      	bcc.n	8001736 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001732:	2301      	movs	r3, #1
 8001734:	e00f      	b.n	8001756 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <SysTick_Config+0x40>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173e:	210f      	movs	r1, #15
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f7ff ff90 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <SysTick_Config+0x40>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SysTick_Config+0x40>)
 8001750:	2207      	movs	r2, #7
 8001752:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff2d 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff42 	bl	8001614 <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff90 	bl	80016bc <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5f 	bl	8001668 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff35 	bl	8001630 <__NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ffa2 	bl	8001720 <SysTick_Config>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80017ea:	f000 f802 	bl	80017f2 <HAL_SYSTICK_Callback>
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
	...

08001800 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800181a:	4b2f      	ldr	r3, [pc, #188]	; (80018d8 <HAL_FLASH_Program+0xd8>)
 800181c:	7e1b      	ldrb	r3, [r3, #24]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_FLASH_Program+0x26>
 8001822:	2302      	movs	r3, #2
 8001824:	e054      	b.n	80018d0 <HAL_FLASH_Program+0xd0>
 8001826:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <HAL_FLASH_Program+0xd8>)
 8001828:	2201      	movs	r2, #1
 800182a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800182c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001830:	f000 f8a8 	bl	8001984 <FLASH_WaitForLastOperation>
 8001834:	4603      	mov	r3, r0
 8001836:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d144      	bne.n	80018c8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d102      	bne.n	800184a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001844:	2301      	movs	r3, #1
 8001846:	757b      	strb	r3, [r7, #21]
 8001848:	e007      	b.n	800185a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d102      	bne.n	8001856 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001850:	2302      	movs	r3, #2
 8001852:	757b      	strb	r3, [r7, #21]
 8001854:	e001      	b.n	800185a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001856:	2304      	movs	r3, #4
 8001858:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800185a:	2300      	movs	r3, #0
 800185c:	75bb      	strb	r3, [r7, #22]
 800185e:	e02d      	b.n	80018bc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001860:	7dbb      	ldrb	r3, [r7, #22]
 8001862:	005a      	lsls	r2, r3, #1
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	eb02 0c03 	add.w	ip, r2, r3
 800186a:	7dbb      	ldrb	r3, [r7, #22]
 800186c:	0119      	lsls	r1, r3, #4
 800186e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001872:	f1c1 0620 	rsb	r6, r1, #32
 8001876:	f1a1 0020 	sub.w	r0, r1, #32
 800187a:	fa22 f401 	lsr.w	r4, r2, r1
 800187e:	fa03 f606 	lsl.w	r6, r3, r6
 8001882:	4334      	orrs	r4, r6
 8001884:	fa23 f000 	lsr.w	r0, r3, r0
 8001888:	4304      	orrs	r4, r0
 800188a:	fa23 f501 	lsr.w	r5, r3, r1
 800188e:	b2a3      	uxth	r3, r4
 8001890:	4619      	mov	r1, r3
 8001892:	4660      	mov	r0, ip
 8001894:	f000 f85a 	bl	800194c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001898:	f24c 3050 	movw	r0, #50000	; 0xc350
 800189c:	f000 f872 	bl	8001984 <FLASH_WaitForLastOperation>
 80018a0:	4603      	mov	r3, r0
 80018a2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80018a4:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_FLASH_Program+0xdc>)
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <HAL_FLASH_Program+0xdc>)
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d107      	bne.n	80018c6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80018b6:	7dbb      	ldrb	r3, [r7, #22]
 80018b8:	3301      	adds	r3, #1
 80018ba:	75bb      	strb	r3, [r7, #22]
 80018bc:	7dba      	ldrb	r2, [r7, #22]
 80018be:	7d7b      	ldrb	r3, [r7, #21]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d3cd      	bcc.n	8001860 <HAL_FLASH_Program+0x60>
 80018c4:	e000      	b.n	80018c8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80018c6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <HAL_FLASH_Program+0xd8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	761a      	strb	r2, [r3, #24]

  return status;
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d8:	20000358 	.word	0x20000358
 80018dc:	40022000 	.word	0x40022000

080018e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_FLASH_Unlock+0x40>)
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00d      	beq.n	8001912 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_FLASH_Unlock+0x40>)
 80018f8:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <HAL_FLASH_Unlock+0x44>)
 80018fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <HAL_FLASH_Unlock+0x40>)
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <HAL_FLASH_Unlock+0x48>)
 8001900:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_FLASH_Unlock+0x40>)
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001912:	79fb      	ldrb	r3, [r7, #7]
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40022000 	.word	0x40022000
 8001924:	45670123 	.word	0x45670123
 8001928:	cdef89ab 	.word	0xcdef89ab

0800192c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_FLASH_Lock+0x1c>)
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_FLASH_Lock+0x1c>)
 8001936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800193a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40022000 	.word	0x40022000

0800194c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <FLASH_Program_HalfWord+0x30>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <FLASH_Program_HalfWord+0x34>)
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	4a07      	ldr	r2, [pc, #28]	; (8001980 <FLASH_Program_HalfWord+0x34>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	887a      	ldrh	r2, [r7, #2]
 800196e:	801a      	strh	r2, [r3, #0]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000358 	.word	0x20000358
 8001980:	40022000 	.word	0x40022000

08001984 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff fdf0 	bl	8001570 <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001992:	e010      	b.n	80019b6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199a:	d00c      	beq.n	80019b6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <FLASH_WaitForLastOperation+0x2e>
 80019a2:	f7ff fde5 	bl	8001570 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d201      	bcs.n	80019b6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e025      	b.n	8001a02 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <FLASH_WaitForLastOperation+0x88>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1e8      	bne.n	8001994 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <FLASH_WaitForLastOperation+0x88>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f003 0320 	and.w	r3, r3, #32
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <FLASH_WaitForLastOperation+0x88>)
 80019d0:	2220      	movs	r2, #32
 80019d2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80019d4:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <FLASH_WaitForLastOperation+0x88>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f003 0310 	and.w	r3, r3, #16
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10b      	bne.n	80019f8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <FLASH_WaitForLastOperation+0x88>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d105      	bne.n	80019f8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <FLASH_WaitForLastOperation+0x88>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80019f8:	f000 f80a 	bl	8001a10 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40022000 	.word	0x40022000

08001a10 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <FLASH_SetErrorCode+0x98>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <FLASH_SetErrorCode+0x9c>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	4a1f      	ldr	r2, [pc, #124]	; (8001aac <FLASH_SetErrorCode+0x9c>)
 8001a30:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f043 0310 	orr.w	r3, r3, #16
 8001a38:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <FLASH_SetErrorCode+0x98>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <FLASH_SetErrorCode+0x9c>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	4a17      	ldr	r2, [pc, #92]	; (8001aac <FLASH_SetErrorCode+0x9c>)
 8001a50:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <FLASH_SetErrorCode+0x98>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00b      	beq.n	8001a7e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <FLASH_SetErrorCode+0x9c>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <FLASH_SetErrorCode+0x9c>)
 8001a70:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <FLASH_SetErrorCode+0x98>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4a0c      	ldr	r2, [pc, #48]	; (8001aa8 <FLASH_SetErrorCode+0x98>)
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f240 1201 	movw	r2, #257	; 0x101
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d106      	bne.n	8001a96 <FLASH_SetErrorCode+0x86>
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <FLASH_SetErrorCode+0x98>)
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <FLASH_SetErrorCode+0x98>)
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	61d3      	str	r3, [r2, #28]
}  
 8001a94:	e002      	b.n	8001a9c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <FLASH_SetErrorCode+0x98>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	60d3      	str	r3, [r2, #12]
}  
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40022000 	.word	0x40022000
 8001aac:	20000358 	.word	0x20000358

08001ab0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ac2:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <HAL_FLASHEx_Erase+0xd0>)
 8001ac4:	7e1b      	ldrb	r3, [r3, #24]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_FLASHEx_Erase+0x1e>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e053      	b.n	8001b76 <HAL_FLASHEx_Erase+0xc6>
 8001ace:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <HAL_FLASHEx_Erase+0xd0>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d116      	bne.n	8001b0a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001adc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ae0:	f7ff ff50 	bl	8001984 <FLASH_WaitForLastOperation>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d141      	bne.n	8001b6e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001aea:	2001      	movs	r0, #1
 8001aec:	f000 f84c 	bl	8001b88 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001af0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001af4:	f7ff ff46 	bl	8001984 <FLASH_WaitForLastOperation>
 8001af8:	4603      	mov	r3, r0
 8001afa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <HAL_FLASHEx_Erase+0xd4>)
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	4a20      	ldr	r2, [pc, #128]	; (8001b84 <HAL_FLASHEx_Erase+0xd4>)
 8001b02:	f023 0304 	bic.w	r3, r3, #4
 8001b06:	6113      	str	r3, [r2, #16]
 8001b08:	e031      	b.n	8001b6e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001b0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b0e:	f7ff ff39 	bl	8001984 <FLASH_WaitForLastOperation>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d12a      	bne.n	8001b6e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	e019      	b.n	8001b5c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001b28:	68b8      	ldr	r0, [r7, #8]
 8001b2a:	f000 f849 	bl	8001bc0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b32:	f7ff ff27 	bl	8001984 <FLASH_WaitForLastOperation>
 8001b36:	4603      	mov	r3, r0
 8001b38:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_FLASHEx_Erase+0xd4>)
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_FLASHEx_Erase+0xd4>)
 8001b40:	f023 0302 	bic.w	r3, r3, #2
 8001b44:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	601a      	str	r2, [r3, #0]
            break;
 8001b52:	e00c      	b.n	8001b6e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b5a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	029a      	lsls	r2, r3, #10
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d3dc      	bcc.n	8001b28 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <HAL_FLASHEx_Erase+0xd0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	761a      	strb	r2, [r3, #24]

  return status;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000358 	.word	0x20000358
 8001b84:	40022000 	.word	0x40022000

08001b88 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <FLASH_MassErase+0x30>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <FLASH_MassErase+0x34>)
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <FLASH_MassErase+0x34>)
 8001b9c:	f043 0304 	orr.w	r3, r3, #4
 8001ba0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <FLASH_MassErase+0x34>)
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <FLASH_MassErase+0x34>)
 8001ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bac:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	20000358 	.word	0x20000358
 8001bbc:	40022000 	.word	0x40022000

08001bc0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <FLASH_PageErase+0x38>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <FLASH_PageErase+0x3c>)
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <FLASH_PageErase+0x3c>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001bda:	4a08      	ldr	r2, [pc, #32]	; (8001bfc <FLASH_PageErase+0x3c>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <FLASH_PageErase+0x3c>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <FLASH_PageErase+0x3c>)
 8001be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bea:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000358 	.word	0x20000358
 8001bfc:	40022000 	.word	0x40022000

08001c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b08b      	sub	sp, #44	; 0x2c
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c12:	e169      	b.n	8001ee8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c14:	2201      	movs	r2, #1
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	f040 8158 	bne.w	8001ee2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4a9a      	ldr	r2, [pc, #616]	; (8001ea0 <HAL_GPIO_Init+0x2a0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d05e      	beq.n	8001cfa <HAL_GPIO_Init+0xfa>
 8001c3c:	4a98      	ldr	r2, [pc, #608]	; (8001ea0 <HAL_GPIO_Init+0x2a0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d875      	bhi.n	8001d2e <HAL_GPIO_Init+0x12e>
 8001c42:	4a98      	ldr	r2, [pc, #608]	; (8001ea4 <HAL_GPIO_Init+0x2a4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d058      	beq.n	8001cfa <HAL_GPIO_Init+0xfa>
 8001c48:	4a96      	ldr	r2, [pc, #600]	; (8001ea4 <HAL_GPIO_Init+0x2a4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d86f      	bhi.n	8001d2e <HAL_GPIO_Init+0x12e>
 8001c4e:	4a96      	ldr	r2, [pc, #600]	; (8001ea8 <HAL_GPIO_Init+0x2a8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d052      	beq.n	8001cfa <HAL_GPIO_Init+0xfa>
 8001c54:	4a94      	ldr	r2, [pc, #592]	; (8001ea8 <HAL_GPIO_Init+0x2a8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d869      	bhi.n	8001d2e <HAL_GPIO_Init+0x12e>
 8001c5a:	4a94      	ldr	r2, [pc, #592]	; (8001eac <HAL_GPIO_Init+0x2ac>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d04c      	beq.n	8001cfa <HAL_GPIO_Init+0xfa>
 8001c60:	4a92      	ldr	r2, [pc, #584]	; (8001eac <HAL_GPIO_Init+0x2ac>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d863      	bhi.n	8001d2e <HAL_GPIO_Init+0x12e>
 8001c66:	4a92      	ldr	r2, [pc, #584]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d046      	beq.n	8001cfa <HAL_GPIO_Init+0xfa>
 8001c6c:	4a90      	ldr	r2, [pc, #576]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d85d      	bhi.n	8001d2e <HAL_GPIO_Init+0x12e>
 8001c72:	2b12      	cmp	r3, #18
 8001c74:	d82a      	bhi.n	8001ccc <HAL_GPIO_Init+0xcc>
 8001c76:	2b12      	cmp	r3, #18
 8001c78:	d859      	bhi.n	8001d2e <HAL_GPIO_Init+0x12e>
 8001c7a:	a201      	add	r2, pc, #4	; (adr r2, 8001c80 <HAL_GPIO_Init+0x80>)
 8001c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c80:	08001cfb 	.word	0x08001cfb
 8001c84:	08001cd5 	.word	0x08001cd5
 8001c88:	08001ce7 	.word	0x08001ce7
 8001c8c:	08001d29 	.word	0x08001d29
 8001c90:	08001d2f 	.word	0x08001d2f
 8001c94:	08001d2f 	.word	0x08001d2f
 8001c98:	08001d2f 	.word	0x08001d2f
 8001c9c:	08001d2f 	.word	0x08001d2f
 8001ca0:	08001d2f 	.word	0x08001d2f
 8001ca4:	08001d2f 	.word	0x08001d2f
 8001ca8:	08001d2f 	.word	0x08001d2f
 8001cac:	08001d2f 	.word	0x08001d2f
 8001cb0:	08001d2f 	.word	0x08001d2f
 8001cb4:	08001d2f 	.word	0x08001d2f
 8001cb8:	08001d2f 	.word	0x08001d2f
 8001cbc:	08001d2f 	.word	0x08001d2f
 8001cc0:	08001d2f 	.word	0x08001d2f
 8001cc4:	08001cdd 	.word	0x08001cdd
 8001cc8:	08001cf1 	.word	0x08001cf1
 8001ccc:	4a79      	ldr	r2, [pc, #484]	; (8001eb4 <HAL_GPIO_Init+0x2b4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cd2:	e02c      	b.n	8001d2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	623b      	str	r3, [r7, #32]
          break;
 8001cda:	e029      	b.n	8001d30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	623b      	str	r3, [r7, #32]
          break;
 8001ce4:	e024      	b.n	8001d30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	3308      	adds	r3, #8
 8001cec:	623b      	str	r3, [r7, #32]
          break;
 8001cee:	e01f      	b.n	8001d30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	330c      	adds	r3, #12
 8001cf6:	623b      	str	r3, [r7, #32]
          break;
 8001cf8:	e01a      	b.n	8001d30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d102      	bne.n	8001d08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d02:	2304      	movs	r3, #4
 8001d04:	623b      	str	r3, [r7, #32]
          break;
 8001d06:	e013      	b.n	8001d30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d105      	bne.n	8001d1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d10:	2308      	movs	r3, #8
 8001d12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69fa      	ldr	r2, [r7, #28]
 8001d18:	611a      	str	r2, [r3, #16]
          break;
 8001d1a:	e009      	b.n	8001d30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	615a      	str	r2, [r3, #20]
          break;
 8001d26:	e003      	b.n	8001d30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	623b      	str	r3, [r7, #32]
          break;
 8001d2c:	e000      	b.n	8001d30 <HAL_GPIO_Init+0x130>
          break;
 8001d2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2bff      	cmp	r3, #255	; 0xff
 8001d34:	d801      	bhi.n	8001d3a <HAL_GPIO_Init+0x13a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	e001      	b.n	8001d3e <HAL_GPIO_Init+0x13e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	2bff      	cmp	r3, #255	; 0xff
 8001d44:	d802      	bhi.n	8001d4c <HAL_GPIO_Init+0x14c>
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	e002      	b.n	8001d52 <HAL_GPIO_Init+0x152>
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	3b08      	subs	r3, #8
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	210f      	movs	r1, #15
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	401a      	ands	r2, r3
 8001d64:	6a39      	ldr	r1, [r7, #32]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80b1 	beq.w	8001ee2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d80:	4b4d      	ldr	r3, [pc, #308]	; (8001eb8 <HAL_GPIO_Init+0x2b8>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4a4c      	ldr	r2, [pc, #304]	; (8001eb8 <HAL_GPIO_Init+0x2b8>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6193      	str	r3, [r2, #24]
 8001d8c:	4b4a      	ldr	r3, [pc, #296]	; (8001eb8 <HAL_GPIO_Init+0x2b8>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d98:	4a48      	ldr	r2, [pc, #288]	; (8001ebc <HAL_GPIO_Init+0x2bc>)
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	220f      	movs	r2, #15
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4013      	ands	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a40      	ldr	r2, [pc, #256]	; (8001ec0 <HAL_GPIO_Init+0x2c0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d013      	beq.n	8001dec <HAL_GPIO_Init+0x1ec>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a3f      	ldr	r2, [pc, #252]	; (8001ec4 <HAL_GPIO_Init+0x2c4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00d      	beq.n	8001de8 <HAL_GPIO_Init+0x1e8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a3e      	ldr	r2, [pc, #248]	; (8001ec8 <HAL_GPIO_Init+0x2c8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d007      	beq.n	8001de4 <HAL_GPIO_Init+0x1e4>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a3d      	ldr	r2, [pc, #244]	; (8001ecc <HAL_GPIO_Init+0x2cc>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_GPIO_Init+0x1e0>
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e006      	b.n	8001dee <HAL_GPIO_Init+0x1ee>
 8001de0:	2304      	movs	r3, #4
 8001de2:	e004      	b.n	8001dee <HAL_GPIO_Init+0x1ee>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e002      	b.n	8001dee <HAL_GPIO_Init+0x1ee>
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <HAL_GPIO_Init+0x1ee>
 8001dec:	2300      	movs	r3, #0
 8001dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df0:	f002 0203 	and.w	r2, r2, #3
 8001df4:	0092      	lsls	r2, r2, #2
 8001df6:	4093      	lsls	r3, r2
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dfe:	492f      	ldr	r1, [pc, #188]	; (8001ebc <HAL_GPIO_Init+0x2bc>)
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	3302      	adds	r3, #2
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d006      	beq.n	8001e26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e18:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	492c      	ldr	r1, [pc, #176]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e26:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	4928      	ldr	r1, [pc, #160]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e40:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4922      	ldr	r1, [pc, #136]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
 8001e4c:	e006      	b.n	8001e5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	491e      	ldr	r1, [pc, #120]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e68:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	4918      	ldr	r1, [pc, #96]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4914      	ldr	r1, [pc, #80]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d021      	beq.n	8001ed4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e90:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	490e      	ldr	r1, [pc, #56]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60cb      	str	r3, [r1, #12]
 8001e9c:	e021      	b.n	8001ee2 <HAL_GPIO_Init+0x2e2>
 8001e9e:	bf00      	nop
 8001ea0:	10320000 	.word	0x10320000
 8001ea4:	10310000 	.word	0x10310000
 8001ea8:	10220000 	.word	0x10220000
 8001eac:	10210000 	.word	0x10210000
 8001eb0:	10120000 	.word	0x10120000
 8001eb4:	10110000 	.word	0x10110000
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40010000 	.word	0x40010000
 8001ec0:	40010800 	.word	0x40010800
 8001ec4:	40010c00 	.word	0x40010c00
 8001ec8:	40011000 	.word	0x40011000
 8001ecc:	40011400 	.word	0x40011400
 8001ed0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	4909      	ldr	r1, [pc, #36]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f47f ae8e 	bne.w	8001c14 <HAL_GPIO_Init+0x14>
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	372c      	adds	r7, #44	; 0x2c
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	40010400 	.word	0x40010400

08001f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
 8001f14:	4613      	mov	r3, r2
 8001f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f18:	787b      	ldrb	r3, [r7, #1]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f24:	e003      	b.n	8001f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	041a      	lsls	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	611a      	str	r2, [r3, #16]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e26c      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8087 	beq.w	8002066 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f58:	4b92      	ldr	r3, [pc, #584]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d00c      	beq.n	8001f7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f64:	4b8f      	ldr	r3, [pc, #572]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 030c 	and.w	r3, r3, #12
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d112      	bne.n	8001f96 <HAL_RCC_OscConfig+0x5e>
 8001f70:	4b8c      	ldr	r3, [pc, #560]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7c:	d10b      	bne.n	8001f96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7e:	4b89      	ldr	r3, [pc, #548]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d06c      	beq.n	8002064 <HAL_RCC_OscConfig+0x12c>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d168      	bne.n	8002064 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e246      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x76>
 8001fa0:	4b80      	ldr	r3, [pc, #512]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a7f      	ldr	r2, [pc, #508]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	e02e      	b.n	800200c <HAL_RCC_OscConfig+0xd4>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x98>
 8001fb6:	4b7b      	ldr	r3, [pc, #492]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a7a      	ldr	r2, [pc, #488]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b78      	ldr	r3, [pc, #480]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a77      	ldr	r2, [pc, #476]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e01d      	b.n	800200c <HAL_RCC_OscConfig+0xd4>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0xbc>
 8001fda:	4b72      	ldr	r3, [pc, #456]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a71      	ldr	r2, [pc, #452]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b6f      	ldr	r3, [pc, #444]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a6e      	ldr	r2, [pc, #440]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0xd4>
 8001ff4:	4b6b      	ldr	r3, [pc, #428]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a6a      	ldr	r2, [pc, #424]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b68      	ldr	r3, [pc, #416]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a67      	ldr	r2, [pc, #412]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d013      	beq.n	800203c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7ff faac 	bl	8001570 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800201c:	f7ff faa8 	bl	8001570 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b64      	cmp	r3, #100	; 0x64
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e1fa      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b5d      	ldr	r3, [pc, #372]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0xe4>
 800203a:	e014      	b.n	8002066 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff fa98 	bl	8001570 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002044:	f7ff fa94 	bl	8001570 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	; 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e1e6      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002056:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x10c>
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d063      	beq.n	800213a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002072:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800207e:	4b49      	ldr	r3, [pc, #292]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b08      	cmp	r3, #8
 8002088:	d11c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x18c>
 800208a:	4b46      	ldr	r3, [pc, #280]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d116      	bne.n	80020c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002096:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <HAL_RCC_OscConfig+0x176>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e1ba      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ae:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4939      	ldr	r1, [pc, #228]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c2:	e03a      	b.n	800213a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d020      	beq.n	800210e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020cc:	4b36      	ldr	r3, [pc, #216]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7ff fa4d 	bl	8001570 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020da:	f7ff fa49 	bl	8001570 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e19b      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ec:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f8:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4927      	ldr	r1, [pc, #156]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002108:	4313      	orrs	r3, r2
 800210a:	600b      	str	r3, [r1, #0]
 800210c:	e015      	b.n	800213a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800210e:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff fa2c 	bl	8001570 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800211c:	f7ff fa28 	bl	8001570 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e17a      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d03a      	beq.n	80021bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d019      	beq.n	8002182 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <HAL_RCC_OscConfig+0x274>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002154:	f7ff fa0c 	bl	8001570 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215c:	f7ff fa08 	bl	8001570 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e15a      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800217a:	2001      	movs	r0, #1
 800217c:	f000 fad8 	bl	8002730 <RCC_Delay>
 8002180:	e01c      	b.n	80021bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_RCC_OscConfig+0x274>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002188:	f7ff f9f2 	bl	8001570 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218e:	e00f      	b.n	80021b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002190:	f7ff f9ee 	bl	8001570 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d908      	bls.n	80021b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e140      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	42420000 	.word	0x42420000
 80021ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b0:	4b9e      	ldr	r3, [pc, #632]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1e9      	bne.n	8002190 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80a6 	beq.w	8002316 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ce:	4b97      	ldr	r3, [pc, #604]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10d      	bne.n	80021f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	4b94      	ldr	r3, [pc, #592]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	4a93      	ldr	r2, [pc, #588]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e4:	61d3      	str	r3, [r2, #28]
 80021e6:	4b91      	ldr	r3, [pc, #580]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f2:	2301      	movs	r3, #1
 80021f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f6:	4b8e      	ldr	r3, [pc, #568]	; (8002430 <HAL_RCC_OscConfig+0x4f8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d118      	bne.n	8002234 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002202:	4b8b      	ldr	r3, [pc, #556]	; (8002430 <HAL_RCC_OscConfig+0x4f8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a8a      	ldr	r2, [pc, #552]	; (8002430 <HAL_RCC_OscConfig+0x4f8>)
 8002208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800220e:	f7ff f9af 	bl	8001570 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002216:	f7ff f9ab 	bl	8001570 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b64      	cmp	r3, #100	; 0x64
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0fd      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002228:	4b81      	ldr	r3, [pc, #516]	; (8002430 <HAL_RCC_OscConfig+0x4f8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x312>
 800223c:	4b7b      	ldr	r3, [pc, #492]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4a7a      	ldr	r2, [pc, #488]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6213      	str	r3, [r2, #32]
 8002248:	e02d      	b.n	80022a6 <HAL_RCC_OscConfig+0x36e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0x334>
 8002252:	4b76      	ldr	r3, [pc, #472]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	4a75      	ldr	r2, [pc, #468]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 8002258:	f023 0301 	bic.w	r3, r3, #1
 800225c:	6213      	str	r3, [r2, #32]
 800225e:	4b73      	ldr	r3, [pc, #460]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4a72      	ldr	r2, [pc, #456]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 8002264:	f023 0304 	bic.w	r3, r3, #4
 8002268:	6213      	str	r3, [r2, #32]
 800226a:	e01c      	b.n	80022a6 <HAL_RCC_OscConfig+0x36e>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b05      	cmp	r3, #5
 8002272:	d10c      	bne.n	800228e <HAL_RCC_OscConfig+0x356>
 8002274:	4b6d      	ldr	r3, [pc, #436]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4a6c      	ldr	r2, [pc, #432]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	6213      	str	r3, [r2, #32]
 8002280:	4b6a      	ldr	r3, [pc, #424]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	4a69      	ldr	r2, [pc, #420]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6213      	str	r3, [r2, #32]
 800228c:	e00b      	b.n	80022a6 <HAL_RCC_OscConfig+0x36e>
 800228e:	4b67      	ldr	r3, [pc, #412]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a66      	ldr	r2, [pc, #408]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6213      	str	r3, [r2, #32]
 800229a:	4b64      	ldr	r3, [pc, #400]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4a63      	ldr	r2, [pc, #396]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	f023 0304 	bic.w	r3, r3, #4
 80022a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d015      	beq.n	80022da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ae:	f7ff f95f 	bl	8001570 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7ff f95b 	bl	8001570 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e0ab      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	4b57      	ldr	r3, [pc, #348]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0ee      	beq.n	80022b6 <HAL_RCC_OscConfig+0x37e>
 80022d8:	e014      	b.n	8002304 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022da:	f7ff f949 	bl	8001570 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7ff f945 	bl	8001570 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e095      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f8:	4b4c      	ldr	r3, [pc, #304]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ee      	bne.n	80022e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002304:	7dfb      	ldrb	r3, [r7, #23]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d105      	bne.n	8002316 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230a:	4b48      	ldr	r3, [pc, #288]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a47      	ldr	r2, [pc, #284]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 8002310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002314:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8081 	beq.w	8002422 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002320:	4b42      	ldr	r3, [pc, #264]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b08      	cmp	r3, #8
 800232a:	d061      	beq.n	80023f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d146      	bne.n	80023c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002334:	4b3f      	ldr	r3, [pc, #252]	; (8002434 <HAL_RCC_OscConfig+0x4fc>)
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7ff f919 	bl	8001570 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002342:	f7ff f915 	bl	8001570 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e067      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002354:	4b35      	ldr	r3, [pc, #212]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f0      	bne.n	8002342 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002368:	d108      	bne.n	800237c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800236a:	4b30      	ldr	r3, [pc, #192]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	492d      	ldr	r1, [pc, #180]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800237c:	4b2b      	ldr	r3, [pc, #172]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a19      	ldr	r1, [r3, #32]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	430b      	orrs	r3, r1
 800238e:	4927      	ldr	r1, [pc, #156]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <HAL_RCC_OscConfig+0x4fc>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7ff f8e9 	bl	8001570 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a2:	f7ff f8e5 	bl	8001570 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e037      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x46a>
 80023c0:	e02f      	b.n	8002422 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c2:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <HAL_RCC_OscConfig+0x4fc>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7ff f8d2 	bl	8001570 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d0:	f7ff f8ce 	bl	8001570 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e020      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e2:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x498>
 80023ee:	e018      	b.n	8002422 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e013      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	429a      	cmp	r2, r3
 800240e:	d106      	bne.n	800241e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d001      	beq.n	8002422 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	40007000 	.word	0x40007000
 8002434:	42420060 	.word	0x42420060

08002438 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0d0      	b.n	80025ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800244c:	4b6a      	ldr	r3, [pc, #424]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d910      	bls.n	800247c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b67      	ldr	r3, [pc, #412]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 0207 	bic.w	r2, r3, #7
 8002462:	4965      	ldr	r1, [pc, #404]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4313      	orrs	r3, r2
 8002468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b63      	ldr	r3, [pc, #396]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0b8      	b.n	80025ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002494:	4b59      	ldr	r3, [pc, #356]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	4a58      	ldr	r2, [pc, #352]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800249e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ac:	4b53      	ldr	r3, [pc, #332]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4a52      	ldr	r2, [pc, #328]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b8:	4b50      	ldr	r3, [pc, #320]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	494d      	ldr	r1, [pc, #308]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d040      	beq.n	8002558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	4b47      	ldr	r3, [pc, #284]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d115      	bne.n	8002516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e07f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f6:	4b41      	ldr	r3, [pc, #260]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e073      	b.n	80025ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002506:	4b3d      	ldr	r3, [pc, #244]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e06b      	b.n	80025ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002516:	4b39      	ldr	r3, [pc, #228]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f023 0203 	bic.w	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4936      	ldr	r1, [pc, #216]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002528:	f7ff f822 	bl	8001570 <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	e00a      	b.n	8002546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002530:	f7ff f81e 	bl	8001570 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	; 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e053      	b.n	80025ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 020c 	and.w	r2, r3, #12
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	429a      	cmp	r2, r3
 8002556:	d1eb      	bne.n	8002530 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002558:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d210      	bcs.n	8002588 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 0207 	bic.w	r2, r3, #7
 800256e:	4922      	ldr	r1, [pc, #136]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e032      	b.n	80025ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4916      	ldr	r1, [pc, #88]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025b2:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	490e      	ldr	r1, [pc, #56]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025c6:	f000 f821 	bl	800260c <HAL_RCC_GetSysClockFreq>
 80025ca:	4602      	mov	r2, r0
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	490a      	ldr	r1, [pc, #40]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 80025d8:	5ccb      	ldrb	r3, [r1, r3]
 80025da:	fa22 f303 	lsr.w	r3, r2, r3
 80025de:	4a09      	ldr	r2, [pc, #36]	; (8002604 <HAL_RCC_ClockConfig+0x1cc>)
 80025e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_ClockConfig+0x1d0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe ff80 	bl	80014ec <HAL_InitTick>

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40022000 	.word	0x40022000
 80025fc:	40021000 	.word	0x40021000
 8002600:	08006104 	.word	0x08006104
 8002604:	20000044 	.word	0x20000044
 8002608:	20000048 	.word	0x20000048

0800260c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800260c:	b490      	push	{r4, r7}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002612:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002614:	1d3c      	adds	r4, r7, #4
 8002616:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800261c:	f240 2301 	movw	r3, #513	; 0x201
 8002620:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002636:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b04      	cmp	r3, #4
 8002644:	d002      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x40>
 8002646:	2b08      	cmp	r3, #8
 8002648:	d003      	beq.n	8002652 <HAL_RCC_GetSysClockFreq+0x46>
 800264a:	e02d      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800264c:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800264e:	623b      	str	r3, [r7, #32]
      break;
 8002650:	e02d      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	0c9b      	lsrs	r3, r3, #18
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800265e:	4413      	add	r3, r2
 8002660:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002664:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d013      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002670:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	0c5b      	lsrs	r3, r3, #17
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800267e:	4413      	add	r3, r2
 8002680:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002684:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800268a:	fb02 f203 	mul.w	r2, r2, r3
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
 8002696:	e004      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	623b      	str	r3, [r7, #32]
      break;
 80026a6:	e002      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026aa:	623b      	str	r3, [r7, #32]
      break;
 80026ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ae:	6a3b      	ldr	r3, [r7, #32]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3728      	adds	r7, #40	; 0x28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc90      	pop	{r4, r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	080060f4 	.word	0x080060f4
 80026c0:	40021000 	.word	0x40021000
 80026c4:	007a1200 	.word	0x007a1200
 80026c8:	003d0900 	.word	0x003d0900

080026cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d0:	4b02      	ldr	r3, [pc, #8]	; (80026dc <HAL_RCC_GetHCLKFreq+0x10>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	20000044 	.word	0x20000044

080026e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026e4:	f7ff fff2 	bl	80026cc <HAL_RCC_GetHCLKFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4903      	ldr	r1, [pc, #12]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000
 8002704:	08006114 	.word	0x08006114

08002708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800270c:	f7ff ffde 	bl	80026cc <HAL_RCC_GetHCLKFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	0adb      	lsrs	r3, r3, #11
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	4903      	ldr	r1, [pc, #12]	; (800272c <HAL_RCC_GetPCLK2Freq+0x24>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000
 800272c:	08006114 	.word	0x08006114

08002730 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <RCC_Delay+0x34>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <RCC_Delay+0x38>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	0a5b      	lsrs	r3, r3, #9
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800274c:	bf00      	nop
  }
  while (Delay --);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1e5a      	subs	r2, r3, #1
 8002752:	60fa      	str	r2, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f9      	bne.n	800274c <RCC_Delay+0x1c>
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	20000044 	.word	0x20000044
 8002768:	10624dd3 	.word	0x10624dd3

0800276c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e041      	b.n	8002802 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fe fd20 	bl	80011d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3304      	adds	r3, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f000 fa1e 	bl	8002bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b02      	cmp	r3, #2
 800281e:	d122      	bne.n	8002866 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b02      	cmp	r3, #2
 800282c:	d11b      	bne.n	8002866 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f06f 0202 	mvn.w	r2, #2
 8002836:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f9b1 	bl	8002bb4 <HAL_TIM_IC_CaptureCallback>
 8002852:	e005      	b.n	8002860 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f9a4 	bl	8002ba2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f9b3 	bl	8002bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b04      	cmp	r3, #4
 8002872:	d122      	bne.n	80028ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b04      	cmp	r3, #4
 8002880:	d11b      	bne.n	80028ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f06f 0204 	mvn.w	r2, #4
 800288a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f987 	bl	8002bb4 <HAL_TIM_IC_CaptureCallback>
 80028a6:	e005      	b.n	80028b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f97a 	bl	8002ba2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f989 	bl	8002bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d122      	bne.n	800290e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d11b      	bne.n	800290e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f06f 0208 	mvn.w	r2, #8
 80028de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2204      	movs	r2, #4
 80028e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f95d 	bl	8002bb4 <HAL_TIM_IC_CaptureCallback>
 80028fa:	e005      	b.n	8002908 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f950 	bl	8002ba2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f95f 	bl	8002bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b10      	cmp	r3, #16
 800291a:	d122      	bne.n	8002962 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b10      	cmp	r3, #16
 8002928:	d11b      	bne.n	8002962 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f06f 0210 	mvn.w	r2, #16
 8002932:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2208      	movs	r2, #8
 8002938:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f933 	bl	8002bb4 <HAL_TIM_IC_CaptureCallback>
 800294e:	e005      	b.n	800295c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f926 	bl	8002ba2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f935 	bl	8002bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d10e      	bne.n	800298e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d107      	bne.n	800298e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f06f 0201 	mvn.w	r2, #1
 8002986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7fe fbb5 	bl	80010f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002998:	2b80      	cmp	r3, #128	; 0x80
 800299a:	d10e      	bne.n	80029ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a6:	2b80      	cmp	r3, #128	; 0x80
 80029a8:	d107      	bne.n	80029ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fa78 	bl	8002eaa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b40      	cmp	r3, #64	; 0x40
 80029c6:	d10e      	bne.n	80029e6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b40      	cmp	r3, #64	; 0x40
 80029d4:	d107      	bne.n	80029e6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f8f9 	bl	8002bd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d10e      	bne.n	8002a12 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d107      	bne.n	8002a12 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f06f 0220 	mvn.w	r2, #32
 8002a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fa43 	bl	8002e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_ConfigClockSource+0x18>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e0b3      	b.n	8002b9a <HAL_TIM_ConfigClockSource+0x180>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a50:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a58:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6a:	d03e      	beq.n	8002aea <HAL_TIM_ConfigClockSource+0xd0>
 8002a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a70:	f200 8087 	bhi.w	8002b82 <HAL_TIM_ConfigClockSource+0x168>
 8002a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a78:	f000 8085 	beq.w	8002b86 <HAL_TIM_ConfigClockSource+0x16c>
 8002a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a80:	d87f      	bhi.n	8002b82 <HAL_TIM_ConfigClockSource+0x168>
 8002a82:	2b70      	cmp	r3, #112	; 0x70
 8002a84:	d01a      	beq.n	8002abc <HAL_TIM_ConfigClockSource+0xa2>
 8002a86:	2b70      	cmp	r3, #112	; 0x70
 8002a88:	d87b      	bhi.n	8002b82 <HAL_TIM_ConfigClockSource+0x168>
 8002a8a:	2b60      	cmp	r3, #96	; 0x60
 8002a8c:	d050      	beq.n	8002b30 <HAL_TIM_ConfigClockSource+0x116>
 8002a8e:	2b60      	cmp	r3, #96	; 0x60
 8002a90:	d877      	bhi.n	8002b82 <HAL_TIM_ConfigClockSource+0x168>
 8002a92:	2b50      	cmp	r3, #80	; 0x50
 8002a94:	d03c      	beq.n	8002b10 <HAL_TIM_ConfigClockSource+0xf6>
 8002a96:	2b50      	cmp	r3, #80	; 0x50
 8002a98:	d873      	bhi.n	8002b82 <HAL_TIM_ConfigClockSource+0x168>
 8002a9a:	2b40      	cmp	r3, #64	; 0x40
 8002a9c:	d058      	beq.n	8002b50 <HAL_TIM_ConfigClockSource+0x136>
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	d86f      	bhi.n	8002b82 <HAL_TIM_ConfigClockSource+0x168>
 8002aa2:	2b30      	cmp	r3, #48	; 0x30
 8002aa4:	d064      	beq.n	8002b70 <HAL_TIM_ConfigClockSource+0x156>
 8002aa6:	2b30      	cmp	r3, #48	; 0x30
 8002aa8:	d86b      	bhi.n	8002b82 <HAL_TIM_ConfigClockSource+0x168>
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	d060      	beq.n	8002b70 <HAL_TIM_ConfigClockSource+0x156>
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	d867      	bhi.n	8002b82 <HAL_TIM_ConfigClockSource+0x168>
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d05c      	beq.n	8002b70 <HAL_TIM_ConfigClockSource+0x156>
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d05a      	beq.n	8002b70 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002aba:	e062      	b.n	8002b82 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	6899      	ldr	r1, [r3, #8]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f000 f967 	bl	8002d9e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ade:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	609a      	str	r2, [r3, #8]
      break;
 8002ae8:	e04e      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6899      	ldr	r1, [r3, #8]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f000 f950 	bl	8002d9e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b0c:	609a      	str	r2, [r3, #8]
      break;
 8002b0e:	e03b      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6859      	ldr	r1, [r3, #4]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f000 f8c7 	bl	8002cb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2150      	movs	r1, #80	; 0x50
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 f91e 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b2e:	e02b      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f000 f8e5 	bl	8002d0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2160      	movs	r1, #96	; 0x60
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 f90e 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b4e:	e01b      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	6859      	ldr	r1, [r3, #4]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f000 f8a7 	bl	8002cb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2140      	movs	r1, #64	; 0x40
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 f8fe 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b6e:	e00b      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f000 f8f5 	bl	8002d6a <TIM_ITRx_SetConfig>
        break;
 8002b80:	e002      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b82:	bf00      	nop
 8002b84:	e000      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
	...

08002bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a29      	ldr	r2, [pc, #164]	; (8002ca4 <TIM_Base_SetConfig+0xb8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00b      	beq.n	8002c1c <TIM_Base_SetConfig+0x30>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0a:	d007      	beq.n	8002c1c <TIM_Base_SetConfig+0x30>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a26      	ldr	r2, [pc, #152]	; (8002ca8 <TIM_Base_SetConfig+0xbc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <TIM_Base_SetConfig+0x30>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a25      	ldr	r2, [pc, #148]	; (8002cac <TIM_Base_SetConfig+0xc0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d108      	bne.n	8002c2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a1c      	ldr	r2, [pc, #112]	; (8002ca4 <TIM_Base_SetConfig+0xb8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00b      	beq.n	8002c4e <TIM_Base_SetConfig+0x62>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d007      	beq.n	8002c4e <TIM_Base_SetConfig+0x62>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a19      	ldr	r2, [pc, #100]	; (8002ca8 <TIM_Base_SetConfig+0xbc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d003      	beq.n	8002c4e <TIM_Base_SetConfig+0x62>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a18      	ldr	r2, [pc, #96]	; (8002cac <TIM_Base_SetConfig+0xc0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d108      	bne.n	8002c60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a07      	ldr	r2, [pc, #28]	; (8002ca4 <TIM_Base_SetConfig+0xb8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d103      	bne.n	8002c94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	615a      	str	r2, [r3, #20]
}
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40000800 	.word	0x40000800

08002cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	f023 0201 	bic.w	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f023 030a 	bic.w	r3, r3, #10
 8002cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	621a      	str	r2, [r3, #32]
}
 8002d02:	bf00      	nop
 8002d04:	371c      	adds	r7, #28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	f023 0210 	bic.w	r2, r3, #16
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	031b      	lsls	r3, r3, #12
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	621a      	str	r2, [r3, #32]
}
 8002d60:	bf00      	nop
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f043 0307 	orr.w	r3, r3, #7
 8002d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	609a      	str	r2, [r3, #8]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b087      	sub	sp, #28
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002db8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	021a      	lsls	r2, r3, #8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	609a      	str	r2, [r3, #8]
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e046      	b.n	8002e82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a16      	ldr	r2, [pc, #88]	; (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d00e      	beq.n	8002e56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e40:	d009      	beq.n	8002e56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d004      	beq.n	8002e56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a10      	ldr	r2, [pc, #64]	; (8002e94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d10c      	bne.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr
 8002e8c:	40012c00 	.word	0x40012c00
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40000800 	.word	0x40000800

08002e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e03f      	b.n	8002f4e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe f99c 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	; 0x24
 8002eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f905 	bl	8003110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b08a      	sub	sp, #40	; 0x28
 8002f5a:	af02      	add	r7, sp, #8
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d17c      	bne.n	8003070 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_UART_Transmit+0x2c>
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e075      	b.n	8003072 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_UART_Transmit+0x3e>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e06e      	b.n	8003072 <HAL_UART_Transmit+0x11c>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2221      	movs	r2, #33	; 0x21
 8002fa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002faa:	f7fe fae1 	bl	8001570 <HAL_GetTick>
 8002fae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	88fa      	ldrh	r2, [r7, #6]
 8002fb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	88fa      	ldrh	r2, [r7, #6]
 8002fba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc4:	d108      	bne.n	8002fd8 <HAL_UART_Transmit+0x82>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d104      	bne.n	8002fd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	e003      	b.n	8002fe0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002fe8:	e02a      	b.n	8003040 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f840 	bl	800307a <UART_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e036      	b.n	8003072 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10b      	bne.n	8003022 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003018:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	3302      	adds	r3, #2
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	e007      	b.n	8003032 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	3301      	adds	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1cf      	bne.n	8002fea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2200      	movs	r2, #0
 8003052:	2140      	movs	r1, #64	; 0x40
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f810 	bl	800307a <UART_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e006      	b.n	8003072 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	e000      	b.n	8003072 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003070:	2302      	movs	r3, #2
  }
}
 8003072:	4618      	mov	r0, r3
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800308a:	e02c      	b.n	80030e6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003092:	d028      	beq.n	80030e6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <UART_WaitOnFlagUntilTimeout+0x30>
 800309a:	f7fe fa69 	bl	8001570 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d21d      	bcs.n	80030e6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030b8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e00f      	b.n	8003106 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4013      	ands	r3, r2
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	bf0c      	ite	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	2300      	movne	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	429a      	cmp	r2, r3
 8003102:	d0c3      	beq.n	800308c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800314a:	f023 030c 	bic.w	r3, r3, #12
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	430b      	orrs	r3, r1
 8003156:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a2c      	ldr	r2, [pc, #176]	; (8003224 <UART_SetConfig+0x114>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d103      	bne.n	8003180 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003178:	f7ff fac6 	bl	8002708 <HAL_RCC_GetPCLK2Freq>
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	e002      	b.n	8003186 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003180:	f7ff faae 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 8003184:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009a      	lsls	r2, r3, #2
 8003190:	441a      	add	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	4a22      	ldr	r2, [pc, #136]	; (8003228 <UART_SetConfig+0x118>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	0119      	lsls	r1, r3, #4
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	009a      	lsls	r2, r3, #2
 80031b0:	441a      	add	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031bc:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <UART_SetConfig+0x118>)
 80031be:	fba3 0302 	umull	r0, r3, r3, r2
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	2064      	movs	r0, #100	; 0x64
 80031c6:	fb00 f303 	mul.w	r3, r0, r3
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	3332      	adds	r3, #50	; 0x32
 80031d0:	4a15      	ldr	r2, [pc, #84]	; (8003228 <UART_SetConfig+0x118>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031dc:	4419      	add	r1, r3
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009a      	lsls	r2, r3, #2
 80031e8:	441a      	add	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <UART_SetConfig+0x118>)
 80031f6:	fba3 0302 	umull	r0, r3, r3, r2
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2064      	movs	r0, #100	; 0x64
 80031fe:	fb00 f303 	mul.w	r3, r0, r3
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	3332      	adds	r3, #50	; 0x32
 8003208:	4a07      	ldr	r2, [pc, #28]	; (8003228 <UART_SetConfig+0x118>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	f003 020f 	and.w	r2, r3, #15
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	440a      	add	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40013800 	.word	0x40013800
 8003228:	51eb851f 	.word	0x51eb851f

0800322c <__errno>:
 800322c:	4b01      	ldr	r3, [pc, #4]	; (8003234 <__errno+0x8>)
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000050 	.word	0x20000050

08003238 <__libc_init_array>:
 8003238:	b570      	push	{r4, r5, r6, lr}
 800323a:	2600      	movs	r6, #0
 800323c:	4d0c      	ldr	r5, [pc, #48]	; (8003270 <__libc_init_array+0x38>)
 800323e:	4c0d      	ldr	r4, [pc, #52]	; (8003274 <__libc_init_array+0x3c>)
 8003240:	1b64      	subs	r4, r4, r5
 8003242:	10a4      	asrs	r4, r4, #2
 8003244:	42a6      	cmp	r6, r4
 8003246:	d109      	bne.n	800325c <__libc_init_array+0x24>
 8003248:	f002 fed0 	bl	8005fec <_init>
 800324c:	2600      	movs	r6, #0
 800324e:	4d0a      	ldr	r5, [pc, #40]	; (8003278 <__libc_init_array+0x40>)
 8003250:	4c0a      	ldr	r4, [pc, #40]	; (800327c <__libc_init_array+0x44>)
 8003252:	1b64      	subs	r4, r4, r5
 8003254:	10a4      	asrs	r4, r4, #2
 8003256:	42a6      	cmp	r6, r4
 8003258:	d105      	bne.n	8003266 <__libc_init_array+0x2e>
 800325a:	bd70      	pop	{r4, r5, r6, pc}
 800325c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003260:	4798      	blx	r3
 8003262:	3601      	adds	r6, #1
 8003264:	e7ee      	b.n	8003244 <__libc_init_array+0xc>
 8003266:	f855 3b04 	ldr.w	r3, [r5], #4
 800326a:	4798      	blx	r3
 800326c:	3601      	adds	r6, #1
 800326e:	e7f2      	b.n	8003256 <__libc_init_array+0x1e>
 8003270:	080064fc 	.word	0x080064fc
 8003274:	080064fc 	.word	0x080064fc
 8003278:	080064fc 	.word	0x080064fc
 800327c:	08006500 	.word	0x08006500

08003280 <memset>:
 8003280:	4603      	mov	r3, r0
 8003282:	4402      	add	r2, r0
 8003284:	4293      	cmp	r3, r2
 8003286:	d100      	bne.n	800328a <memset+0xa>
 8003288:	4770      	bx	lr
 800328a:	f803 1b01 	strb.w	r1, [r3], #1
 800328e:	e7f9      	b.n	8003284 <memset+0x4>

08003290 <__cvt>:
 8003290:	2b00      	cmp	r3, #0
 8003292:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003296:	461f      	mov	r7, r3
 8003298:	bfbb      	ittet	lt
 800329a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800329e:	461f      	movlt	r7, r3
 80032a0:	2300      	movge	r3, #0
 80032a2:	232d      	movlt	r3, #45	; 0x2d
 80032a4:	b088      	sub	sp, #32
 80032a6:	4614      	mov	r4, r2
 80032a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80032aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80032ac:	7013      	strb	r3, [r2, #0]
 80032ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80032b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80032b4:	f023 0820 	bic.w	r8, r3, #32
 80032b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032bc:	d005      	beq.n	80032ca <__cvt+0x3a>
 80032be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80032c2:	d100      	bne.n	80032c6 <__cvt+0x36>
 80032c4:	3501      	adds	r5, #1
 80032c6:	2302      	movs	r3, #2
 80032c8:	e000      	b.n	80032cc <__cvt+0x3c>
 80032ca:	2303      	movs	r3, #3
 80032cc:	aa07      	add	r2, sp, #28
 80032ce:	9204      	str	r2, [sp, #16]
 80032d0:	aa06      	add	r2, sp, #24
 80032d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80032d6:	e9cd 3500 	strd	r3, r5, [sp]
 80032da:	4622      	mov	r2, r4
 80032dc:	463b      	mov	r3, r7
 80032de:	f000 fcfb 	bl	8003cd8 <_dtoa_r>
 80032e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80032e6:	4606      	mov	r6, r0
 80032e8:	d102      	bne.n	80032f0 <__cvt+0x60>
 80032ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80032ec:	07db      	lsls	r3, r3, #31
 80032ee:	d522      	bpl.n	8003336 <__cvt+0xa6>
 80032f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032f4:	eb06 0905 	add.w	r9, r6, r5
 80032f8:	d110      	bne.n	800331c <__cvt+0x8c>
 80032fa:	7833      	ldrb	r3, [r6, #0]
 80032fc:	2b30      	cmp	r3, #48	; 0x30
 80032fe:	d10a      	bne.n	8003316 <__cvt+0x86>
 8003300:	2200      	movs	r2, #0
 8003302:	2300      	movs	r3, #0
 8003304:	4620      	mov	r0, r4
 8003306:	4639      	mov	r1, r7
 8003308:	f7fd fb4e 	bl	80009a8 <__aeabi_dcmpeq>
 800330c:	b918      	cbnz	r0, 8003316 <__cvt+0x86>
 800330e:	f1c5 0501 	rsb	r5, r5, #1
 8003312:	f8ca 5000 	str.w	r5, [sl]
 8003316:	f8da 3000 	ldr.w	r3, [sl]
 800331a:	4499      	add	r9, r3
 800331c:	2200      	movs	r2, #0
 800331e:	2300      	movs	r3, #0
 8003320:	4620      	mov	r0, r4
 8003322:	4639      	mov	r1, r7
 8003324:	f7fd fb40 	bl	80009a8 <__aeabi_dcmpeq>
 8003328:	b108      	cbz	r0, 800332e <__cvt+0x9e>
 800332a:	f8cd 901c 	str.w	r9, [sp, #28]
 800332e:	2230      	movs	r2, #48	; 0x30
 8003330:	9b07      	ldr	r3, [sp, #28]
 8003332:	454b      	cmp	r3, r9
 8003334:	d307      	bcc.n	8003346 <__cvt+0xb6>
 8003336:	4630      	mov	r0, r6
 8003338:	9b07      	ldr	r3, [sp, #28]
 800333a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800333c:	1b9b      	subs	r3, r3, r6
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	b008      	add	sp, #32
 8003342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003346:	1c59      	adds	r1, r3, #1
 8003348:	9107      	str	r1, [sp, #28]
 800334a:	701a      	strb	r2, [r3, #0]
 800334c:	e7f0      	b.n	8003330 <__cvt+0xa0>

0800334e <__exponent>:
 800334e:	4603      	mov	r3, r0
 8003350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003352:	2900      	cmp	r1, #0
 8003354:	f803 2b02 	strb.w	r2, [r3], #2
 8003358:	bfb6      	itet	lt
 800335a:	222d      	movlt	r2, #45	; 0x2d
 800335c:	222b      	movge	r2, #43	; 0x2b
 800335e:	4249      	neglt	r1, r1
 8003360:	2909      	cmp	r1, #9
 8003362:	7042      	strb	r2, [r0, #1]
 8003364:	dd2b      	ble.n	80033be <__exponent+0x70>
 8003366:	f10d 0407 	add.w	r4, sp, #7
 800336a:	46a4      	mov	ip, r4
 800336c:	270a      	movs	r7, #10
 800336e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003372:	460a      	mov	r2, r1
 8003374:	46a6      	mov	lr, r4
 8003376:	fb07 1516 	mls	r5, r7, r6, r1
 800337a:	2a63      	cmp	r2, #99	; 0x63
 800337c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003380:	4631      	mov	r1, r6
 8003382:	f104 34ff 	add.w	r4, r4, #4294967295
 8003386:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800338a:	dcf0      	bgt.n	800336e <__exponent+0x20>
 800338c:	3130      	adds	r1, #48	; 0x30
 800338e:	f1ae 0502 	sub.w	r5, lr, #2
 8003392:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003396:	4629      	mov	r1, r5
 8003398:	1c44      	adds	r4, r0, #1
 800339a:	4561      	cmp	r1, ip
 800339c:	d30a      	bcc.n	80033b4 <__exponent+0x66>
 800339e:	f10d 0209 	add.w	r2, sp, #9
 80033a2:	eba2 020e 	sub.w	r2, r2, lr
 80033a6:	4565      	cmp	r5, ip
 80033a8:	bf88      	it	hi
 80033aa:	2200      	movhi	r2, #0
 80033ac:	4413      	add	r3, r2
 80033ae:	1a18      	subs	r0, r3, r0
 80033b0:	b003      	add	sp, #12
 80033b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033b8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80033bc:	e7ed      	b.n	800339a <__exponent+0x4c>
 80033be:	2330      	movs	r3, #48	; 0x30
 80033c0:	3130      	adds	r1, #48	; 0x30
 80033c2:	7083      	strb	r3, [r0, #2]
 80033c4:	70c1      	strb	r1, [r0, #3]
 80033c6:	1d03      	adds	r3, r0, #4
 80033c8:	e7f1      	b.n	80033ae <__exponent+0x60>
	...

080033cc <_printf_float>:
 80033cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d0:	b091      	sub	sp, #68	; 0x44
 80033d2:	460c      	mov	r4, r1
 80033d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80033d8:	4616      	mov	r6, r2
 80033da:	461f      	mov	r7, r3
 80033dc:	4605      	mov	r5, r0
 80033de:	f001 fa69 	bl	80048b4 <_localeconv_r>
 80033e2:	6803      	ldr	r3, [r0, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	9309      	str	r3, [sp, #36]	; 0x24
 80033e8:	f7fc feb2 	bl	8000150 <strlen>
 80033ec:	2300      	movs	r3, #0
 80033ee:	930e      	str	r3, [sp, #56]	; 0x38
 80033f0:	f8d8 3000 	ldr.w	r3, [r8]
 80033f4:	900a      	str	r0, [sp, #40]	; 0x28
 80033f6:	3307      	adds	r3, #7
 80033f8:	f023 0307 	bic.w	r3, r3, #7
 80033fc:	f103 0208 	add.w	r2, r3, #8
 8003400:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003404:	f8d4 b000 	ldr.w	fp, [r4]
 8003408:	f8c8 2000 	str.w	r2, [r8]
 800340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003410:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003414:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003418:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800341c:	930b      	str	r3, [sp, #44]	; 0x2c
 800341e:	f04f 32ff 	mov.w	r2, #4294967295
 8003422:	4640      	mov	r0, r8
 8003424:	4b9c      	ldr	r3, [pc, #624]	; (8003698 <_printf_float+0x2cc>)
 8003426:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003428:	f7fd faf0 	bl	8000a0c <__aeabi_dcmpun>
 800342c:	bb70      	cbnz	r0, 800348c <_printf_float+0xc0>
 800342e:	f04f 32ff 	mov.w	r2, #4294967295
 8003432:	4640      	mov	r0, r8
 8003434:	4b98      	ldr	r3, [pc, #608]	; (8003698 <_printf_float+0x2cc>)
 8003436:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003438:	f7fd faca 	bl	80009d0 <__aeabi_dcmple>
 800343c:	bb30      	cbnz	r0, 800348c <_printf_float+0xc0>
 800343e:	2200      	movs	r2, #0
 8003440:	2300      	movs	r3, #0
 8003442:	4640      	mov	r0, r8
 8003444:	4651      	mov	r1, sl
 8003446:	f7fd fab9 	bl	80009bc <__aeabi_dcmplt>
 800344a:	b110      	cbz	r0, 8003452 <_printf_float+0x86>
 800344c:	232d      	movs	r3, #45	; 0x2d
 800344e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003452:	4b92      	ldr	r3, [pc, #584]	; (800369c <_printf_float+0x2d0>)
 8003454:	4892      	ldr	r0, [pc, #584]	; (80036a0 <_printf_float+0x2d4>)
 8003456:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800345a:	bf94      	ite	ls
 800345c:	4698      	movls	r8, r3
 800345e:	4680      	movhi	r8, r0
 8003460:	2303      	movs	r3, #3
 8003462:	f04f 0a00 	mov.w	sl, #0
 8003466:	6123      	str	r3, [r4, #16]
 8003468:	f02b 0304 	bic.w	r3, fp, #4
 800346c:	6023      	str	r3, [r4, #0]
 800346e:	4633      	mov	r3, r6
 8003470:	4621      	mov	r1, r4
 8003472:	4628      	mov	r0, r5
 8003474:	9700      	str	r7, [sp, #0]
 8003476:	aa0f      	add	r2, sp, #60	; 0x3c
 8003478:	f000 f9d4 	bl	8003824 <_printf_common>
 800347c:	3001      	adds	r0, #1
 800347e:	f040 8090 	bne.w	80035a2 <_printf_float+0x1d6>
 8003482:	f04f 30ff 	mov.w	r0, #4294967295
 8003486:	b011      	add	sp, #68	; 0x44
 8003488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800348c:	4642      	mov	r2, r8
 800348e:	4653      	mov	r3, sl
 8003490:	4640      	mov	r0, r8
 8003492:	4651      	mov	r1, sl
 8003494:	f7fd faba 	bl	8000a0c <__aeabi_dcmpun>
 8003498:	b148      	cbz	r0, 80034ae <_printf_float+0xe2>
 800349a:	f1ba 0f00 	cmp.w	sl, #0
 800349e:	bfb8      	it	lt
 80034a0:	232d      	movlt	r3, #45	; 0x2d
 80034a2:	4880      	ldr	r0, [pc, #512]	; (80036a4 <_printf_float+0x2d8>)
 80034a4:	bfb8      	it	lt
 80034a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80034aa:	4b7f      	ldr	r3, [pc, #508]	; (80036a8 <_printf_float+0x2dc>)
 80034ac:	e7d3      	b.n	8003456 <_printf_float+0x8a>
 80034ae:	6863      	ldr	r3, [r4, #4]
 80034b0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	d142      	bne.n	800353e <_printf_float+0x172>
 80034b8:	2306      	movs	r3, #6
 80034ba:	6063      	str	r3, [r4, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	9206      	str	r2, [sp, #24]
 80034c0:	aa0e      	add	r2, sp, #56	; 0x38
 80034c2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80034c6:	aa0d      	add	r2, sp, #52	; 0x34
 80034c8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80034cc:	9203      	str	r2, [sp, #12]
 80034ce:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80034d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80034d6:	6023      	str	r3, [r4, #0]
 80034d8:	6863      	ldr	r3, [r4, #4]
 80034da:	4642      	mov	r2, r8
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	4628      	mov	r0, r5
 80034e0:	4653      	mov	r3, sl
 80034e2:	910b      	str	r1, [sp, #44]	; 0x2c
 80034e4:	f7ff fed4 	bl	8003290 <__cvt>
 80034e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034ea:	4680      	mov	r8, r0
 80034ec:	2947      	cmp	r1, #71	; 0x47
 80034ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80034f0:	d108      	bne.n	8003504 <_printf_float+0x138>
 80034f2:	1cc8      	adds	r0, r1, #3
 80034f4:	db02      	blt.n	80034fc <_printf_float+0x130>
 80034f6:	6863      	ldr	r3, [r4, #4]
 80034f8:	4299      	cmp	r1, r3
 80034fa:	dd40      	ble.n	800357e <_printf_float+0x1b2>
 80034fc:	f1a9 0902 	sub.w	r9, r9, #2
 8003500:	fa5f f989 	uxtb.w	r9, r9
 8003504:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003508:	d81f      	bhi.n	800354a <_printf_float+0x17e>
 800350a:	464a      	mov	r2, r9
 800350c:	3901      	subs	r1, #1
 800350e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003512:	910d      	str	r1, [sp, #52]	; 0x34
 8003514:	f7ff ff1b 	bl	800334e <__exponent>
 8003518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800351a:	4682      	mov	sl, r0
 800351c:	1813      	adds	r3, r2, r0
 800351e:	2a01      	cmp	r2, #1
 8003520:	6123      	str	r3, [r4, #16]
 8003522:	dc02      	bgt.n	800352a <_printf_float+0x15e>
 8003524:	6822      	ldr	r2, [r4, #0]
 8003526:	07d2      	lsls	r2, r2, #31
 8003528:	d501      	bpl.n	800352e <_printf_float+0x162>
 800352a:	3301      	adds	r3, #1
 800352c:	6123      	str	r3, [r4, #16]
 800352e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003532:	2b00      	cmp	r3, #0
 8003534:	d09b      	beq.n	800346e <_printf_float+0xa2>
 8003536:	232d      	movs	r3, #45	; 0x2d
 8003538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800353c:	e797      	b.n	800346e <_printf_float+0xa2>
 800353e:	2947      	cmp	r1, #71	; 0x47
 8003540:	d1bc      	bne.n	80034bc <_printf_float+0xf0>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1ba      	bne.n	80034bc <_printf_float+0xf0>
 8003546:	2301      	movs	r3, #1
 8003548:	e7b7      	b.n	80034ba <_printf_float+0xee>
 800354a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800354e:	d118      	bne.n	8003582 <_printf_float+0x1b6>
 8003550:	2900      	cmp	r1, #0
 8003552:	6863      	ldr	r3, [r4, #4]
 8003554:	dd0b      	ble.n	800356e <_printf_float+0x1a2>
 8003556:	6121      	str	r1, [r4, #16]
 8003558:	b913      	cbnz	r3, 8003560 <_printf_float+0x194>
 800355a:	6822      	ldr	r2, [r4, #0]
 800355c:	07d0      	lsls	r0, r2, #31
 800355e:	d502      	bpl.n	8003566 <_printf_float+0x19a>
 8003560:	3301      	adds	r3, #1
 8003562:	440b      	add	r3, r1
 8003564:	6123      	str	r3, [r4, #16]
 8003566:	f04f 0a00 	mov.w	sl, #0
 800356a:	65a1      	str	r1, [r4, #88]	; 0x58
 800356c:	e7df      	b.n	800352e <_printf_float+0x162>
 800356e:	b913      	cbnz	r3, 8003576 <_printf_float+0x1aa>
 8003570:	6822      	ldr	r2, [r4, #0]
 8003572:	07d2      	lsls	r2, r2, #31
 8003574:	d501      	bpl.n	800357a <_printf_float+0x1ae>
 8003576:	3302      	adds	r3, #2
 8003578:	e7f4      	b.n	8003564 <_printf_float+0x198>
 800357a:	2301      	movs	r3, #1
 800357c:	e7f2      	b.n	8003564 <_printf_float+0x198>
 800357e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003584:	4299      	cmp	r1, r3
 8003586:	db05      	blt.n	8003594 <_printf_float+0x1c8>
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	6121      	str	r1, [r4, #16]
 800358c:	07d8      	lsls	r0, r3, #31
 800358e:	d5ea      	bpl.n	8003566 <_printf_float+0x19a>
 8003590:	1c4b      	adds	r3, r1, #1
 8003592:	e7e7      	b.n	8003564 <_printf_float+0x198>
 8003594:	2900      	cmp	r1, #0
 8003596:	bfcc      	ite	gt
 8003598:	2201      	movgt	r2, #1
 800359a:	f1c1 0202 	rsble	r2, r1, #2
 800359e:	4413      	add	r3, r2
 80035a0:	e7e0      	b.n	8003564 <_printf_float+0x198>
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	055a      	lsls	r2, r3, #21
 80035a6:	d407      	bmi.n	80035b8 <_printf_float+0x1ec>
 80035a8:	6923      	ldr	r3, [r4, #16]
 80035aa:	4642      	mov	r2, r8
 80035ac:	4631      	mov	r1, r6
 80035ae:	4628      	mov	r0, r5
 80035b0:	47b8      	blx	r7
 80035b2:	3001      	adds	r0, #1
 80035b4:	d12b      	bne.n	800360e <_printf_float+0x242>
 80035b6:	e764      	b.n	8003482 <_printf_float+0xb6>
 80035b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80035bc:	f240 80dd 	bls.w	800377a <_printf_float+0x3ae>
 80035c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035c4:	2200      	movs	r2, #0
 80035c6:	2300      	movs	r3, #0
 80035c8:	f7fd f9ee 	bl	80009a8 <__aeabi_dcmpeq>
 80035cc:	2800      	cmp	r0, #0
 80035ce:	d033      	beq.n	8003638 <_printf_float+0x26c>
 80035d0:	2301      	movs	r3, #1
 80035d2:	4631      	mov	r1, r6
 80035d4:	4628      	mov	r0, r5
 80035d6:	4a35      	ldr	r2, [pc, #212]	; (80036ac <_printf_float+0x2e0>)
 80035d8:	47b8      	blx	r7
 80035da:	3001      	adds	r0, #1
 80035dc:	f43f af51 	beq.w	8003482 <_printf_float+0xb6>
 80035e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035e4:	429a      	cmp	r2, r3
 80035e6:	db02      	blt.n	80035ee <_printf_float+0x222>
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	07d8      	lsls	r0, r3, #31
 80035ec:	d50f      	bpl.n	800360e <_printf_float+0x242>
 80035ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035f2:	4631      	mov	r1, r6
 80035f4:	4628      	mov	r0, r5
 80035f6:	47b8      	blx	r7
 80035f8:	3001      	adds	r0, #1
 80035fa:	f43f af42 	beq.w	8003482 <_printf_float+0xb6>
 80035fe:	f04f 0800 	mov.w	r8, #0
 8003602:	f104 091a 	add.w	r9, r4, #26
 8003606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003608:	3b01      	subs	r3, #1
 800360a:	4543      	cmp	r3, r8
 800360c:	dc09      	bgt.n	8003622 <_printf_float+0x256>
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	079b      	lsls	r3, r3, #30
 8003612:	f100 8102 	bmi.w	800381a <_printf_float+0x44e>
 8003616:	68e0      	ldr	r0, [r4, #12]
 8003618:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800361a:	4298      	cmp	r0, r3
 800361c:	bfb8      	it	lt
 800361e:	4618      	movlt	r0, r3
 8003620:	e731      	b.n	8003486 <_printf_float+0xba>
 8003622:	2301      	movs	r3, #1
 8003624:	464a      	mov	r2, r9
 8003626:	4631      	mov	r1, r6
 8003628:	4628      	mov	r0, r5
 800362a:	47b8      	blx	r7
 800362c:	3001      	adds	r0, #1
 800362e:	f43f af28 	beq.w	8003482 <_printf_float+0xb6>
 8003632:	f108 0801 	add.w	r8, r8, #1
 8003636:	e7e6      	b.n	8003606 <_printf_float+0x23a>
 8003638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800363a:	2b00      	cmp	r3, #0
 800363c:	dc38      	bgt.n	80036b0 <_printf_float+0x2e4>
 800363e:	2301      	movs	r3, #1
 8003640:	4631      	mov	r1, r6
 8003642:	4628      	mov	r0, r5
 8003644:	4a19      	ldr	r2, [pc, #100]	; (80036ac <_printf_float+0x2e0>)
 8003646:	47b8      	blx	r7
 8003648:	3001      	adds	r0, #1
 800364a:	f43f af1a 	beq.w	8003482 <_printf_float+0xb6>
 800364e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003652:	4313      	orrs	r3, r2
 8003654:	d102      	bne.n	800365c <_printf_float+0x290>
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	07d9      	lsls	r1, r3, #31
 800365a:	d5d8      	bpl.n	800360e <_printf_float+0x242>
 800365c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003660:	4631      	mov	r1, r6
 8003662:	4628      	mov	r0, r5
 8003664:	47b8      	blx	r7
 8003666:	3001      	adds	r0, #1
 8003668:	f43f af0b 	beq.w	8003482 <_printf_float+0xb6>
 800366c:	f04f 0900 	mov.w	r9, #0
 8003670:	f104 0a1a 	add.w	sl, r4, #26
 8003674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003676:	425b      	negs	r3, r3
 8003678:	454b      	cmp	r3, r9
 800367a:	dc01      	bgt.n	8003680 <_printf_float+0x2b4>
 800367c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800367e:	e794      	b.n	80035aa <_printf_float+0x1de>
 8003680:	2301      	movs	r3, #1
 8003682:	4652      	mov	r2, sl
 8003684:	4631      	mov	r1, r6
 8003686:	4628      	mov	r0, r5
 8003688:	47b8      	blx	r7
 800368a:	3001      	adds	r0, #1
 800368c:	f43f aef9 	beq.w	8003482 <_printf_float+0xb6>
 8003690:	f109 0901 	add.w	r9, r9, #1
 8003694:	e7ee      	b.n	8003674 <_printf_float+0x2a8>
 8003696:	bf00      	nop
 8003698:	7fefffff 	.word	0x7fefffff
 800369c:	08006120 	.word	0x08006120
 80036a0:	08006124 	.word	0x08006124
 80036a4:	0800612c 	.word	0x0800612c
 80036a8:	08006128 	.word	0x08006128
 80036ac:	08006130 	.word	0x08006130
 80036b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036b4:	429a      	cmp	r2, r3
 80036b6:	bfa8      	it	ge
 80036b8:	461a      	movge	r2, r3
 80036ba:	2a00      	cmp	r2, #0
 80036bc:	4691      	mov	r9, r2
 80036be:	dc37      	bgt.n	8003730 <_printf_float+0x364>
 80036c0:	f04f 0b00 	mov.w	fp, #0
 80036c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036c8:	f104 021a 	add.w	r2, r4, #26
 80036cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80036d0:	ebaa 0309 	sub.w	r3, sl, r9
 80036d4:	455b      	cmp	r3, fp
 80036d6:	dc33      	bgt.n	8003740 <_printf_float+0x374>
 80036d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036dc:	429a      	cmp	r2, r3
 80036de:	db3b      	blt.n	8003758 <_printf_float+0x38c>
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	07da      	lsls	r2, r3, #31
 80036e4:	d438      	bmi.n	8003758 <_printf_float+0x38c>
 80036e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80036ea:	eba2 030a 	sub.w	r3, r2, sl
 80036ee:	eba2 0901 	sub.w	r9, r2, r1
 80036f2:	4599      	cmp	r9, r3
 80036f4:	bfa8      	it	ge
 80036f6:	4699      	movge	r9, r3
 80036f8:	f1b9 0f00 	cmp.w	r9, #0
 80036fc:	dc34      	bgt.n	8003768 <_printf_float+0x39c>
 80036fe:	f04f 0800 	mov.w	r8, #0
 8003702:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003706:	f104 0a1a 	add.w	sl, r4, #26
 800370a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	eba3 0309 	sub.w	r3, r3, r9
 8003714:	4543      	cmp	r3, r8
 8003716:	f77f af7a 	ble.w	800360e <_printf_float+0x242>
 800371a:	2301      	movs	r3, #1
 800371c:	4652      	mov	r2, sl
 800371e:	4631      	mov	r1, r6
 8003720:	4628      	mov	r0, r5
 8003722:	47b8      	blx	r7
 8003724:	3001      	adds	r0, #1
 8003726:	f43f aeac 	beq.w	8003482 <_printf_float+0xb6>
 800372a:	f108 0801 	add.w	r8, r8, #1
 800372e:	e7ec      	b.n	800370a <_printf_float+0x33e>
 8003730:	4613      	mov	r3, r2
 8003732:	4631      	mov	r1, r6
 8003734:	4642      	mov	r2, r8
 8003736:	4628      	mov	r0, r5
 8003738:	47b8      	blx	r7
 800373a:	3001      	adds	r0, #1
 800373c:	d1c0      	bne.n	80036c0 <_printf_float+0x2f4>
 800373e:	e6a0      	b.n	8003482 <_printf_float+0xb6>
 8003740:	2301      	movs	r3, #1
 8003742:	4631      	mov	r1, r6
 8003744:	4628      	mov	r0, r5
 8003746:	920b      	str	r2, [sp, #44]	; 0x2c
 8003748:	47b8      	blx	r7
 800374a:	3001      	adds	r0, #1
 800374c:	f43f ae99 	beq.w	8003482 <_printf_float+0xb6>
 8003750:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003752:	f10b 0b01 	add.w	fp, fp, #1
 8003756:	e7b9      	b.n	80036cc <_printf_float+0x300>
 8003758:	4631      	mov	r1, r6
 800375a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800375e:	4628      	mov	r0, r5
 8003760:	47b8      	blx	r7
 8003762:	3001      	adds	r0, #1
 8003764:	d1bf      	bne.n	80036e6 <_printf_float+0x31a>
 8003766:	e68c      	b.n	8003482 <_printf_float+0xb6>
 8003768:	464b      	mov	r3, r9
 800376a:	4631      	mov	r1, r6
 800376c:	4628      	mov	r0, r5
 800376e:	eb08 020a 	add.w	r2, r8, sl
 8003772:	47b8      	blx	r7
 8003774:	3001      	adds	r0, #1
 8003776:	d1c2      	bne.n	80036fe <_printf_float+0x332>
 8003778:	e683      	b.n	8003482 <_printf_float+0xb6>
 800377a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800377c:	2a01      	cmp	r2, #1
 800377e:	dc01      	bgt.n	8003784 <_printf_float+0x3b8>
 8003780:	07db      	lsls	r3, r3, #31
 8003782:	d537      	bpl.n	80037f4 <_printf_float+0x428>
 8003784:	2301      	movs	r3, #1
 8003786:	4642      	mov	r2, r8
 8003788:	4631      	mov	r1, r6
 800378a:	4628      	mov	r0, r5
 800378c:	47b8      	blx	r7
 800378e:	3001      	adds	r0, #1
 8003790:	f43f ae77 	beq.w	8003482 <_printf_float+0xb6>
 8003794:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003798:	4631      	mov	r1, r6
 800379a:	4628      	mov	r0, r5
 800379c:	47b8      	blx	r7
 800379e:	3001      	adds	r0, #1
 80037a0:	f43f ae6f 	beq.w	8003482 <_printf_float+0xb6>
 80037a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037a8:	2200      	movs	r2, #0
 80037aa:	2300      	movs	r3, #0
 80037ac:	f7fd f8fc 	bl	80009a8 <__aeabi_dcmpeq>
 80037b0:	b9d8      	cbnz	r0, 80037ea <_printf_float+0x41e>
 80037b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037b4:	f108 0201 	add.w	r2, r8, #1
 80037b8:	3b01      	subs	r3, #1
 80037ba:	4631      	mov	r1, r6
 80037bc:	4628      	mov	r0, r5
 80037be:	47b8      	blx	r7
 80037c0:	3001      	adds	r0, #1
 80037c2:	d10e      	bne.n	80037e2 <_printf_float+0x416>
 80037c4:	e65d      	b.n	8003482 <_printf_float+0xb6>
 80037c6:	2301      	movs	r3, #1
 80037c8:	464a      	mov	r2, r9
 80037ca:	4631      	mov	r1, r6
 80037cc:	4628      	mov	r0, r5
 80037ce:	47b8      	blx	r7
 80037d0:	3001      	adds	r0, #1
 80037d2:	f43f ae56 	beq.w	8003482 <_printf_float+0xb6>
 80037d6:	f108 0801 	add.w	r8, r8, #1
 80037da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037dc:	3b01      	subs	r3, #1
 80037de:	4543      	cmp	r3, r8
 80037e0:	dcf1      	bgt.n	80037c6 <_printf_float+0x3fa>
 80037e2:	4653      	mov	r3, sl
 80037e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80037e8:	e6e0      	b.n	80035ac <_printf_float+0x1e0>
 80037ea:	f04f 0800 	mov.w	r8, #0
 80037ee:	f104 091a 	add.w	r9, r4, #26
 80037f2:	e7f2      	b.n	80037da <_printf_float+0x40e>
 80037f4:	2301      	movs	r3, #1
 80037f6:	4642      	mov	r2, r8
 80037f8:	e7df      	b.n	80037ba <_printf_float+0x3ee>
 80037fa:	2301      	movs	r3, #1
 80037fc:	464a      	mov	r2, r9
 80037fe:	4631      	mov	r1, r6
 8003800:	4628      	mov	r0, r5
 8003802:	47b8      	blx	r7
 8003804:	3001      	adds	r0, #1
 8003806:	f43f ae3c 	beq.w	8003482 <_printf_float+0xb6>
 800380a:	f108 0801 	add.w	r8, r8, #1
 800380e:	68e3      	ldr	r3, [r4, #12]
 8003810:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003812:	1a5b      	subs	r3, r3, r1
 8003814:	4543      	cmp	r3, r8
 8003816:	dcf0      	bgt.n	80037fa <_printf_float+0x42e>
 8003818:	e6fd      	b.n	8003616 <_printf_float+0x24a>
 800381a:	f04f 0800 	mov.w	r8, #0
 800381e:	f104 0919 	add.w	r9, r4, #25
 8003822:	e7f4      	b.n	800380e <_printf_float+0x442>

08003824 <_printf_common>:
 8003824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003828:	4616      	mov	r6, r2
 800382a:	4699      	mov	r9, r3
 800382c:	688a      	ldr	r2, [r1, #8]
 800382e:	690b      	ldr	r3, [r1, #16]
 8003830:	4607      	mov	r7, r0
 8003832:	4293      	cmp	r3, r2
 8003834:	bfb8      	it	lt
 8003836:	4613      	movlt	r3, r2
 8003838:	6033      	str	r3, [r6, #0]
 800383a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800383e:	460c      	mov	r4, r1
 8003840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003844:	b10a      	cbz	r2, 800384a <_printf_common+0x26>
 8003846:	3301      	adds	r3, #1
 8003848:	6033      	str	r3, [r6, #0]
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	0699      	lsls	r1, r3, #26
 800384e:	bf42      	ittt	mi
 8003850:	6833      	ldrmi	r3, [r6, #0]
 8003852:	3302      	addmi	r3, #2
 8003854:	6033      	strmi	r3, [r6, #0]
 8003856:	6825      	ldr	r5, [r4, #0]
 8003858:	f015 0506 	ands.w	r5, r5, #6
 800385c:	d106      	bne.n	800386c <_printf_common+0x48>
 800385e:	f104 0a19 	add.w	sl, r4, #25
 8003862:	68e3      	ldr	r3, [r4, #12]
 8003864:	6832      	ldr	r2, [r6, #0]
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	42ab      	cmp	r3, r5
 800386a:	dc28      	bgt.n	80038be <_printf_common+0x9a>
 800386c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003870:	1e13      	subs	r3, r2, #0
 8003872:	6822      	ldr	r2, [r4, #0]
 8003874:	bf18      	it	ne
 8003876:	2301      	movne	r3, #1
 8003878:	0692      	lsls	r2, r2, #26
 800387a:	d42d      	bmi.n	80038d8 <_printf_common+0xb4>
 800387c:	4649      	mov	r1, r9
 800387e:	4638      	mov	r0, r7
 8003880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003884:	47c0      	blx	r8
 8003886:	3001      	adds	r0, #1
 8003888:	d020      	beq.n	80038cc <_printf_common+0xa8>
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	68e5      	ldr	r5, [r4, #12]
 800388e:	f003 0306 	and.w	r3, r3, #6
 8003892:	2b04      	cmp	r3, #4
 8003894:	bf18      	it	ne
 8003896:	2500      	movne	r5, #0
 8003898:	6832      	ldr	r2, [r6, #0]
 800389a:	f04f 0600 	mov.w	r6, #0
 800389e:	68a3      	ldr	r3, [r4, #8]
 80038a0:	bf08      	it	eq
 80038a2:	1aad      	subeq	r5, r5, r2
 80038a4:	6922      	ldr	r2, [r4, #16]
 80038a6:	bf08      	it	eq
 80038a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038ac:	4293      	cmp	r3, r2
 80038ae:	bfc4      	itt	gt
 80038b0:	1a9b      	subgt	r3, r3, r2
 80038b2:	18ed      	addgt	r5, r5, r3
 80038b4:	341a      	adds	r4, #26
 80038b6:	42b5      	cmp	r5, r6
 80038b8:	d11a      	bne.n	80038f0 <_printf_common+0xcc>
 80038ba:	2000      	movs	r0, #0
 80038bc:	e008      	b.n	80038d0 <_printf_common+0xac>
 80038be:	2301      	movs	r3, #1
 80038c0:	4652      	mov	r2, sl
 80038c2:	4649      	mov	r1, r9
 80038c4:	4638      	mov	r0, r7
 80038c6:	47c0      	blx	r8
 80038c8:	3001      	adds	r0, #1
 80038ca:	d103      	bne.n	80038d4 <_printf_common+0xb0>
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d4:	3501      	adds	r5, #1
 80038d6:	e7c4      	b.n	8003862 <_printf_common+0x3e>
 80038d8:	2030      	movs	r0, #48	; 0x30
 80038da:	18e1      	adds	r1, r4, r3
 80038dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038e6:	4422      	add	r2, r4
 80038e8:	3302      	adds	r3, #2
 80038ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038ee:	e7c5      	b.n	800387c <_printf_common+0x58>
 80038f0:	2301      	movs	r3, #1
 80038f2:	4622      	mov	r2, r4
 80038f4:	4649      	mov	r1, r9
 80038f6:	4638      	mov	r0, r7
 80038f8:	47c0      	blx	r8
 80038fa:	3001      	adds	r0, #1
 80038fc:	d0e6      	beq.n	80038cc <_printf_common+0xa8>
 80038fe:	3601      	adds	r6, #1
 8003900:	e7d9      	b.n	80038b6 <_printf_common+0x92>
	...

08003904 <_printf_i>:
 8003904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003908:	460c      	mov	r4, r1
 800390a:	7e27      	ldrb	r7, [r4, #24]
 800390c:	4691      	mov	r9, r2
 800390e:	2f78      	cmp	r7, #120	; 0x78
 8003910:	4680      	mov	r8, r0
 8003912:	469a      	mov	sl, r3
 8003914:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003916:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800391a:	d807      	bhi.n	800392c <_printf_i+0x28>
 800391c:	2f62      	cmp	r7, #98	; 0x62
 800391e:	d80a      	bhi.n	8003936 <_printf_i+0x32>
 8003920:	2f00      	cmp	r7, #0
 8003922:	f000 80d9 	beq.w	8003ad8 <_printf_i+0x1d4>
 8003926:	2f58      	cmp	r7, #88	; 0x58
 8003928:	f000 80a4 	beq.w	8003a74 <_printf_i+0x170>
 800392c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003934:	e03a      	b.n	80039ac <_printf_i+0xa8>
 8003936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800393a:	2b15      	cmp	r3, #21
 800393c:	d8f6      	bhi.n	800392c <_printf_i+0x28>
 800393e:	a001      	add	r0, pc, #4	; (adr r0, 8003944 <_printf_i+0x40>)
 8003940:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003944:	0800399d 	.word	0x0800399d
 8003948:	080039b1 	.word	0x080039b1
 800394c:	0800392d 	.word	0x0800392d
 8003950:	0800392d 	.word	0x0800392d
 8003954:	0800392d 	.word	0x0800392d
 8003958:	0800392d 	.word	0x0800392d
 800395c:	080039b1 	.word	0x080039b1
 8003960:	0800392d 	.word	0x0800392d
 8003964:	0800392d 	.word	0x0800392d
 8003968:	0800392d 	.word	0x0800392d
 800396c:	0800392d 	.word	0x0800392d
 8003970:	08003abf 	.word	0x08003abf
 8003974:	080039e1 	.word	0x080039e1
 8003978:	08003aa1 	.word	0x08003aa1
 800397c:	0800392d 	.word	0x0800392d
 8003980:	0800392d 	.word	0x0800392d
 8003984:	08003ae1 	.word	0x08003ae1
 8003988:	0800392d 	.word	0x0800392d
 800398c:	080039e1 	.word	0x080039e1
 8003990:	0800392d 	.word	0x0800392d
 8003994:	0800392d 	.word	0x0800392d
 8003998:	08003aa9 	.word	0x08003aa9
 800399c:	680b      	ldr	r3, [r1, #0]
 800399e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039a2:	1d1a      	adds	r2, r3, #4
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	600a      	str	r2, [r1, #0]
 80039a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0a4      	b.n	8003afa <_printf_i+0x1f6>
 80039b0:	6825      	ldr	r5, [r4, #0]
 80039b2:	6808      	ldr	r0, [r1, #0]
 80039b4:	062e      	lsls	r6, r5, #24
 80039b6:	f100 0304 	add.w	r3, r0, #4
 80039ba:	d50a      	bpl.n	80039d2 <_printf_i+0xce>
 80039bc:	6805      	ldr	r5, [r0, #0]
 80039be:	600b      	str	r3, [r1, #0]
 80039c0:	2d00      	cmp	r5, #0
 80039c2:	da03      	bge.n	80039cc <_printf_i+0xc8>
 80039c4:	232d      	movs	r3, #45	; 0x2d
 80039c6:	426d      	negs	r5, r5
 80039c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039cc:	230a      	movs	r3, #10
 80039ce:	485e      	ldr	r0, [pc, #376]	; (8003b48 <_printf_i+0x244>)
 80039d0:	e019      	b.n	8003a06 <_printf_i+0x102>
 80039d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80039d6:	6805      	ldr	r5, [r0, #0]
 80039d8:	600b      	str	r3, [r1, #0]
 80039da:	bf18      	it	ne
 80039dc:	b22d      	sxthne	r5, r5
 80039de:	e7ef      	b.n	80039c0 <_printf_i+0xbc>
 80039e0:	680b      	ldr	r3, [r1, #0]
 80039e2:	6825      	ldr	r5, [r4, #0]
 80039e4:	1d18      	adds	r0, r3, #4
 80039e6:	6008      	str	r0, [r1, #0]
 80039e8:	0628      	lsls	r0, r5, #24
 80039ea:	d501      	bpl.n	80039f0 <_printf_i+0xec>
 80039ec:	681d      	ldr	r5, [r3, #0]
 80039ee:	e002      	b.n	80039f6 <_printf_i+0xf2>
 80039f0:	0669      	lsls	r1, r5, #25
 80039f2:	d5fb      	bpl.n	80039ec <_printf_i+0xe8>
 80039f4:	881d      	ldrh	r5, [r3, #0]
 80039f6:	2f6f      	cmp	r7, #111	; 0x6f
 80039f8:	bf0c      	ite	eq
 80039fa:	2308      	moveq	r3, #8
 80039fc:	230a      	movne	r3, #10
 80039fe:	4852      	ldr	r0, [pc, #328]	; (8003b48 <_printf_i+0x244>)
 8003a00:	2100      	movs	r1, #0
 8003a02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a06:	6866      	ldr	r6, [r4, #4]
 8003a08:	2e00      	cmp	r6, #0
 8003a0a:	bfa8      	it	ge
 8003a0c:	6821      	ldrge	r1, [r4, #0]
 8003a0e:	60a6      	str	r6, [r4, #8]
 8003a10:	bfa4      	itt	ge
 8003a12:	f021 0104 	bicge.w	r1, r1, #4
 8003a16:	6021      	strge	r1, [r4, #0]
 8003a18:	b90d      	cbnz	r5, 8003a1e <_printf_i+0x11a>
 8003a1a:	2e00      	cmp	r6, #0
 8003a1c:	d04d      	beq.n	8003aba <_printf_i+0x1b6>
 8003a1e:	4616      	mov	r6, r2
 8003a20:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a24:	fb03 5711 	mls	r7, r3, r1, r5
 8003a28:	5dc7      	ldrb	r7, [r0, r7]
 8003a2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a2e:	462f      	mov	r7, r5
 8003a30:	42bb      	cmp	r3, r7
 8003a32:	460d      	mov	r5, r1
 8003a34:	d9f4      	bls.n	8003a20 <_printf_i+0x11c>
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d10b      	bne.n	8003a52 <_printf_i+0x14e>
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	07df      	lsls	r7, r3, #31
 8003a3e:	d508      	bpl.n	8003a52 <_printf_i+0x14e>
 8003a40:	6923      	ldr	r3, [r4, #16]
 8003a42:	6861      	ldr	r1, [r4, #4]
 8003a44:	4299      	cmp	r1, r3
 8003a46:	bfde      	ittt	le
 8003a48:	2330      	movle	r3, #48	; 0x30
 8003a4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a52:	1b92      	subs	r2, r2, r6
 8003a54:	6122      	str	r2, [r4, #16]
 8003a56:	464b      	mov	r3, r9
 8003a58:	4621      	mov	r1, r4
 8003a5a:	4640      	mov	r0, r8
 8003a5c:	f8cd a000 	str.w	sl, [sp]
 8003a60:	aa03      	add	r2, sp, #12
 8003a62:	f7ff fedf 	bl	8003824 <_printf_common>
 8003a66:	3001      	adds	r0, #1
 8003a68:	d14c      	bne.n	8003b04 <_printf_i+0x200>
 8003a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6e:	b004      	add	sp, #16
 8003a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a74:	4834      	ldr	r0, [pc, #208]	; (8003b48 <_printf_i+0x244>)
 8003a76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a7a:	680e      	ldr	r6, [r1, #0]
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a82:	061f      	lsls	r7, r3, #24
 8003a84:	600e      	str	r6, [r1, #0]
 8003a86:	d514      	bpl.n	8003ab2 <_printf_i+0x1ae>
 8003a88:	07d9      	lsls	r1, r3, #31
 8003a8a:	bf44      	itt	mi
 8003a8c:	f043 0320 	orrmi.w	r3, r3, #32
 8003a90:	6023      	strmi	r3, [r4, #0]
 8003a92:	b91d      	cbnz	r5, 8003a9c <_printf_i+0x198>
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	f023 0320 	bic.w	r3, r3, #32
 8003a9a:	6023      	str	r3, [r4, #0]
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	e7af      	b.n	8003a00 <_printf_i+0xfc>
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	f043 0320 	orr.w	r3, r3, #32
 8003aa6:	6023      	str	r3, [r4, #0]
 8003aa8:	2378      	movs	r3, #120	; 0x78
 8003aaa:	4828      	ldr	r0, [pc, #160]	; (8003b4c <_printf_i+0x248>)
 8003aac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ab0:	e7e3      	b.n	8003a7a <_printf_i+0x176>
 8003ab2:	065e      	lsls	r6, r3, #25
 8003ab4:	bf48      	it	mi
 8003ab6:	b2ad      	uxthmi	r5, r5
 8003ab8:	e7e6      	b.n	8003a88 <_printf_i+0x184>
 8003aba:	4616      	mov	r6, r2
 8003abc:	e7bb      	b.n	8003a36 <_printf_i+0x132>
 8003abe:	680b      	ldr	r3, [r1, #0]
 8003ac0:	6826      	ldr	r6, [r4, #0]
 8003ac2:	1d1d      	adds	r5, r3, #4
 8003ac4:	6960      	ldr	r0, [r4, #20]
 8003ac6:	600d      	str	r5, [r1, #0]
 8003ac8:	0635      	lsls	r5, r6, #24
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	d501      	bpl.n	8003ad2 <_printf_i+0x1ce>
 8003ace:	6018      	str	r0, [r3, #0]
 8003ad0:	e002      	b.n	8003ad8 <_printf_i+0x1d4>
 8003ad2:	0671      	lsls	r1, r6, #25
 8003ad4:	d5fb      	bpl.n	8003ace <_printf_i+0x1ca>
 8003ad6:	8018      	strh	r0, [r3, #0]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	4616      	mov	r6, r2
 8003adc:	6123      	str	r3, [r4, #16]
 8003ade:	e7ba      	b.n	8003a56 <_printf_i+0x152>
 8003ae0:	680b      	ldr	r3, [r1, #0]
 8003ae2:	1d1a      	adds	r2, r3, #4
 8003ae4:	600a      	str	r2, [r1, #0]
 8003ae6:	681e      	ldr	r6, [r3, #0]
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4630      	mov	r0, r6
 8003aec:	6862      	ldr	r2, [r4, #4]
 8003aee:	f000 feed 	bl	80048cc <memchr>
 8003af2:	b108      	cbz	r0, 8003af8 <_printf_i+0x1f4>
 8003af4:	1b80      	subs	r0, r0, r6
 8003af6:	6060      	str	r0, [r4, #4]
 8003af8:	6863      	ldr	r3, [r4, #4]
 8003afa:	6123      	str	r3, [r4, #16]
 8003afc:	2300      	movs	r3, #0
 8003afe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b02:	e7a8      	b.n	8003a56 <_printf_i+0x152>
 8003b04:	4632      	mov	r2, r6
 8003b06:	4649      	mov	r1, r9
 8003b08:	4640      	mov	r0, r8
 8003b0a:	6923      	ldr	r3, [r4, #16]
 8003b0c:	47d0      	blx	sl
 8003b0e:	3001      	adds	r0, #1
 8003b10:	d0ab      	beq.n	8003a6a <_printf_i+0x166>
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	079b      	lsls	r3, r3, #30
 8003b16:	d413      	bmi.n	8003b40 <_printf_i+0x23c>
 8003b18:	68e0      	ldr	r0, [r4, #12]
 8003b1a:	9b03      	ldr	r3, [sp, #12]
 8003b1c:	4298      	cmp	r0, r3
 8003b1e:	bfb8      	it	lt
 8003b20:	4618      	movlt	r0, r3
 8003b22:	e7a4      	b.n	8003a6e <_printf_i+0x16a>
 8003b24:	2301      	movs	r3, #1
 8003b26:	4632      	mov	r2, r6
 8003b28:	4649      	mov	r1, r9
 8003b2a:	4640      	mov	r0, r8
 8003b2c:	47d0      	blx	sl
 8003b2e:	3001      	adds	r0, #1
 8003b30:	d09b      	beq.n	8003a6a <_printf_i+0x166>
 8003b32:	3501      	adds	r5, #1
 8003b34:	68e3      	ldr	r3, [r4, #12]
 8003b36:	9903      	ldr	r1, [sp, #12]
 8003b38:	1a5b      	subs	r3, r3, r1
 8003b3a:	42ab      	cmp	r3, r5
 8003b3c:	dcf2      	bgt.n	8003b24 <_printf_i+0x220>
 8003b3e:	e7eb      	b.n	8003b18 <_printf_i+0x214>
 8003b40:	2500      	movs	r5, #0
 8003b42:	f104 0619 	add.w	r6, r4, #25
 8003b46:	e7f5      	b.n	8003b34 <_printf_i+0x230>
 8003b48:	08006132 	.word	0x08006132
 8003b4c:	08006143 	.word	0x08006143

08003b50 <sniprintf>:
 8003b50:	b40c      	push	{r2, r3}
 8003b52:	b530      	push	{r4, r5, lr}
 8003b54:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <sniprintf+0x64>)
 8003b56:	1e0c      	subs	r4, r1, #0
 8003b58:	681d      	ldr	r5, [r3, #0]
 8003b5a:	b09d      	sub	sp, #116	; 0x74
 8003b5c:	da08      	bge.n	8003b70 <sniprintf+0x20>
 8003b5e:	238b      	movs	r3, #139	; 0x8b
 8003b60:	f04f 30ff 	mov.w	r0, #4294967295
 8003b64:	602b      	str	r3, [r5, #0]
 8003b66:	b01d      	add	sp, #116	; 0x74
 8003b68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b6c:	b002      	add	sp, #8
 8003b6e:	4770      	bx	lr
 8003b70:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003b74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003b78:	bf0c      	ite	eq
 8003b7a:	4623      	moveq	r3, r4
 8003b7c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003b80:	9304      	str	r3, [sp, #16]
 8003b82:	9307      	str	r3, [sp, #28]
 8003b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b88:	9002      	str	r0, [sp, #8]
 8003b8a:	9006      	str	r0, [sp, #24]
 8003b8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b90:	4628      	mov	r0, r5
 8003b92:	ab21      	add	r3, sp, #132	; 0x84
 8003b94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b96:	a902      	add	r1, sp, #8
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	f001 fb45 	bl	8005228 <_svfiprintf_r>
 8003b9e:	1c43      	adds	r3, r0, #1
 8003ba0:	bfbc      	itt	lt
 8003ba2:	238b      	movlt	r3, #139	; 0x8b
 8003ba4:	602b      	strlt	r3, [r5, #0]
 8003ba6:	2c00      	cmp	r4, #0
 8003ba8:	d0dd      	beq.n	8003b66 <sniprintf+0x16>
 8003baa:	2200      	movs	r2, #0
 8003bac:	9b02      	ldr	r3, [sp, #8]
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	e7d9      	b.n	8003b66 <sniprintf+0x16>
 8003bb2:	bf00      	nop
 8003bb4:	20000050 	.word	0x20000050

08003bb8 <quorem>:
 8003bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bbc:	6903      	ldr	r3, [r0, #16]
 8003bbe:	690c      	ldr	r4, [r1, #16]
 8003bc0:	4607      	mov	r7, r0
 8003bc2:	42a3      	cmp	r3, r4
 8003bc4:	f2c0 8083 	blt.w	8003cce <quorem+0x116>
 8003bc8:	3c01      	subs	r4, #1
 8003bca:	f100 0514 	add.w	r5, r0, #20
 8003bce:	f101 0814 	add.w	r8, r1, #20
 8003bd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003bdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003be0:	3301      	adds	r3, #1
 8003be2:	429a      	cmp	r2, r3
 8003be4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003be8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003bec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003bf0:	d332      	bcc.n	8003c58 <quorem+0xa0>
 8003bf2:	f04f 0e00 	mov.w	lr, #0
 8003bf6:	4640      	mov	r0, r8
 8003bf8:	46ac      	mov	ip, r5
 8003bfa:	46f2      	mov	sl, lr
 8003bfc:	f850 2b04 	ldr.w	r2, [r0], #4
 8003c00:	b293      	uxth	r3, r2
 8003c02:	fb06 e303 	mla	r3, r6, r3, lr
 8003c06:	0c12      	lsrs	r2, r2, #16
 8003c08:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003c0c:	fb06 e202 	mla	r2, r6, r2, lr
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	ebaa 0303 	sub.w	r3, sl, r3
 8003c16:	f8dc a000 	ldr.w	sl, [ip]
 8003c1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003c1e:	fa1f fa8a 	uxth.w	sl, sl
 8003c22:	4453      	add	r3, sl
 8003c24:	fa1f fa82 	uxth.w	sl, r2
 8003c28:	f8dc 2000 	ldr.w	r2, [ip]
 8003c2c:	4581      	cmp	r9, r0
 8003c2e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003c32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003c40:	f84c 3b04 	str.w	r3, [ip], #4
 8003c44:	d2da      	bcs.n	8003bfc <quorem+0x44>
 8003c46:	f855 300b 	ldr.w	r3, [r5, fp]
 8003c4a:	b92b      	cbnz	r3, 8003c58 <quorem+0xa0>
 8003c4c:	9b01      	ldr	r3, [sp, #4]
 8003c4e:	3b04      	subs	r3, #4
 8003c50:	429d      	cmp	r5, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	d32f      	bcc.n	8003cb6 <quorem+0xfe>
 8003c56:	613c      	str	r4, [r7, #16]
 8003c58:	4638      	mov	r0, r7
 8003c5a:	f001 f8cd 	bl	8004df8 <__mcmp>
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	db25      	blt.n	8003cae <quorem+0xf6>
 8003c62:	4628      	mov	r0, r5
 8003c64:	f04f 0c00 	mov.w	ip, #0
 8003c68:	3601      	adds	r6, #1
 8003c6a:	f858 1b04 	ldr.w	r1, [r8], #4
 8003c6e:	f8d0 e000 	ldr.w	lr, [r0]
 8003c72:	b28b      	uxth	r3, r1
 8003c74:	ebac 0303 	sub.w	r3, ip, r3
 8003c78:	fa1f f28e 	uxth.w	r2, lr
 8003c7c:	4413      	add	r3, r2
 8003c7e:	0c0a      	lsrs	r2, r1, #16
 8003c80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003c84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c8e:	45c1      	cmp	r9, r8
 8003c90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003c94:	f840 3b04 	str.w	r3, [r0], #4
 8003c98:	d2e7      	bcs.n	8003c6a <quorem+0xb2>
 8003c9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ca2:	b922      	cbnz	r2, 8003cae <quorem+0xf6>
 8003ca4:	3b04      	subs	r3, #4
 8003ca6:	429d      	cmp	r5, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	d30a      	bcc.n	8003cc2 <quorem+0x10a>
 8003cac:	613c      	str	r4, [r7, #16]
 8003cae:	4630      	mov	r0, r6
 8003cb0:	b003      	add	sp, #12
 8003cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	3b04      	subs	r3, #4
 8003cba:	2a00      	cmp	r2, #0
 8003cbc:	d1cb      	bne.n	8003c56 <quorem+0x9e>
 8003cbe:	3c01      	subs	r4, #1
 8003cc0:	e7c6      	b.n	8003c50 <quorem+0x98>
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	3b04      	subs	r3, #4
 8003cc6:	2a00      	cmp	r2, #0
 8003cc8:	d1f0      	bne.n	8003cac <quorem+0xf4>
 8003cca:	3c01      	subs	r4, #1
 8003ccc:	e7eb      	b.n	8003ca6 <quorem+0xee>
 8003cce:	2000      	movs	r0, #0
 8003cd0:	e7ee      	b.n	8003cb0 <quorem+0xf8>
 8003cd2:	0000      	movs	r0, r0
 8003cd4:	0000      	movs	r0, r0
	...

08003cd8 <_dtoa_r>:
 8003cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cdc:	4616      	mov	r6, r2
 8003cde:	461f      	mov	r7, r3
 8003ce0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003ce2:	b099      	sub	sp, #100	; 0x64
 8003ce4:	4605      	mov	r5, r0
 8003ce6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003cea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003cee:	b974      	cbnz	r4, 8003d0e <_dtoa_r+0x36>
 8003cf0:	2010      	movs	r0, #16
 8003cf2:	f000 fde3 	bl	80048bc <malloc>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	6268      	str	r0, [r5, #36]	; 0x24
 8003cfa:	b920      	cbnz	r0, 8003d06 <_dtoa_r+0x2e>
 8003cfc:	21ea      	movs	r1, #234	; 0xea
 8003cfe:	4bae      	ldr	r3, [pc, #696]	; (8003fb8 <_dtoa_r+0x2e0>)
 8003d00:	48ae      	ldr	r0, [pc, #696]	; (8003fbc <_dtoa_r+0x2e4>)
 8003d02:	f001 fba1 	bl	8005448 <__assert_func>
 8003d06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003d0a:	6004      	str	r4, [r0, #0]
 8003d0c:	60c4      	str	r4, [r0, #12]
 8003d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003d10:	6819      	ldr	r1, [r3, #0]
 8003d12:	b151      	cbz	r1, 8003d2a <_dtoa_r+0x52>
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	2301      	movs	r3, #1
 8003d18:	4093      	lsls	r3, r2
 8003d1a:	604a      	str	r2, [r1, #4]
 8003d1c:	608b      	str	r3, [r1, #8]
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f000 fe30 	bl	8004984 <_Bfree>
 8003d24:	2200      	movs	r2, #0
 8003d26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	1e3b      	subs	r3, r7, #0
 8003d2c:	bfaf      	iteee	ge
 8003d2e:	2300      	movge	r3, #0
 8003d30:	2201      	movlt	r2, #1
 8003d32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003d36:	9305      	strlt	r3, [sp, #20]
 8003d38:	bfa8      	it	ge
 8003d3a:	f8c8 3000 	strge.w	r3, [r8]
 8003d3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003d42:	4b9f      	ldr	r3, [pc, #636]	; (8003fc0 <_dtoa_r+0x2e8>)
 8003d44:	bfb8      	it	lt
 8003d46:	f8c8 2000 	strlt.w	r2, [r8]
 8003d4a:	ea33 0309 	bics.w	r3, r3, r9
 8003d4e:	d119      	bne.n	8003d84 <_dtoa_r+0xac>
 8003d50:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003d5c:	4333      	orrs	r3, r6
 8003d5e:	f000 8580 	beq.w	8004862 <_dtoa_r+0xb8a>
 8003d62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d64:	b953      	cbnz	r3, 8003d7c <_dtoa_r+0xa4>
 8003d66:	4b97      	ldr	r3, [pc, #604]	; (8003fc4 <_dtoa_r+0x2ec>)
 8003d68:	e022      	b.n	8003db0 <_dtoa_r+0xd8>
 8003d6a:	4b97      	ldr	r3, [pc, #604]	; (8003fc8 <_dtoa_r+0x2f0>)
 8003d6c:	9308      	str	r3, [sp, #32]
 8003d6e:	3308      	adds	r3, #8
 8003d70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	9808      	ldr	r0, [sp, #32]
 8003d76:	b019      	add	sp, #100	; 0x64
 8003d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d7c:	4b91      	ldr	r3, [pc, #580]	; (8003fc4 <_dtoa_r+0x2ec>)
 8003d7e:	9308      	str	r3, [sp, #32]
 8003d80:	3303      	adds	r3, #3
 8003d82:	e7f5      	b.n	8003d70 <_dtoa_r+0x98>
 8003d84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003d88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003d8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d90:	2200      	movs	r2, #0
 8003d92:	2300      	movs	r3, #0
 8003d94:	f7fc fe08 	bl	80009a8 <__aeabi_dcmpeq>
 8003d98:	4680      	mov	r8, r0
 8003d9a:	b158      	cbz	r0, 8003db4 <_dtoa_r+0xdc>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8559 	beq.w	800485c <_dtoa_r+0xb84>
 8003daa:	4888      	ldr	r0, [pc, #544]	; (8003fcc <_dtoa_r+0x2f4>)
 8003dac:	6018      	str	r0, [r3, #0]
 8003dae:	1e43      	subs	r3, r0, #1
 8003db0:	9308      	str	r3, [sp, #32]
 8003db2:	e7df      	b.n	8003d74 <_dtoa_r+0x9c>
 8003db4:	ab16      	add	r3, sp, #88	; 0x58
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	ab17      	add	r3, sp, #92	; 0x5c
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003dc2:	f001 f8c5 	bl	8004f50 <__d2b>
 8003dc6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003dca:	4682      	mov	sl, r0
 8003dcc:	2c00      	cmp	r4, #0
 8003dce:	d07e      	beq.n	8003ece <_dtoa_r+0x1f6>
 8003dd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003dd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003dd6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003dda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dde:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003de2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003de6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003dea:	2200      	movs	r2, #0
 8003dec:	4b78      	ldr	r3, [pc, #480]	; (8003fd0 <_dtoa_r+0x2f8>)
 8003dee:	f7fc f9bb 	bl	8000168 <__aeabi_dsub>
 8003df2:	a36b      	add	r3, pc, #428	; (adr r3, 8003fa0 <_dtoa_r+0x2c8>)
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f7fc fb6e 	bl	80004d8 <__aeabi_dmul>
 8003dfc:	a36a      	add	r3, pc, #424	; (adr r3, 8003fa8 <_dtoa_r+0x2d0>)
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	f7fc f9b3 	bl	800016c <__adddf3>
 8003e06:	4606      	mov	r6, r0
 8003e08:	4620      	mov	r0, r4
 8003e0a:	460f      	mov	r7, r1
 8003e0c:	f7fc fafa 	bl	8000404 <__aeabi_i2d>
 8003e10:	a367      	add	r3, pc, #412	; (adr r3, 8003fb0 <_dtoa_r+0x2d8>)
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f7fc fb5f 	bl	80004d8 <__aeabi_dmul>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4630      	mov	r0, r6
 8003e20:	4639      	mov	r1, r7
 8003e22:	f7fc f9a3 	bl	800016c <__adddf3>
 8003e26:	4606      	mov	r6, r0
 8003e28:	460f      	mov	r7, r1
 8003e2a:	f7fc fe05 	bl	8000a38 <__aeabi_d2iz>
 8003e2e:	2200      	movs	r2, #0
 8003e30:	4681      	mov	r9, r0
 8003e32:	2300      	movs	r3, #0
 8003e34:	4630      	mov	r0, r6
 8003e36:	4639      	mov	r1, r7
 8003e38:	f7fc fdc0 	bl	80009bc <__aeabi_dcmplt>
 8003e3c:	b148      	cbz	r0, 8003e52 <_dtoa_r+0x17a>
 8003e3e:	4648      	mov	r0, r9
 8003e40:	f7fc fae0 	bl	8000404 <__aeabi_i2d>
 8003e44:	4632      	mov	r2, r6
 8003e46:	463b      	mov	r3, r7
 8003e48:	f7fc fdae 	bl	80009a8 <__aeabi_dcmpeq>
 8003e4c:	b908      	cbnz	r0, 8003e52 <_dtoa_r+0x17a>
 8003e4e:	f109 39ff 	add.w	r9, r9, #4294967295
 8003e52:	f1b9 0f16 	cmp.w	r9, #22
 8003e56:	d857      	bhi.n	8003f08 <_dtoa_r+0x230>
 8003e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e5c:	4b5d      	ldr	r3, [pc, #372]	; (8003fd4 <_dtoa_r+0x2fc>)
 8003e5e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	f7fc fda9 	bl	80009bc <__aeabi_dcmplt>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d04e      	beq.n	8003f0c <_dtoa_r+0x234>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f109 39ff 	add.w	r9, r9, #4294967295
 8003e74:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003e78:	1b1c      	subs	r4, r3, r4
 8003e7a:	1e63      	subs	r3, r4, #1
 8003e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e7e:	bf49      	itett	mi
 8003e80:	f1c4 0301 	rsbmi	r3, r4, #1
 8003e84:	2300      	movpl	r3, #0
 8003e86:	9306      	strmi	r3, [sp, #24]
 8003e88:	2300      	movmi	r3, #0
 8003e8a:	bf54      	ite	pl
 8003e8c:	9306      	strpl	r3, [sp, #24]
 8003e8e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003e90:	f1b9 0f00 	cmp.w	r9, #0
 8003e94:	db3c      	blt.n	8003f10 <_dtoa_r+0x238>
 8003e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e98:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003e9c:	444b      	add	r3, r9
 8003e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ea4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ea6:	2b09      	cmp	r3, #9
 8003ea8:	d86c      	bhi.n	8003f84 <_dtoa_r+0x2ac>
 8003eaa:	2b05      	cmp	r3, #5
 8003eac:	bfc4      	itt	gt
 8003eae:	3b04      	subgt	r3, #4
 8003eb0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003eb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003eb4:	bfc8      	it	gt
 8003eb6:	2400      	movgt	r4, #0
 8003eb8:	f1a3 0302 	sub.w	r3, r3, #2
 8003ebc:	bfd8      	it	le
 8003ebe:	2401      	movle	r4, #1
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	f200 808b 	bhi.w	8003fdc <_dtoa_r+0x304>
 8003ec6:	e8df f003 	tbb	[pc, r3]
 8003eca:	4f2d      	.short	0x4f2d
 8003ecc:	5b4d      	.short	0x5b4d
 8003ece:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003ed2:	441c      	add	r4, r3
 8003ed4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	bfc3      	ittte	gt
 8003edc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003ee0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003ee4:	fa09 f303 	lslgt.w	r3, r9, r3
 8003ee8:	f1c3 0320 	rsble	r3, r3, #32
 8003eec:	bfc6      	itte	gt
 8003eee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003ef2:	4318      	orrgt	r0, r3
 8003ef4:	fa06 f003 	lslle.w	r0, r6, r3
 8003ef8:	f7fc fa74 	bl	80003e4 <__aeabi_ui2d>
 8003efc:	2301      	movs	r3, #1
 8003efe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003f02:	3c01      	subs	r4, #1
 8003f04:	9313      	str	r3, [sp, #76]	; 0x4c
 8003f06:	e770      	b.n	8003dea <_dtoa_r+0x112>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e7b3      	b.n	8003e74 <_dtoa_r+0x19c>
 8003f0c:	900f      	str	r0, [sp, #60]	; 0x3c
 8003f0e:	e7b2      	b.n	8003e76 <_dtoa_r+0x19e>
 8003f10:	9b06      	ldr	r3, [sp, #24]
 8003f12:	eba3 0309 	sub.w	r3, r3, r9
 8003f16:	9306      	str	r3, [sp, #24]
 8003f18:	f1c9 0300 	rsb	r3, r9, #0
 8003f1c:	930a      	str	r3, [sp, #40]	; 0x28
 8003f1e:	2300      	movs	r3, #0
 8003f20:	930e      	str	r3, [sp, #56]	; 0x38
 8003f22:	e7bf      	b.n	8003ea4 <_dtoa_r+0x1cc>
 8003f24:	2300      	movs	r3, #0
 8003f26:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	dc59      	bgt.n	8003fe2 <_dtoa_r+0x30a>
 8003f2e:	f04f 0b01 	mov.w	fp, #1
 8003f32:	465b      	mov	r3, fp
 8003f34:	f8cd b008 	str.w	fp, [sp, #8]
 8003f38:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003f40:	6042      	str	r2, [r0, #4]
 8003f42:	2204      	movs	r2, #4
 8003f44:	f102 0614 	add.w	r6, r2, #20
 8003f48:	429e      	cmp	r6, r3
 8003f4a:	6841      	ldr	r1, [r0, #4]
 8003f4c:	d94f      	bls.n	8003fee <_dtoa_r+0x316>
 8003f4e:	4628      	mov	r0, r5
 8003f50:	f000 fcd8 	bl	8004904 <_Balloc>
 8003f54:	9008      	str	r0, [sp, #32]
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d14d      	bne.n	8003ff6 <_dtoa_r+0x31e>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003f60:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <_dtoa_r+0x300>)
 8003f62:	e6cd      	b.n	8003d00 <_dtoa_r+0x28>
 8003f64:	2301      	movs	r3, #1
 8003f66:	e7de      	b.n	8003f26 <_dtoa_r+0x24e>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f6e:	eb09 0b03 	add.w	fp, r9, r3
 8003f72:	f10b 0301 	add.w	r3, fp, #1
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	9302      	str	r3, [sp, #8]
 8003f7a:	bfb8      	it	lt
 8003f7c:	2301      	movlt	r3, #1
 8003f7e:	e7dd      	b.n	8003f3c <_dtoa_r+0x264>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e7f2      	b.n	8003f6a <_dtoa_r+0x292>
 8003f84:	2401      	movs	r4, #1
 8003f86:	2300      	movs	r3, #0
 8003f88:	940b      	str	r4, [sp, #44]	; 0x2c
 8003f8a:	9322      	str	r3, [sp, #136]	; 0x88
 8003f8c:	f04f 3bff 	mov.w	fp, #4294967295
 8003f90:	2200      	movs	r2, #0
 8003f92:	2312      	movs	r3, #18
 8003f94:	f8cd b008 	str.w	fp, [sp, #8]
 8003f98:	9223      	str	r2, [sp, #140]	; 0x8c
 8003f9a:	e7cf      	b.n	8003f3c <_dtoa_r+0x264>
 8003f9c:	f3af 8000 	nop.w
 8003fa0:	636f4361 	.word	0x636f4361
 8003fa4:	3fd287a7 	.word	0x3fd287a7
 8003fa8:	8b60c8b3 	.word	0x8b60c8b3
 8003fac:	3fc68a28 	.word	0x3fc68a28
 8003fb0:	509f79fb 	.word	0x509f79fb
 8003fb4:	3fd34413 	.word	0x3fd34413
 8003fb8:	08006161 	.word	0x08006161
 8003fbc:	08006178 	.word	0x08006178
 8003fc0:	7ff00000 	.word	0x7ff00000
 8003fc4:	0800615d 	.word	0x0800615d
 8003fc8:	08006154 	.word	0x08006154
 8003fcc:	08006131 	.word	0x08006131
 8003fd0:	3ff80000 	.word	0x3ff80000
 8003fd4:	08006270 	.word	0x08006270
 8003fd8:	080061d7 	.word	0x080061d7
 8003fdc:	2301      	movs	r3, #1
 8003fde:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fe0:	e7d4      	b.n	8003f8c <_dtoa_r+0x2b4>
 8003fe2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8003fe6:	465b      	mov	r3, fp
 8003fe8:	f8cd b008 	str.w	fp, [sp, #8]
 8003fec:	e7a6      	b.n	8003f3c <_dtoa_r+0x264>
 8003fee:	3101      	adds	r1, #1
 8003ff0:	6041      	str	r1, [r0, #4]
 8003ff2:	0052      	lsls	r2, r2, #1
 8003ff4:	e7a6      	b.n	8003f44 <_dtoa_r+0x26c>
 8003ff6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ff8:	9a08      	ldr	r2, [sp, #32]
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	9b02      	ldr	r3, [sp, #8]
 8003ffe:	2b0e      	cmp	r3, #14
 8004000:	f200 80a8 	bhi.w	8004154 <_dtoa_r+0x47c>
 8004004:	2c00      	cmp	r4, #0
 8004006:	f000 80a5 	beq.w	8004154 <_dtoa_r+0x47c>
 800400a:	f1b9 0f00 	cmp.w	r9, #0
 800400e:	dd34      	ble.n	800407a <_dtoa_r+0x3a2>
 8004010:	4a9a      	ldr	r2, [pc, #616]	; (800427c <_dtoa_r+0x5a4>)
 8004012:	f009 030f 	and.w	r3, r9, #15
 8004016:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800401a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800401e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004022:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004026:	ea4f 1429 	mov.w	r4, r9, asr #4
 800402a:	d016      	beq.n	800405a <_dtoa_r+0x382>
 800402c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004030:	4b93      	ldr	r3, [pc, #588]	; (8004280 <_dtoa_r+0x5a8>)
 8004032:	2703      	movs	r7, #3
 8004034:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004038:	f7fc fb78 	bl	800072c <__aeabi_ddiv>
 800403c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004040:	f004 040f 	and.w	r4, r4, #15
 8004044:	4e8e      	ldr	r6, [pc, #568]	; (8004280 <_dtoa_r+0x5a8>)
 8004046:	b954      	cbnz	r4, 800405e <_dtoa_r+0x386>
 8004048:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800404c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004050:	f7fc fb6c 	bl	800072c <__aeabi_ddiv>
 8004054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004058:	e029      	b.n	80040ae <_dtoa_r+0x3d6>
 800405a:	2702      	movs	r7, #2
 800405c:	e7f2      	b.n	8004044 <_dtoa_r+0x36c>
 800405e:	07e1      	lsls	r1, r4, #31
 8004060:	d508      	bpl.n	8004074 <_dtoa_r+0x39c>
 8004062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004066:	e9d6 2300 	ldrd	r2, r3, [r6]
 800406a:	f7fc fa35 	bl	80004d8 <__aeabi_dmul>
 800406e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004072:	3701      	adds	r7, #1
 8004074:	1064      	asrs	r4, r4, #1
 8004076:	3608      	adds	r6, #8
 8004078:	e7e5      	b.n	8004046 <_dtoa_r+0x36e>
 800407a:	f000 80a5 	beq.w	80041c8 <_dtoa_r+0x4f0>
 800407e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004082:	f1c9 0400 	rsb	r4, r9, #0
 8004086:	4b7d      	ldr	r3, [pc, #500]	; (800427c <_dtoa_r+0x5a4>)
 8004088:	f004 020f 	and.w	r2, r4, #15
 800408c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	f7fc fa20 	bl	80004d8 <__aeabi_dmul>
 8004098:	2702      	movs	r7, #2
 800409a:	2300      	movs	r3, #0
 800409c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040a0:	4e77      	ldr	r6, [pc, #476]	; (8004280 <_dtoa_r+0x5a8>)
 80040a2:	1124      	asrs	r4, r4, #4
 80040a4:	2c00      	cmp	r4, #0
 80040a6:	f040 8084 	bne.w	80041b2 <_dtoa_r+0x4da>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1d2      	bne.n	8004054 <_dtoa_r+0x37c>
 80040ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 808b 	beq.w	80041cc <_dtoa_r+0x4f4>
 80040b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80040ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80040be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040c2:	2200      	movs	r2, #0
 80040c4:	4b6f      	ldr	r3, [pc, #444]	; (8004284 <_dtoa_r+0x5ac>)
 80040c6:	f7fc fc79 	bl	80009bc <__aeabi_dcmplt>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d07e      	beq.n	80041cc <_dtoa_r+0x4f4>
 80040ce:	9b02      	ldr	r3, [sp, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d07b      	beq.n	80041cc <_dtoa_r+0x4f4>
 80040d4:	f1bb 0f00 	cmp.w	fp, #0
 80040d8:	dd38      	ble.n	800414c <_dtoa_r+0x474>
 80040da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040de:	2200      	movs	r2, #0
 80040e0:	4b69      	ldr	r3, [pc, #420]	; (8004288 <_dtoa_r+0x5b0>)
 80040e2:	f7fc f9f9 	bl	80004d8 <__aeabi_dmul>
 80040e6:	465c      	mov	r4, fp
 80040e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040ec:	f109 38ff 	add.w	r8, r9, #4294967295
 80040f0:	3701      	adds	r7, #1
 80040f2:	4638      	mov	r0, r7
 80040f4:	f7fc f986 	bl	8000404 <__aeabi_i2d>
 80040f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040fc:	f7fc f9ec 	bl	80004d8 <__aeabi_dmul>
 8004100:	2200      	movs	r2, #0
 8004102:	4b62      	ldr	r3, [pc, #392]	; (800428c <_dtoa_r+0x5b4>)
 8004104:	f7fc f832 	bl	800016c <__adddf3>
 8004108:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800410c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004110:	9611      	str	r6, [sp, #68]	; 0x44
 8004112:	2c00      	cmp	r4, #0
 8004114:	d15d      	bne.n	80041d2 <_dtoa_r+0x4fa>
 8004116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800411a:	2200      	movs	r2, #0
 800411c:	4b5c      	ldr	r3, [pc, #368]	; (8004290 <_dtoa_r+0x5b8>)
 800411e:	f7fc f823 	bl	8000168 <__aeabi_dsub>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800412a:	4633      	mov	r3, r6
 800412c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800412e:	f7fc fc63 	bl	80009f8 <__aeabi_dcmpgt>
 8004132:	2800      	cmp	r0, #0
 8004134:	f040 829e 	bne.w	8004674 <_dtoa_r+0x99c>
 8004138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800413c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800413e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004142:	f7fc fc3b 	bl	80009bc <__aeabi_dcmplt>
 8004146:	2800      	cmp	r0, #0
 8004148:	f040 8292 	bne.w	8004670 <_dtoa_r+0x998>
 800414c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004150:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004156:	2b00      	cmp	r3, #0
 8004158:	f2c0 8153 	blt.w	8004402 <_dtoa_r+0x72a>
 800415c:	f1b9 0f0e 	cmp.w	r9, #14
 8004160:	f300 814f 	bgt.w	8004402 <_dtoa_r+0x72a>
 8004164:	4b45      	ldr	r3, [pc, #276]	; (800427c <_dtoa_r+0x5a4>)
 8004166:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800416a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800416e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004172:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004174:	2b00      	cmp	r3, #0
 8004176:	f280 80db 	bge.w	8004330 <_dtoa_r+0x658>
 800417a:	9b02      	ldr	r3, [sp, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f300 80d7 	bgt.w	8004330 <_dtoa_r+0x658>
 8004182:	f040 8274 	bne.w	800466e <_dtoa_r+0x996>
 8004186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800418a:	2200      	movs	r2, #0
 800418c:	4b40      	ldr	r3, [pc, #256]	; (8004290 <_dtoa_r+0x5b8>)
 800418e:	f7fc f9a3 	bl	80004d8 <__aeabi_dmul>
 8004192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004196:	f7fc fc25 	bl	80009e4 <__aeabi_dcmpge>
 800419a:	9c02      	ldr	r4, [sp, #8]
 800419c:	4626      	mov	r6, r4
 800419e:	2800      	cmp	r0, #0
 80041a0:	f040 824a 	bne.w	8004638 <_dtoa_r+0x960>
 80041a4:	2331      	movs	r3, #49	; 0x31
 80041a6:	9f08      	ldr	r7, [sp, #32]
 80041a8:	f109 0901 	add.w	r9, r9, #1
 80041ac:	f807 3b01 	strb.w	r3, [r7], #1
 80041b0:	e246      	b.n	8004640 <_dtoa_r+0x968>
 80041b2:	07e2      	lsls	r2, r4, #31
 80041b4:	d505      	bpl.n	80041c2 <_dtoa_r+0x4ea>
 80041b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80041ba:	f7fc f98d 	bl	80004d8 <__aeabi_dmul>
 80041be:	2301      	movs	r3, #1
 80041c0:	3701      	adds	r7, #1
 80041c2:	1064      	asrs	r4, r4, #1
 80041c4:	3608      	adds	r6, #8
 80041c6:	e76d      	b.n	80040a4 <_dtoa_r+0x3cc>
 80041c8:	2702      	movs	r7, #2
 80041ca:	e770      	b.n	80040ae <_dtoa_r+0x3d6>
 80041cc:	46c8      	mov	r8, r9
 80041ce:	9c02      	ldr	r4, [sp, #8]
 80041d0:	e78f      	b.n	80040f2 <_dtoa_r+0x41a>
 80041d2:	9908      	ldr	r1, [sp, #32]
 80041d4:	4b29      	ldr	r3, [pc, #164]	; (800427c <_dtoa_r+0x5a4>)
 80041d6:	4421      	add	r1, r4
 80041d8:	9112      	str	r1, [sp, #72]	; 0x48
 80041da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80041e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80041e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80041e8:	2900      	cmp	r1, #0
 80041ea:	d055      	beq.n	8004298 <_dtoa_r+0x5c0>
 80041ec:	2000      	movs	r0, #0
 80041ee:	4929      	ldr	r1, [pc, #164]	; (8004294 <_dtoa_r+0x5bc>)
 80041f0:	f7fc fa9c 	bl	800072c <__aeabi_ddiv>
 80041f4:	463b      	mov	r3, r7
 80041f6:	4632      	mov	r2, r6
 80041f8:	f7fb ffb6 	bl	8000168 <__aeabi_dsub>
 80041fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004200:	9f08      	ldr	r7, [sp, #32]
 8004202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004206:	f7fc fc17 	bl	8000a38 <__aeabi_d2iz>
 800420a:	4604      	mov	r4, r0
 800420c:	f7fc f8fa 	bl	8000404 <__aeabi_i2d>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004218:	f7fb ffa6 	bl	8000168 <__aeabi_dsub>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	3430      	adds	r4, #48	; 0x30
 8004222:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800422a:	f807 4b01 	strb.w	r4, [r7], #1
 800422e:	f7fc fbc5 	bl	80009bc <__aeabi_dcmplt>
 8004232:	2800      	cmp	r0, #0
 8004234:	d174      	bne.n	8004320 <_dtoa_r+0x648>
 8004236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800423a:	2000      	movs	r0, #0
 800423c:	4911      	ldr	r1, [pc, #68]	; (8004284 <_dtoa_r+0x5ac>)
 800423e:	f7fb ff93 	bl	8000168 <__aeabi_dsub>
 8004242:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004246:	f7fc fbb9 	bl	80009bc <__aeabi_dcmplt>
 800424a:	2800      	cmp	r0, #0
 800424c:	f040 80b6 	bne.w	80043bc <_dtoa_r+0x6e4>
 8004250:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004252:	429f      	cmp	r7, r3
 8004254:	f43f af7a 	beq.w	800414c <_dtoa_r+0x474>
 8004258:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800425c:	2200      	movs	r2, #0
 800425e:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <_dtoa_r+0x5b0>)
 8004260:	f7fc f93a 	bl	80004d8 <__aeabi_dmul>
 8004264:	2200      	movs	r2, #0
 8004266:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800426a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800426e:	4b06      	ldr	r3, [pc, #24]	; (8004288 <_dtoa_r+0x5b0>)
 8004270:	f7fc f932 	bl	80004d8 <__aeabi_dmul>
 8004274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004278:	e7c3      	b.n	8004202 <_dtoa_r+0x52a>
 800427a:	bf00      	nop
 800427c:	08006270 	.word	0x08006270
 8004280:	08006248 	.word	0x08006248
 8004284:	3ff00000 	.word	0x3ff00000
 8004288:	40240000 	.word	0x40240000
 800428c:	401c0000 	.word	0x401c0000
 8004290:	40140000 	.word	0x40140000
 8004294:	3fe00000 	.word	0x3fe00000
 8004298:	4630      	mov	r0, r6
 800429a:	4639      	mov	r1, r7
 800429c:	f7fc f91c 	bl	80004d8 <__aeabi_dmul>
 80042a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80042a6:	9c08      	ldr	r4, [sp, #32]
 80042a8:	9314      	str	r3, [sp, #80]	; 0x50
 80042aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042ae:	f7fc fbc3 	bl	8000a38 <__aeabi_d2iz>
 80042b2:	9015      	str	r0, [sp, #84]	; 0x54
 80042b4:	f7fc f8a6 	bl	8000404 <__aeabi_i2d>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042c0:	f7fb ff52 	bl	8000168 <__aeabi_dsub>
 80042c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80042c6:	4606      	mov	r6, r0
 80042c8:	3330      	adds	r3, #48	; 0x30
 80042ca:	f804 3b01 	strb.w	r3, [r4], #1
 80042ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042d0:	460f      	mov	r7, r1
 80042d2:	429c      	cmp	r4, r3
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	d124      	bne.n	8004324 <_dtoa_r+0x64c>
 80042da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80042de:	4bb3      	ldr	r3, [pc, #716]	; (80045ac <_dtoa_r+0x8d4>)
 80042e0:	f7fb ff44 	bl	800016c <__adddf3>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4630      	mov	r0, r6
 80042ea:	4639      	mov	r1, r7
 80042ec:	f7fc fb84 	bl	80009f8 <__aeabi_dcmpgt>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	d162      	bne.n	80043ba <_dtoa_r+0x6e2>
 80042f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80042f8:	2000      	movs	r0, #0
 80042fa:	49ac      	ldr	r1, [pc, #688]	; (80045ac <_dtoa_r+0x8d4>)
 80042fc:	f7fb ff34 	bl	8000168 <__aeabi_dsub>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4630      	mov	r0, r6
 8004306:	4639      	mov	r1, r7
 8004308:	f7fc fb58 	bl	80009bc <__aeabi_dcmplt>
 800430c:	2800      	cmp	r0, #0
 800430e:	f43f af1d 	beq.w	800414c <_dtoa_r+0x474>
 8004312:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004314:	1e7b      	subs	r3, r7, #1
 8004316:	9314      	str	r3, [sp, #80]	; 0x50
 8004318:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800431c:	2b30      	cmp	r3, #48	; 0x30
 800431e:	d0f8      	beq.n	8004312 <_dtoa_r+0x63a>
 8004320:	46c1      	mov	r9, r8
 8004322:	e03a      	b.n	800439a <_dtoa_r+0x6c2>
 8004324:	4ba2      	ldr	r3, [pc, #648]	; (80045b0 <_dtoa_r+0x8d8>)
 8004326:	f7fc f8d7 	bl	80004d8 <__aeabi_dmul>
 800432a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800432e:	e7bc      	b.n	80042aa <_dtoa_r+0x5d2>
 8004330:	9f08      	ldr	r7, [sp, #32]
 8004332:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004336:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800433a:	f7fc f9f7 	bl	800072c <__aeabi_ddiv>
 800433e:	f7fc fb7b 	bl	8000a38 <__aeabi_d2iz>
 8004342:	4604      	mov	r4, r0
 8004344:	f7fc f85e 	bl	8000404 <__aeabi_i2d>
 8004348:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800434c:	f7fc f8c4 	bl	80004d8 <__aeabi_dmul>
 8004350:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004354:	460b      	mov	r3, r1
 8004356:	4602      	mov	r2, r0
 8004358:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800435c:	f7fb ff04 	bl	8000168 <__aeabi_dsub>
 8004360:	f807 6b01 	strb.w	r6, [r7], #1
 8004364:	9e08      	ldr	r6, [sp, #32]
 8004366:	9b02      	ldr	r3, [sp, #8]
 8004368:	1bbe      	subs	r6, r7, r6
 800436a:	42b3      	cmp	r3, r6
 800436c:	d13a      	bne.n	80043e4 <_dtoa_r+0x70c>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	f7fb fefb 	bl	800016c <__adddf3>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800437e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004382:	f7fc fb39 	bl	80009f8 <__aeabi_dcmpgt>
 8004386:	bb58      	cbnz	r0, 80043e0 <_dtoa_r+0x708>
 8004388:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800438c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004390:	f7fc fb0a 	bl	80009a8 <__aeabi_dcmpeq>
 8004394:	b108      	cbz	r0, 800439a <_dtoa_r+0x6c2>
 8004396:	07e1      	lsls	r1, r4, #31
 8004398:	d422      	bmi.n	80043e0 <_dtoa_r+0x708>
 800439a:	4628      	mov	r0, r5
 800439c:	4651      	mov	r1, sl
 800439e:	f000 faf1 	bl	8004984 <_Bfree>
 80043a2:	2300      	movs	r3, #0
 80043a4:	703b      	strb	r3, [r7, #0]
 80043a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80043a8:	f109 0001 	add.w	r0, r9, #1
 80043ac:	6018      	str	r0, [r3, #0]
 80043ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f43f acdf 	beq.w	8003d74 <_dtoa_r+0x9c>
 80043b6:	601f      	str	r7, [r3, #0]
 80043b8:	e4dc      	b.n	8003d74 <_dtoa_r+0x9c>
 80043ba:	4627      	mov	r7, r4
 80043bc:	463b      	mov	r3, r7
 80043be:	461f      	mov	r7, r3
 80043c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043c4:	2a39      	cmp	r2, #57	; 0x39
 80043c6:	d107      	bne.n	80043d8 <_dtoa_r+0x700>
 80043c8:	9a08      	ldr	r2, [sp, #32]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d1f7      	bne.n	80043be <_dtoa_r+0x6e6>
 80043ce:	2230      	movs	r2, #48	; 0x30
 80043d0:	9908      	ldr	r1, [sp, #32]
 80043d2:	f108 0801 	add.w	r8, r8, #1
 80043d6:	700a      	strb	r2, [r1, #0]
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	3201      	adds	r2, #1
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	e79f      	b.n	8004320 <_dtoa_r+0x648>
 80043e0:	46c8      	mov	r8, r9
 80043e2:	e7eb      	b.n	80043bc <_dtoa_r+0x6e4>
 80043e4:	2200      	movs	r2, #0
 80043e6:	4b72      	ldr	r3, [pc, #456]	; (80045b0 <_dtoa_r+0x8d8>)
 80043e8:	f7fc f876 	bl	80004d8 <__aeabi_dmul>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80043f4:	2200      	movs	r2, #0
 80043f6:	2300      	movs	r3, #0
 80043f8:	f7fc fad6 	bl	80009a8 <__aeabi_dcmpeq>
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d098      	beq.n	8004332 <_dtoa_r+0x65a>
 8004400:	e7cb      	b.n	800439a <_dtoa_r+0x6c2>
 8004402:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004404:	2a00      	cmp	r2, #0
 8004406:	f000 80cd 	beq.w	80045a4 <_dtoa_r+0x8cc>
 800440a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800440c:	2a01      	cmp	r2, #1
 800440e:	f300 80af 	bgt.w	8004570 <_dtoa_r+0x898>
 8004412:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004414:	2a00      	cmp	r2, #0
 8004416:	f000 80a7 	beq.w	8004568 <_dtoa_r+0x890>
 800441a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800441e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004420:	9f06      	ldr	r7, [sp, #24]
 8004422:	9a06      	ldr	r2, [sp, #24]
 8004424:	2101      	movs	r1, #1
 8004426:	441a      	add	r2, r3
 8004428:	9206      	str	r2, [sp, #24]
 800442a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800442c:	4628      	mov	r0, r5
 800442e:	441a      	add	r2, r3
 8004430:	9209      	str	r2, [sp, #36]	; 0x24
 8004432:	f000 fb61 	bl	8004af8 <__i2b>
 8004436:	4606      	mov	r6, r0
 8004438:	2f00      	cmp	r7, #0
 800443a:	dd0c      	ble.n	8004456 <_dtoa_r+0x77e>
 800443c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	dd09      	ble.n	8004456 <_dtoa_r+0x77e>
 8004442:	42bb      	cmp	r3, r7
 8004444:	bfa8      	it	ge
 8004446:	463b      	movge	r3, r7
 8004448:	9a06      	ldr	r2, [sp, #24]
 800444a:	1aff      	subs	r7, r7, r3
 800444c:	1ad2      	subs	r2, r2, r3
 800444e:	9206      	str	r2, [sp, #24]
 8004450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	9309      	str	r3, [sp, #36]	; 0x24
 8004456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004458:	b1f3      	cbz	r3, 8004498 <_dtoa_r+0x7c0>
 800445a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 80a9 	beq.w	80045b4 <_dtoa_r+0x8dc>
 8004462:	2c00      	cmp	r4, #0
 8004464:	dd10      	ble.n	8004488 <_dtoa_r+0x7b0>
 8004466:	4631      	mov	r1, r6
 8004468:	4622      	mov	r2, r4
 800446a:	4628      	mov	r0, r5
 800446c:	f000 fbfe 	bl	8004c6c <__pow5mult>
 8004470:	4652      	mov	r2, sl
 8004472:	4601      	mov	r1, r0
 8004474:	4606      	mov	r6, r0
 8004476:	4628      	mov	r0, r5
 8004478:	f000 fb54 	bl	8004b24 <__multiply>
 800447c:	4680      	mov	r8, r0
 800447e:	4651      	mov	r1, sl
 8004480:	4628      	mov	r0, r5
 8004482:	f000 fa7f 	bl	8004984 <_Bfree>
 8004486:	46c2      	mov	sl, r8
 8004488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800448a:	1b1a      	subs	r2, r3, r4
 800448c:	d004      	beq.n	8004498 <_dtoa_r+0x7c0>
 800448e:	4651      	mov	r1, sl
 8004490:	4628      	mov	r0, r5
 8004492:	f000 fbeb 	bl	8004c6c <__pow5mult>
 8004496:	4682      	mov	sl, r0
 8004498:	2101      	movs	r1, #1
 800449a:	4628      	mov	r0, r5
 800449c:	f000 fb2c 	bl	8004af8 <__i2b>
 80044a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044a2:	4604      	mov	r4, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f340 8087 	ble.w	80045b8 <_dtoa_r+0x8e0>
 80044aa:	461a      	mov	r2, r3
 80044ac:	4601      	mov	r1, r0
 80044ae:	4628      	mov	r0, r5
 80044b0:	f000 fbdc 	bl	8004c6c <__pow5mult>
 80044b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044b6:	4604      	mov	r4, r0
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	f340 8080 	ble.w	80045be <_dtoa_r+0x8e6>
 80044be:	f04f 0800 	mov.w	r8, #0
 80044c2:	6923      	ldr	r3, [r4, #16]
 80044c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80044c8:	6918      	ldr	r0, [r3, #16]
 80044ca:	f000 fac7 	bl	8004a5c <__hi0bits>
 80044ce:	f1c0 0020 	rsb	r0, r0, #32
 80044d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d4:	4418      	add	r0, r3
 80044d6:	f010 001f 	ands.w	r0, r0, #31
 80044da:	f000 8092 	beq.w	8004602 <_dtoa_r+0x92a>
 80044de:	f1c0 0320 	rsb	r3, r0, #32
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	f340 808a 	ble.w	80045fc <_dtoa_r+0x924>
 80044e8:	f1c0 001c 	rsb	r0, r0, #28
 80044ec:	9b06      	ldr	r3, [sp, #24]
 80044ee:	4407      	add	r7, r0
 80044f0:	4403      	add	r3, r0
 80044f2:	9306      	str	r3, [sp, #24]
 80044f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f6:	4403      	add	r3, r0
 80044f8:	9309      	str	r3, [sp, #36]	; 0x24
 80044fa:	9b06      	ldr	r3, [sp, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	dd05      	ble.n	800450c <_dtoa_r+0x834>
 8004500:	4651      	mov	r1, sl
 8004502:	461a      	mov	r2, r3
 8004504:	4628      	mov	r0, r5
 8004506:	f000 fc0b 	bl	8004d20 <__lshift>
 800450a:	4682      	mov	sl, r0
 800450c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800450e:	2b00      	cmp	r3, #0
 8004510:	dd05      	ble.n	800451e <_dtoa_r+0x846>
 8004512:	4621      	mov	r1, r4
 8004514:	461a      	mov	r2, r3
 8004516:	4628      	mov	r0, r5
 8004518:	f000 fc02 	bl	8004d20 <__lshift>
 800451c:	4604      	mov	r4, r0
 800451e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004520:	2b00      	cmp	r3, #0
 8004522:	d070      	beq.n	8004606 <_dtoa_r+0x92e>
 8004524:	4621      	mov	r1, r4
 8004526:	4650      	mov	r0, sl
 8004528:	f000 fc66 	bl	8004df8 <__mcmp>
 800452c:	2800      	cmp	r0, #0
 800452e:	da6a      	bge.n	8004606 <_dtoa_r+0x92e>
 8004530:	2300      	movs	r3, #0
 8004532:	4651      	mov	r1, sl
 8004534:	220a      	movs	r2, #10
 8004536:	4628      	mov	r0, r5
 8004538:	f000 fa46 	bl	80049c8 <__multadd>
 800453c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800453e:	4682      	mov	sl, r0
 8004540:	f109 39ff 	add.w	r9, r9, #4294967295
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8193 	beq.w	8004870 <_dtoa_r+0xb98>
 800454a:	4631      	mov	r1, r6
 800454c:	2300      	movs	r3, #0
 800454e:	220a      	movs	r2, #10
 8004550:	4628      	mov	r0, r5
 8004552:	f000 fa39 	bl	80049c8 <__multadd>
 8004556:	f1bb 0f00 	cmp.w	fp, #0
 800455a:	4606      	mov	r6, r0
 800455c:	f300 8093 	bgt.w	8004686 <_dtoa_r+0x9ae>
 8004560:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004562:	2b02      	cmp	r3, #2
 8004564:	dc57      	bgt.n	8004616 <_dtoa_r+0x93e>
 8004566:	e08e      	b.n	8004686 <_dtoa_r+0x9ae>
 8004568:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800456a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800456e:	e756      	b.n	800441e <_dtoa_r+0x746>
 8004570:	9b02      	ldr	r3, [sp, #8]
 8004572:	1e5c      	subs	r4, r3, #1
 8004574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004576:	42a3      	cmp	r3, r4
 8004578:	bfb7      	itett	lt
 800457a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800457c:	1b1c      	subge	r4, r3, r4
 800457e:	1ae2      	sublt	r2, r4, r3
 8004580:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004582:	bfbe      	ittt	lt
 8004584:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004586:	189b      	addlt	r3, r3, r2
 8004588:	930e      	strlt	r3, [sp, #56]	; 0x38
 800458a:	9b02      	ldr	r3, [sp, #8]
 800458c:	bfb8      	it	lt
 800458e:	2400      	movlt	r4, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	bfbb      	ittet	lt
 8004594:	9b06      	ldrlt	r3, [sp, #24]
 8004596:	9a02      	ldrlt	r2, [sp, #8]
 8004598:	9f06      	ldrge	r7, [sp, #24]
 800459a:	1a9f      	sublt	r7, r3, r2
 800459c:	bfac      	ite	ge
 800459e:	9b02      	ldrge	r3, [sp, #8]
 80045a0:	2300      	movlt	r3, #0
 80045a2:	e73e      	b.n	8004422 <_dtoa_r+0x74a>
 80045a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80045a6:	9f06      	ldr	r7, [sp, #24]
 80045a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80045aa:	e745      	b.n	8004438 <_dtoa_r+0x760>
 80045ac:	3fe00000 	.word	0x3fe00000
 80045b0:	40240000 	.word	0x40240000
 80045b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045b6:	e76a      	b.n	800448e <_dtoa_r+0x7b6>
 80045b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	dc19      	bgt.n	80045f2 <_dtoa_r+0x91a>
 80045be:	9b04      	ldr	r3, [sp, #16]
 80045c0:	b9bb      	cbnz	r3, 80045f2 <_dtoa_r+0x91a>
 80045c2:	9b05      	ldr	r3, [sp, #20]
 80045c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045c8:	b99b      	cbnz	r3, 80045f2 <_dtoa_r+0x91a>
 80045ca:	9b05      	ldr	r3, [sp, #20]
 80045cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045d0:	0d1b      	lsrs	r3, r3, #20
 80045d2:	051b      	lsls	r3, r3, #20
 80045d4:	b183      	cbz	r3, 80045f8 <_dtoa_r+0x920>
 80045d6:	f04f 0801 	mov.w	r8, #1
 80045da:	9b06      	ldr	r3, [sp, #24]
 80045dc:	3301      	adds	r3, #1
 80045de:	9306      	str	r3, [sp, #24]
 80045e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045e2:	3301      	adds	r3, #1
 80045e4:	9309      	str	r3, [sp, #36]	; 0x24
 80045e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f47f af6a 	bne.w	80044c2 <_dtoa_r+0x7ea>
 80045ee:	2001      	movs	r0, #1
 80045f0:	e76f      	b.n	80044d2 <_dtoa_r+0x7fa>
 80045f2:	f04f 0800 	mov.w	r8, #0
 80045f6:	e7f6      	b.n	80045e6 <_dtoa_r+0x90e>
 80045f8:	4698      	mov	r8, r3
 80045fa:	e7f4      	b.n	80045e6 <_dtoa_r+0x90e>
 80045fc:	f43f af7d 	beq.w	80044fa <_dtoa_r+0x822>
 8004600:	4618      	mov	r0, r3
 8004602:	301c      	adds	r0, #28
 8004604:	e772      	b.n	80044ec <_dtoa_r+0x814>
 8004606:	9b02      	ldr	r3, [sp, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	dc36      	bgt.n	800467a <_dtoa_r+0x9a2>
 800460c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800460e:	2b02      	cmp	r3, #2
 8004610:	dd33      	ble.n	800467a <_dtoa_r+0x9a2>
 8004612:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004616:	f1bb 0f00 	cmp.w	fp, #0
 800461a:	d10d      	bne.n	8004638 <_dtoa_r+0x960>
 800461c:	4621      	mov	r1, r4
 800461e:	465b      	mov	r3, fp
 8004620:	2205      	movs	r2, #5
 8004622:	4628      	mov	r0, r5
 8004624:	f000 f9d0 	bl	80049c8 <__multadd>
 8004628:	4601      	mov	r1, r0
 800462a:	4604      	mov	r4, r0
 800462c:	4650      	mov	r0, sl
 800462e:	f000 fbe3 	bl	8004df8 <__mcmp>
 8004632:	2800      	cmp	r0, #0
 8004634:	f73f adb6 	bgt.w	80041a4 <_dtoa_r+0x4cc>
 8004638:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800463a:	9f08      	ldr	r7, [sp, #32]
 800463c:	ea6f 0903 	mvn.w	r9, r3
 8004640:	f04f 0800 	mov.w	r8, #0
 8004644:	4621      	mov	r1, r4
 8004646:	4628      	mov	r0, r5
 8004648:	f000 f99c 	bl	8004984 <_Bfree>
 800464c:	2e00      	cmp	r6, #0
 800464e:	f43f aea4 	beq.w	800439a <_dtoa_r+0x6c2>
 8004652:	f1b8 0f00 	cmp.w	r8, #0
 8004656:	d005      	beq.n	8004664 <_dtoa_r+0x98c>
 8004658:	45b0      	cmp	r8, r6
 800465a:	d003      	beq.n	8004664 <_dtoa_r+0x98c>
 800465c:	4641      	mov	r1, r8
 800465e:	4628      	mov	r0, r5
 8004660:	f000 f990 	bl	8004984 <_Bfree>
 8004664:	4631      	mov	r1, r6
 8004666:	4628      	mov	r0, r5
 8004668:	f000 f98c 	bl	8004984 <_Bfree>
 800466c:	e695      	b.n	800439a <_dtoa_r+0x6c2>
 800466e:	2400      	movs	r4, #0
 8004670:	4626      	mov	r6, r4
 8004672:	e7e1      	b.n	8004638 <_dtoa_r+0x960>
 8004674:	46c1      	mov	r9, r8
 8004676:	4626      	mov	r6, r4
 8004678:	e594      	b.n	80041a4 <_dtoa_r+0x4cc>
 800467a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800467c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80fc 	beq.w	800487e <_dtoa_r+0xba6>
 8004686:	2f00      	cmp	r7, #0
 8004688:	dd05      	ble.n	8004696 <_dtoa_r+0x9be>
 800468a:	4631      	mov	r1, r6
 800468c:	463a      	mov	r2, r7
 800468e:	4628      	mov	r0, r5
 8004690:	f000 fb46 	bl	8004d20 <__lshift>
 8004694:	4606      	mov	r6, r0
 8004696:	f1b8 0f00 	cmp.w	r8, #0
 800469a:	d05c      	beq.n	8004756 <_dtoa_r+0xa7e>
 800469c:	4628      	mov	r0, r5
 800469e:	6871      	ldr	r1, [r6, #4]
 80046a0:	f000 f930 	bl	8004904 <_Balloc>
 80046a4:	4607      	mov	r7, r0
 80046a6:	b928      	cbnz	r0, 80046b4 <_dtoa_r+0x9dc>
 80046a8:	4602      	mov	r2, r0
 80046aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80046ae:	4b7e      	ldr	r3, [pc, #504]	; (80048a8 <_dtoa_r+0xbd0>)
 80046b0:	f7ff bb26 	b.w	8003d00 <_dtoa_r+0x28>
 80046b4:	6932      	ldr	r2, [r6, #16]
 80046b6:	f106 010c 	add.w	r1, r6, #12
 80046ba:	3202      	adds	r2, #2
 80046bc:	0092      	lsls	r2, r2, #2
 80046be:	300c      	adds	r0, #12
 80046c0:	f000 f912 	bl	80048e8 <memcpy>
 80046c4:	2201      	movs	r2, #1
 80046c6:	4639      	mov	r1, r7
 80046c8:	4628      	mov	r0, r5
 80046ca:	f000 fb29 	bl	8004d20 <__lshift>
 80046ce:	46b0      	mov	r8, r6
 80046d0:	4606      	mov	r6, r0
 80046d2:	9b08      	ldr	r3, [sp, #32]
 80046d4:	3301      	adds	r3, #1
 80046d6:	9302      	str	r3, [sp, #8]
 80046d8:	9b08      	ldr	r3, [sp, #32]
 80046da:	445b      	add	r3, fp
 80046dc:	930a      	str	r3, [sp, #40]	; 0x28
 80046de:	9b04      	ldr	r3, [sp, #16]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	9309      	str	r3, [sp, #36]	; 0x24
 80046e6:	9b02      	ldr	r3, [sp, #8]
 80046e8:	4621      	mov	r1, r4
 80046ea:	4650      	mov	r0, sl
 80046ec:	f103 3bff 	add.w	fp, r3, #4294967295
 80046f0:	f7ff fa62 	bl	8003bb8 <quorem>
 80046f4:	4603      	mov	r3, r0
 80046f6:	4641      	mov	r1, r8
 80046f8:	3330      	adds	r3, #48	; 0x30
 80046fa:	9004      	str	r0, [sp, #16]
 80046fc:	4650      	mov	r0, sl
 80046fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004700:	f000 fb7a 	bl	8004df8 <__mcmp>
 8004704:	4632      	mov	r2, r6
 8004706:	9006      	str	r0, [sp, #24]
 8004708:	4621      	mov	r1, r4
 800470a:	4628      	mov	r0, r5
 800470c:	f000 fb90 	bl	8004e30 <__mdiff>
 8004710:	68c2      	ldr	r2, [r0, #12]
 8004712:	4607      	mov	r7, r0
 8004714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004716:	bb02      	cbnz	r2, 800475a <_dtoa_r+0xa82>
 8004718:	4601      	mov	r1, r0
 800471a:	4650      	mov	r0, sl
 800471c:	f000 fb6c 	bl	8004df8 <__mcmp>
 8004720:	4602      	mov	r2, r0
 8004722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004724:	4639      	mov	r1, r7
 8004726:	4628      	mov	r0, r5
 8004728:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800472c:	f000 f92a 	bl	8004984 <_Bfree>
 8004730:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004734:	9f02      	ldr	r7, [sp, #8]
 8004736:	ea43 0102 	orr.w	r1, r3, r2
 800473a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800473c:	430b      	orrs	r3, r1
 800473e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004740:	d10d      	bne.n	800475e <_dtoa_r+0xa86>
 8004742:	2b39      	cmp	r3, #57	; 0x39
 8004744:	d027      	beq.n	8004796 <_dtoa_r+0xabe>
 8004746:	9a06      	ldr	r2, [sp, #24]
 8004748:	2a00      	cmp	r2, #0
 800474a:	dd01      	ble.n	8004750 <_dtoa_r+0xa78>
 800474c:	9b04      	ldr	r3, [sp, #16]
 800474e:	3331      	adds	r3, #49	; 0x31
 8004750:	f88b 3000 	strb.w	r3, [fp]
 8004754:	e776      	b.n	8004644 <_dtoa_r+0x96c>
 8004756:	4630      	mov	r0, r6
 8004758:	e7b9      	b.n	80046ce <_dtoa_r+0x9f6>
 800475a:	2201      	movs	r2, #1
 800475c:	e7e2      	b.n	8004724 <_dtoa_r+0xa4c>
 800475e:	9906      	ldr	r1, [sp, #24]
 8004760:	2900      	cmp	r1, #0
 8004762:	db04      	blt.n	800476e <_dtoa_r+0xa96>
 8004764:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004766:	4301      	orrs	r1, r0
 8004768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800476a:	4301      	orrs	r1, r0
 800476c:	d120      	bne.n	80047b0 <_dtoa_r+0xad8>
 800476e:	2a00      	cmp	r2, #0
 8004770:	ddee      	ble.n	8004750 <_dtoa_r+0xa78>
 8004772:	4651      	mov	r1, sl
 8004774:	2201      	movs	r2, #1
 8004776:	4628      	mov	r0, r5
 8004778:	9302      	str	r3, [sp, #8]
 800477a:	f000 fad1 	bl	8004d20 <__lshift>
 800477e:	4621      	mov	r1, r4
 8004780:	4682      	mov	sl, r0
 8004782:	f000 fb39 	bl	8004df8 <__mcmp>
 8004786:	2800      	cmp	r0, #0
 8004788:	9b02      	ldr	r3, [sp, #8]
 800478a:	dc02      	bgt.n	8004792 <_dtoa_r+0xaba>
 800478c:	d1e0      	bne.n	8004750 <_dtoa_r+0xa78>
 800478e:	07da      	lsls	r2, r3, #31
 8004790:	d5de      	bpl.n	8004750 <_dtoa_r+0xa78>
 8004792:	2b39      	cmp	r3, #57	; 0x39
 8004794:	d1da      	bne.n	800474c <_dtoa_r+0xa74>
 8004796:	2339      	movs	r3, #57	; 0x39
 8004798:	f88b 3000 	strb.w	r3, [fp]
 800479c:	463b      	mov	r3, r7
 800479e:	461f      	mov	r7, r3
 80047a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	2a39      	cmp	r2, #57	; 0x39
 80047a8:	d050      	beq.n	800484c <_dtoa_r+0xb74>
 80047aa:	3201      	adds	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	e749      	b.n	8004644 <_dtoa_r+0x96c>
 80047b0:	2a00      	cmp	r2, #0
 80047b2:	dd03      	ble.n	80047bc <_dtoa_r+0xae4>
 80047b4:	2b39      	cmp	r3, #57	; 0x39
 80047b6:	d0ee      	beq.n	8004796 <_dtoa_r+0xabe>
 80047b8:	3301      	adds	r3, #1
 80047ba:	e7c9      	b.n	8004750 <_dtoa_r+0xa78>
 80047bc:	9a02      	ldr	r2, [sp, #8]
 80047be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80047c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80047c4:	428a      	cmp	r2, r1
 80047c6:	d02a      	beq.n	800481e <_dtoa_r+0xb46>
 80047c8:	4651      	mov	r1, sl
 80047ca:	2300      	movs	r3, #0
 80047cc:	220a      	movs	r2, #10
 80047ce:	4628      	mov	r0, r5
 80047d0:	f000 f8fa 	bl	80049c8 <__multadd>
 80047d4:	45b0      	cmp	r8, r6
 80047d6:	4682      	mov	sl, r0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	f04f 020a 	mov.w	r2, #10
 80047e0:	4641      	mov	r1, r8
 80047e2:	4628      	mov	r0, r5
 80047e4:	d107      	bne.n	80047f6 <_dtoa_r+0xb1e>
 80047e6:	f000 f8ef 	bl	80049c8 <__multadd>
 80047ea:	4680      	mov	r8, r0
 80047ec:	4606      	mov	r6, r0
 80047ee:	9b02      	ldr	r3, [sp, #8]
 80047f0:	3301      	adds	r3, #1
 80047f2:	9302      	str	r3, [sp, #8]
 80047f4:	e777      	b.n	80046e6 <_dtoa_r+0xa0e>
 80047f6:	f000 f8e7 	bl	80049c8 <__multadd>
 80047fa:	4631      	mov	r1, r6
 80047fc:	4680      	mov	r8, r0
 80047fe:	2300      	movs	r3, #0
 8004800:	220a      	movs	r2, #10
 8004802:	4628      	mov	r0, r5
 8004804:	f000 f8e0 	bl	80049c8 <__multadd>
 8004808:	4606      	mov	r6, r0
 800480a:	e7f0      	b.n	80047ee <_dtoa_r+0xb16>
 800480c:	f1bb 0f00 	cmp.w	fp, #0
 8004810:	bfcc      	ite	gt
 8004812:	465f      	movgt	r7, fp
 8004814:	2701      	movle	r7, #1
 8004816:	f04f 0800 	mov.w	r8, #0
 800481a:	9a08      	ldr	r2, [sp, #32]
 800481c:	4417      	add	r7, r2
 800481e:	4651      	mov	r1, sl
 8004820:	2201      	movs	r2, #1
 8004822:	4628      	mov	r0, r5
 8004824:	9302      	str	r3, [sp, #8]
 8004826:	f000 fa7b 	bl	8004d20 <__lshift>
 800482a:	4621      	mov	r1, r4
 800482c:	4682      	mov	sl, r0
 800482e:	f000 fae3 	bl	8004df8 <__mcmp>
 8004832:	2800      	cmp	r0, #0
 8004834:	dcb2      	bgt.n	800479c <_dtoa_r+0xac4>
 8004836:	d102      	bne.n	800483e <_dtoa_r+0xb66>
 8004838:	9b02      	ldr	r3, [sp, #8]
 800483a:	07db      	lsls	r3, r3, #31
 800483c:	d4ae      	bmi.n	800479c <_dtoa_r+0xac4>
 800483e:	463b      	mov	r3, r7
 8004840:	461f      	mov	r7, r3
 8004842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004846:	2a30      	cmp	r2, #48	; 0x30
 8004848:	d0fa      	beq.n	8004840 <_dtoa_r+0xb68>
 800484a:	e6fb      	b.n	8004644 <_dtoa_r+0x96c>
 800484c:	9a08      	ldr	r2, [sp, #32]
 800484e:	429a      	cmp	r2, r3
 8004850:	d1a5      	bne.n	800479e <_dtoa_r+0xac6>
 8004852:	2331      	movs	r3, #49	; 0x31
 8004854:	f109 0901 	add.w	r9, r9, #1
 8004858:	7013      	strb	r3, [r2, #0]
 800485a:	e6f3      	b.n	8004644 <_dtoa_r+0x96c>
 800485c:	4b13      	ldr	r3, [pc, #76]	; (80048ac <_dtoa_r+0xbd4>)
 800485e:	f7ff baa7 	b.w	8003db0 <_dtoa_r+0xd8>
 8004862:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004864:	2b00      	cmp	r3, #0
 8004866:	f47f aa80 	bne.w	8003d6a <_dtoa_r+0x92>
 800486a:	4b11      	ldr	r3, [pc, #68]	; (80048b0 <_dtoa_r+0xbd8>)
 800486c:	f7ff baa0 	b.w	8003db0 <_dtoa_r+0xd8>
 8004870:	f1bb 0f00 	cmp.w	fp, #0
 8004874:	dc03      	bgt.n	800487e <_dtoa_r+0xba6>
 8004876:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004878:	2b02      	cmp	r3, #2
 800487a:	f73f aecc 	bgt.w	8004616 <_dtoa_r+0x93e>
 800487e:	9f08      	ldr	r7, [sp, #32]
 8004880:	4621      	mov	r1, r4
 8004882:	4650      	mov	r0, sl
 8004884:	f7ff f998 	bl	8003bb8 <quorem>
 8004888:	9a08      	ldr	r2, [sp, #32]
 800488a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800488e:	f807 3b01 	strb.w	r3, [r7], #1
 8004892:	1aba      	subs	r2, r7, r2
 8004894:	4593      	cmp	fp, r2
 8004896:	ddb9      	ble.n	800480c <_dtoa_r+0xb34>
 8004898:	4651      	mov	r1, sl
 800489a:	2300      	movs	r3, #0
 800489c:	220a      	movs	r2, #10
 800489e:	4628      	mov	r0, r5
 80048a0:	f000 f892 	bl	80049c8 <__multadd>
 80048a4:	4682      	mov	sl, r0
 80048a6:	e7eb      	b.n	8004880 <_dtoa_r+0xba8>
 80048a8:	080061d7 	.word	0x080061d7
 80048ac:	08006130 	.word	0x08006130
 80048b0:	08006154 	.word	0x08006154

080048b4 <_localeconv_r>:
 80048b4:	4800      	ldr	r0, [pc, #0]	; (80048b8 <_localeconv_r+0x4>)
 80048b6:	4770      	bx	lr
 80048b8:	200001a4 	.word	0x200001a4

080048bc <malloc>:
 80048bc:	4b02      	ldr	r3, [pc, #8]	; (80048c8 <malloc+0xc>)
 80048be:	4601      	mov	r1, r0
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	f000 bbfb 	b.w	80050bc <_malloc_r>
 80048c6:	bf00      	nop
 80048c8:	20000050 	.word	0x20000050

080048cc <memchr>:
 80048cc:	4603      	mov	r3, r0
 80048ce:	b510      	push	{r4, lr}
 80048d0:	b2c9      	uxtb	r1, r1
 80048d2:	4402      	add	r2, r0
 80048d4:	4293      	cmp	r3, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	d101      	bne.n	80048de <memchr+0x12>
 80048da:	2000      	movs	r0, #0
 80048dc:	e003      	b.n	80048e6 <memchr+0x1a>
 80048de:	7804      	ldrb	r4, [r0, #0]
 80048e0:	3301      	adds	r3, #1
 80048e2:	428c      	cmp	r4, r1
 80048e4:	d1f6      	bne.n	80048d4 <memchr+0x8>
 80048e6:	bd10      	pop	{r4, pc}

080048e8 <memcpy>:
 80048e8:	440a      	add	r2, r1
 80048ea:	4291      	cmp	r1, r2
 80048ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80048f0:	d100      	bne.n	80048f4 <memcpy+0xc>
 80048f2:	4770      	bx	lr
 80048f4:	b510      	push	{r4, lr}
 80048f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048fa:	4291      	cmp	r1, r2
 80048fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004900:	d1f9      	bne.n	80048f6 <memcpy+0xe>
 8004902:	bd10      	pop	{r4, pc}

08004904 <_Balloc>:
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004908:	4604      	mov	r4, r0
 800490a:	460d      	mov	r5, r1
 800490c:	b976      	cbnz	r6, 800492c <_Balloc+0x28>
 800490e:	2010      	movs	r0, #16
 8004910:	f7ff ffd4 	bl	80048bc <malloc>
 8004914:	4602      	mov	r2, r0
 8004916:	6260      	str	r0, [r4, #36]	; 0x24
 8004918:	b920      	cbnz	r0, 8004924 <_Balloc+0x20>
 800491a:	2166      	movs	r1, #102	; 0x66
 800491c:	4b17      	ldr	r3, [pc, #92]	; (800497c <_Balloc+0x78>)
 800491e:	4818      	ldr	r0, [pc, #96]	; (8004980 <_Balloc+0x7c>)
 8004920:	f000 fd92 	bl	8005448 <__assert_func>
 8004924:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004928:	6006      	str	r6, [r0, #0]
 800492a:	60c6      	str	r6, [r0, #12]
 800492c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800492e:	68f3      	ldr	r3, [r6, #12]
 8004930:	b183      	cbz	r3, 8004954 <_Balloc+0x50>
 8004932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800493a:	b9b8      	cbnz	r0, 800496c <_Balloc+0x68>
 800493c:	2101      	movs	r1, #1
 800493e:	fa01 f605 	lsl.w	r6, r1, r5
 8004942:	1d72      	adds	r2, r6, #5
 8004944:	4620      	mov	r0, r4
 8004946:	0092      	lsls	r2, r2, #2
 8004948:	f000 fb5e 	bl	8005008 <_calloc_r>
 800494c:	b160      	cbz	r0, 8004968 <_Balloc+0x64>
 800494e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004952:	e00e      	b.n	8004972 <_Balloc+0x6e>
 8004954:	2221      	movs	r2, #33	; 0x21
 8004956:	2104      	movs	r1, #4
 8004958:	4620      	mov	r0, r4
 800495a:	f000 fb55 	bl	8005008 <_calloc_r>
 800495e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004960:	60f0      	str	r0, [r6, #12]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e4      	bne.n	8004932 <_Balloc+0x2e>
 8004968:	2000      	movs	r0, #0
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	6802      	ldr	r2, [r0, #0]
 800496e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004972:	2300      	movs	r3, #0
 8004974:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004978:	e7f7      	b.n	800496a <_Balloc+0x66>
 800497a:	bf00      	nop
 800497c:	08006161 	.word	0x08006161
 8004980:	080061e8 	.word	0x080061e8

08004984 <_Bfree>:
 8004984:	b570      	push	{r4, r5, r6, lr}
 8004986:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004988:	4605      	mov	r5, r0
 800498a:	460c      	mov	r4, r1
 800498c:	b976      	cbnz	r6, 80049ac <_Bfree+0x28>
 800498e:	2010      	movs	r0, #16
 8004990:	f7ff ff94 	bl	80048bc <malloc>
 8004994:	4602      	mov	r2, r0
 8004996:	6268      	str	r0, [r5, #36]	; 0x24
 8004998:	b920      	cbnz	r0, 80049a4 <_Bfree+0x20>
 800499a:	218a      	movs	r1, #138	; 0x8a
 800499c:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <_Bfree+0x3c>)
 800499e:	4809      	ldr	r0, [pc, #36]	; (80049c4 <_Bfree+0x40>)
 80049a0:	f000 fd52 	bl	8005448 <__assert_func>
 80049a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80049a8:	6006      	str	r6, [r0, #0]
 80049aa:	60c6      	str	r6, [r0, #12]
 80049ac:	b13c      	cbz	r4, 80049be <_Bfree+0x3a>
 80049ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049b0:	6862      	ldr	r2, [r4, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049b8:	6021      	str	r1, [r4, #0]
 80049ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80049be:	bd70      	pop	{r4, r5, r6, pc}
 80049c0:	08006161 	.word	0x08006161
 80049c4:	080061e8 	.word	0x080061e8

080049c8 <__multadd>:
 80049c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049cc:	4698      	mov	r8, r3
 80049ce:	460c      	mov	r4, r1
 80049d0:	2300      	movs	r3, #0
 80049d2:	690e      	ldr	r6, [r1, #16]
 80049d4:	4607      	mov	r7, r0
 80049d6:	f101 0014 	add.w	r0, r1, #20
 80049da:	6805      	ldr	r5, [r0, #0]
 80049dc:	3301      	adds	r3, #1
 80049de:	b2a9      	uxth	r1, r5
 80049e0:	fb02 8101 	mla	r1, r2, r1, r8
 80049e4:	0c2d      	lsrs	r5, r5, #16
 80049e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80049ea:	fb02 c505 	mla	r5, r2, r5, ip
 80049ee:	b289      	uxth	r1, r1
 80049f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80049f4:	429e      	cmp	r6, r3
 80049f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80049fa:	f840 1b04 	str.w	r1, [r0], #4
 80049fe:	dcec      	bgt.n	80049da <__multadd+0x12>
 8004a00:	f1b8 0f00 	cmp.w	r8, #0
 8004a04:	d022      	beq.n	8004a4c <__multadd+0x84>
 8004a06:	68a3      	ldr	r3, [r4, #8]
 8004a08:	42b3      	cmp	r3, r6
 8004a0a:	dc19      	bgt.n	8004a40 <__multadd+0x78>
 8004a0c:	6861      	ldr	r1, [r4, #4]
 8004a0e:	4638      	mov	r0, r7
 8004a10:	3101      	adds	r1, #1
 8004a12:	f7ff ff77 	bl	8004904 <_Balloc>
 8004a16:	4605      	mov	r5, r0
 8004a18:	b928      	cbnz	r0, 8004a26 <__multadd+0x5e>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	21b5      	movs	r1, #181	; 0xb5
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <__multadd+0x8c>)
 8004a20:	480d      	ldr	r0, [pc, #52]	; (8004a58 <__multadd+0x90>)
 8004a22:	f000 fd11 	bl	8005448 <__assert_func>
 8004a26:	6922      	ldr	r2, [r4, #16]
 8004a28:	f104 010c 	add.w	r1, r4, #12
 8004a2c:	3202      	adds	r2, #2
 8004a2e:	0092      	lsls	r2, r2, #2
 8004a30:	300c      	adds	r0, #12
 8004a32:	f7ff ff59 	bl	80048e8 <memcpy>
 8004a36:	4621      	mov	r1, r4
 8004a38:	4638      	mov	r0, r7
 8004a3a:	f7ff ffa3 	bl	8004984 <_Bfree>
 8004a3e:	462c      	mov	r4, r5
 8004a40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004a44:	3601      	adds	r6, #1
 8004a46:	f8c3 8014 	str.w	r8, [r3, #20]
 8004a4a:	6126      	str	r6, [r4, #16]
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a52:	bf00      	nop
 8004a54:	080061d7 	.word	0x080061d7
 8004a58:	080061e8 	.word	0x080061e8

08004a5c <__hi0bits>:
 8004a5c:	0c02      	lsrs	r2, r0, #16
 8004a5e:	0412      	lsls	r2, r2, #16
 8004a60:	4603      	mov	r3, r0
 8004a62:	b9ca      	cbnz	r2, 8004a98 <__hi0bits+0x3c>
 8004a64:	0403      	lsls	r3, r0, #16
 8004a66:	2010      	movs	r0, #16
 8004a68:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004a6c:	bf04      	itt	eq
 8004a6e:	021b      	lsleq	r3, r3, #8
 8004a70:	3008      	addeq	r0, #8
 8004a72:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004a76:	bf04      	itt	eq
 8004a78:	011b      	lsleq	r3, r3, #4
 8004a7a:	3004      	addeq	r0, #4
 8004a7c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004a80:	bf04      	itt	eq
 8004a82:	009b      	lsleq	r3, r3, #2
 8004a84:	3002      	addeq	r0, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	db05      	blt.n	8004a96 <__hi0bits+0x3a>
 8004a8a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004a8e:	f100 0001 	add.w	r0, r0, #1
 8004a92:	bf08      	it	eq
 8004a94:	2020      	moveq	r0, #32
 8004a96:	4770      	bx	lr
 8004a98:	2000      	movs	r0, #0
 8004a9a:	e7e5      	b.n	8004a68 <__hi0bits+0xc>

08004a9c <__lo0bits>:
 8004a9c:	6803      	ldr	r3, [r0, #0]
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	f013 0007 	ands.w	r0, r3, #7
 8004aa4:	d00b      	beq.n	8004abe <__lo0bits+0x22>
 8004aa6:	07d9      	lsls	r1, r3, #31
 8004aa8:	d422      	bmi.n	8004af0 <__lo0bits+0x54>
 8004aaa:	0798      	lsls	r0, r3, #30
 8004aac:	bf49      	itett	mi
 8004aae:	085b      	lsrmi	r3, r3, #1
 8004ab0:	089b      	lsrpl	r3, r3, #2
 8004ab2:	2001      	movmi	r0, #1
 8004ab4:	6013      	strmi	r3, [r2, #0]
 8004ab6:	bf5c      	itt	pl
 8004ab8:	2002      	movpl	r0, #2
 8004aba:	6013      	strpl	r3, [r2, #0]
 8004abc:	4770      	bx	lr
 8004abe:	b299      	uxth	r1, r3
 8004ac0:	b909      	cbnz	r1, 8004ac6 <__lo0bits+0x2a>
 8004ac2:	2010      	movs	r0, #16
 8004ac4:	0c1b      	lsrs	r3, r3, #16
 8004ac6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004aca:	bf04      	itt	eq
 8004acc:	0a1b      	lsreq	r3, r3, #8
 8004ace:	3008      	addeq	r0, #8
 8004ad0:	0719      	lsls	r1, r3, #28
 8004ad2:	bf04      	itt	eq
 8004ad4:	091b      	lsreq	r3, r3, #4
 8004ad6:	3004      	addeq	r0, #4
 8004ad8:	0799      	lsls	r1, r3, #30
 8004ada:	bf04      	itt	eq
 8004adc:	089b      	lsreq	r3, r3, #2
 8004ade:	3002      	addeq	r0, #2
 8004ae0:	07d9      	lsls	r1, r3, #31
 8004ae2:	d403      	bmi.n	8004aec <__lo0bits+0x50>
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	f100 0001 	add.w	r0, r0, #1
 8004aea:	d003      	beq.n	8004af4 <__lo0bits+0x58>
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	4770      	bx	lr
 8004af0:	2000      	movs	r0, #0
 8004af2:	4770      	bx	lr
 8004af4:	2020      	movs	r0, #32
 8004af6:	4770      	bx	lr

08004af8 <__i2b>:
 8004af8:	b510      	push	{r4, lr}
 8004afa:	460c      	mov	r4, r1
 8004afc:	2101      	movs	r1, #1
 8004afe:	f7ff ff01 	bl	8004904 <_Balloc>
 8004b02:	4602      	mov	r2, r0
 8004b04:	b928      	cbnz	r0, 8004b12 <__i2b+0x1a>
 8004b06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004b0a:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <__i2b+0x24>)
 8004b0c:	4804      	ldr	r0, [pc, #16]	; (8004b20 <__i2b+0x28>)
 8004b0e:	f000 fc9b 	bl	8005448 <__assert_func>
 8004b12:	2301      	movs	r3, #1
 8004b14:	6144      	str	r4, [r0, #20]
 8004b16:	6103      	str	r3, [r0, #16]
 8004b18:	bd10      	pop	{r4, pc}
 8004b1a:	bf00      	nop
 8004b1c:	080061d7 	.word	0x080061d7
 8004b20:	080061e8 	.word	0x080061e8

08004b24 <__multiply>:
 8004b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b28:	4614      	mov	r4, r2
 8004b2a:	690a      	ldr	r2, [r1, #16]
 8004b2c:	6923      	ldr	r3, [r4, #16]
 8004b2e:	460d      	mov	r5, r1
 8004b30:	429a      	cmp	r2, r3
 8004b32:	bfbe      	ittt	lt
 8004b34:	460b      	movlt	r3, r1
 8004b36:	4625      	movlt	r5, r4
 8004b38:	461c      	movlt	r4, r3
 8004b3a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004b3e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004b42:	68ab      	ldr	r3, [r5, #8]
 8004b44:	6869      	ldr	r1, [r5, #4]
 8004b46:	eb0a 0709 	add.w	r7, sl, r9
 8004b4a:	42bb      	cmp	r3, r7
 8004b4c:	b085      	sub	sp, #20
 8004b4e:	bfb8      	it	lt
 8004b50:	3101      	addlt	r1, #1
 8004b52:	f7ff fed7 	bl	8004904 <_Balloc>
 8004b56:	b930      	cbnz	r0, 8004b66 <__multiply+0x42>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	f240 115d 	movw	r1, #349	; 0x15d
 8004b5e:	4b41      	ldr	r3, [pc, #260]	; (8004c64 <__multiply+0x140>)
 8004b60:	4841      	ldr	r0, [pc, #260]	; (8004c68 <__multiply+0x144>)
 8004b62:	f000 fc71 	bl	8005448 <__assert_func>
 8004b66:	f100 0614 	add.w	r6, r0, #20
 8004b6a:	4633      	mov	r3, r6
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004b72:	4543      	cmp	r3, r8
 8004b74:	d31e      	bcc.n	8004bb4 <__multiply+0x90>
 8004b76:	f105 0c14 	add.w	ip, r5, #20
 8004b7a:	f104 0314 	add.w	r3, r4, #20
 8004b7e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004b82:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004b86:	9202      	str	r2, [sp, #8]
 8004b88:	ebac 0205 	sub.w	r2, ip, r5
 8004b8c:	3a15      	subs	r2, #21
 8004b8e:	f022 0203 	bic.w	r2, r2, #3
 8004b92:	3204      	adds	r2, #4
 8004b94:	f105 0115 	add.w	r1, r5, #21
 8004b98:	458c      	cmp	ip, r1
 8004b9a:	bf38      	it	cc
 8004b9c:	2204      	movcc	r2, #4
 8004b9e:	9201      	str	r2, [sp, #4]
 8004ba0:	9a02      	ldr	r2, [sp, #8]
 8004ba2:	9303      	str	r3, [sp, #12]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d808      	bhi.n	8004bba <__multiply+0x96>
 8004ba8:	2f00      	cmp	r7, #0
 8004baa:	dc55      	bgt.n	8004c58 <__multiply+0x134>
 8004bac:	6107      	str	r7, [r0, #16]
 8004bae:	b005      	add	sp, #20
 8004bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb4:	f843 2b04 	str.w	r2, [r3], #4
 8004bb8:	e7db      	b.n	8004b72 <__multiply+0x4e>
 8004bba:	f8b3 a000 	ldrh.w	sl, [r3]
 8004bbe:	f1ba 0f00 	cmp.w	sl, #0
 8004bc2:	d020      	beq.n	8004c06 <__multiply+0xe2>
 8004bc4:	46b1      	mov	r9, r6
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f105 0e14 	add.w	lr, r5, #20
 8004bcc:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004bd0:	f8d9 b000 	ldr.w	fp, [r9]
 8004bd4:	b2a1      	uxth	r1, r4
 8004bd6:	fa1f fb8b 	uxth.w	fp, fp
 8004bda:	fb0a b101 	mla	r1, sl, r1, fp
 8004bde:	4411      	add	r1, r2
 8004be0:	f8d9 2000 	ldr.w	r2, [r9]
 8004be4:	0c24      	lsrs	r4, r4, #16
 8004be6:	0c12      	lsrs	r2, r2, #16
 8004be8:	fb0a 2404 	mla	r4, sl, r4, r2
 8004bec:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004bf0:	b289      	uxth	r1, r1
 8004bf2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004bf6:	45f4      	cmp	ip, lr
 8004bf8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004bfc:	f849 1b04 	str.w	r1, [r9], #4
 8004c00:	d8e4      	bhi.n	8004bcc <__multiply+0xa8>
 8004c02:	9901      	ldr	r1, [sp, #4]
 8004c04:	5072      	str	r2, [r6, r1]
 8004c06:	9a03      	ldr	r2, [sp, #12]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004c0e:	f1b9 0f00 	cmp.w	r9, #0
 8004c12:	d01f      	beq.n	8004c54 <__multiply+0x130>
 8004c14:	46b6      	mov	lr, r6
 8004c16:	f04f 0a00 	mov.w	sl, #0
 8004c1a:	6834      	ldr	r4, [r6, #0]
 8004c1c:	f105 0114 	add.w	r1, r5, #20
 8004c20:	880a      	ldrh	r2, [r1, #0]
 8004c22:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004c26:	b2a4      	uxth	r4, r4
 8004c28:	fb09 b202 	mla	r2, r9, r2, fp
 8004c2c:	4492      	add	sl, r2
 8004c2e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004c32:	f84e 4b04 	str.w	r4, [lr], #4
 8004c36:	f851 4b04 	ldr.w	r4, [r1], #4
 8004c3a:	f8be 2000 	ldrh.w	r2, [lr]
 8004c3e:	0c24      	lsrs	r4, r4, #16
 8004c40:	fb09 2404 	mla	r4, r9, r4, r2
 8004c44:	458c      	cmp	ip, r1
 8004c46:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004c4a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004c4e:	d8e7      	bhi.n	8004c20 <__multiply+0xfc>
 8004c50:	9a01      	ldr	r2, [sp, #4]
 8004c52:	50b4      	str	r4, [r6, r2]
 8004c54:	3604      	adds	r6, #4
 8004c56:	e7a3      	b.n	8004ba0 <__multiply+0x7c>
 8004c58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1a5      	bne.n	8004bac <__multiply+0x88>
 8004c60:	3f01      	subs	r7, #1
 8004c62:	e7a1      	b.n	8004ba8 <__multiply+0x84>
 8004c64:	080061d7 	.word	0x080061d7
 8004c68:	080061e8 	.word	0x080061e8

08004c6c <__pow5mult>:
 8004c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c70:	4615      	mov	r5, r2
 8004c72:	f012 0203 	ands.w	r2, r2, #3
 8004c76:	4606      	mov	r6, r0
 8004c78:	460f      	mov	r7, r1
 8004c7a:	d007      	beq.n	8004c8c <__pow5mult+0x20>
 8004c7c:	4c25      	ldr	r4, [pc, #148]	; (8004d14 <__pow5mult+0xa8>)
 8004c7e:	3a01      	subs	r2, #1
 8004c80:	2300      	movs	r3, #0
 8004c82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004c86:	f7ff fe9f 	bl	80049c8 <__multadd>
 8004c8a:	4607      	mov	r7, r0
 8004c8c:	10ad      	asrs	r5, r5, #2
 8004c8e:	d03d      	beq.n	8004d0c <__pow5mult+0xa0>
 8004c90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004c92:	b97c      	cbnz	r4, 8004cb4 <__pow5mult+0x48>
 8004c94:	2010      	movs	r0, #16
 8004c96:	f7ff fe11 	bl	80048bc <malloc>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	6270      	str	r0, [r6, #36]	; 0x24
 8004c9e:	b928      	cbnz	r0, 8004cac <__pow5mult+0x40>
 8004ca0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004ca4:	4b1c      	ldr	r3, [pc, #112]	; (8004d18 <__pow5mult+0xac>)
 8004ca6:	481d      	ldr	r0, [pc, #116]	; (8004d1c <__pow5mult+0xb0>)
 8004ca8:	f000 fbce 	bl	8005448 <__assert_func>
 8004cac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004cb0:	6004      	str	r4, [r0, #0]
 8004cb2:	60c4      	str	r4, [r0, #12]
 8004cb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004cb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004cbc:	b94c      	cbnz	r4, 8004cd2 <__pow5mult+0x66>
 8004cbe:	f240 2171 	movw	r1, #625	; 0x271
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	f7ff ff18 	bl	8004af8 <__i2b>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	4604      	mov	r4, r0
 8004ccc:	f8c8 0008 	str.w	r0, [r8, #8]
 8004cd0:	6003      	str	r3, [r0, #0]
 8004cd2:	f04f 0900 	mov.w	r9, #0
 8004cd6:	07eb      	lsls	r3, r5, #31
 8004cd8:	d50a      	bpl.n	8004cf0 <__pow5mult+0x84>
 8004cda:	4639      	mov	r1, r7
 8004cdc:	4622      	mov	r2, r4
 8004cde:	4630      	mov	r0, r6
 8004ce0:	f7ff ff20 	bl	8004b24 <__multiply>
 8004ce4:	4680      	mov	r8, r0
 8004ce6:	4639      	mov	r1, r7
 8004ce8:	4630      	mov	r0, r6
 8004cea:	f7ff fe4b 	bl	8004984 <_Bfree>
 8004cee:	4647      	mov	r7, r8
 8004cf0:	106d      	asrs	r5, r5, #1
 8004cf2:	d00b      	beq.n	8004d0c <__pow5mult+0xa0>
 8004cf4:	6820      	ldr	r0, [r4, #0]
 8004cf6:	b938      	cbnz	r0, 8004d08 <__pow5mult+0x9c>
 8004cf8:	4622      	mov	r2, r4
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	f7ff ff11 	bl	8004b24 <__multiply>
 8004d02:	6020      	str	r0, [r4, #0]
 8004d04:	f8c0 9000 	str.w	r9, [r0]
 8004d08:	4604      	mov	r4, r0
 8004d0a:	e7e4      	b.n	8004cd6 <__pow5mult+0x6a>
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d12:	bf00      	nop
 8004d14:	08006338 	.word	0x08006338
 8004d18:	08006161 	.word	0x08006161
 8004d1c:	080061e8 	.word	0x080061e8

08004d20 <__lshift>:
 8004d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d24:	460c      	mov	r4, r1
 8004d26:	4607      	mov	r7, r0
 8004d28:	4691      	mov	r9, r2
 8004d2a:	6923      	ldr	r3, [r4, #16]
 8004d2c:	6849      	ldr	r1, [r1, #4]
 8004d2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004d32:	68a3      	ldr	r3, [r4, #8]
 8004d34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004d38:	f108 0601 	add.w	r6, r8, #1
 8004d3c:	42b3      	cmp	r3, r6
 8004d3e:	db0b      	blt.n	8004d58 <__lshift+0x38>
 8004d40:	4638      	mov	r0, r7
 8004d42:	f7ff fddf 	bl	8004904 <_Balloc>
 8004d46:	4605      	mov	r5, r0
 8004d48:	b948      	cbnz	r0, 8004d5e <__lshift+0x3e>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004d50:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <__lshift+0xd0>)
 8004d52:	4828      	ldr	r0, [pc, #160]	; (8004df4 <__lshift+0xd4>)
 8004d54:	f000 fb78 	bl	8005448 <__assert_func>
 8004d58:	3101      	adds	r1, #1
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	e7ee      	b.n	8004d3c <__lshift+0x1c>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f100 0114 	add.w	r1, r0, #20
 8004d64:	f100 0210 	add.w	r2, r0, #16
 8004d68:	4618      	mov	r0, r3
 8004d6a:	4553      	cmp	r3, sl
 8004d6c:	db33      	blt.n	8004dd6 <__lshift+0xb6>
 8004d6e:	6920      	ldr	r0, [r4, #16]
 8004d70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d74:	f104 0314 	add.w	r3, r4, #20
 8004d78:	f019 091f 	ands.w	r9, r9, #31
 8004d7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004d80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004d84:	d02b      	beq.n	8004dde <__lshift+0xbe>
 8004d86:	468a      	mov	sl, r1
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f1c9 0e20 	rsb	lr, r9, #32
 8004d8e:	6818      	ldr	r0, [r3, #0]
 8004d90:	fa00 f009 	lsl.w	r0, r0, r9
 8004d94:	4302      	orrs	r2, r0
 8004d96:	f84a 2b04 	str.w	r2, [sl], #4
 8004d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d9e:	459c      	cmp	ip, r3
 8004da0:	fa22 f20e 	lsr.w	r2, r2, lr
 8004da4:	d8f3      	bhi.n	8004d8e <__lshift+0x6e>
 8004da6:	ebac 0304 	sub.w	r3, ip, r4
 8004daa:	3b15      	subs	r3, #21
 8004dac:	f023 0303 	bic.w	r3, r3, #3
 8004db0:	3304      	adds	r3, #4
 8004db2:	f104 0015 	add.w	r0, r4, #21
 8004db6:	4584      	cmp	ip, r0
 8004db8:	bf38      	it	cc
 8004dba:	2304      	movcc	r3, #4
 8004dbc:	50ca      	str	r2, [r1, r3]
 8004dbe:	b10a      	cbz	r2, 8004dc4 <__lshift+0xa4>
 8004dc0:	f108 0602 	add.w	r6, r8, #2
 8004dc4:	3e01      	subs	r6, #1
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	4621      	mov	r1, r4
 8004dca:	612e      	str	r6, [r5, #16]
 8004dcc:	f7ff fdda 	bl	8004984 <_Bfree>
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8004dda:	3301      	adds	r3, #1
 8004ddc:	e7c5      	b.n	8004d6a <__lshift+0x4a>
 8004dde:	3904      	subs	r1, #4
 8004de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004de4:	459c      	cmp	ip, r3
 8004de6:	f841 2f04 	str.w	r2, [r1, #4]!
 8004dea:	d8f9      	bhi.n	8004de0 <__lshift+0xc0>
 8004dec:	e7ea      	b.n	8004dc4 <__lshift+0xa4>
 8004dee:	bf00      	nop
 8004df0:	080061d7 	.word	0x080061d7
 8004df4:	080061e8 	.word	0x080061e8

08004df8 <__mcmp>:
 8004df8:	4603      	mov	r3, r0
 8004dfa:	690a      	ldr	r2, [r1, #16]
 8004dfc:	6900      	ldr	r0, [r0, #16]
 8004dfe:	b530      	push	{r4, r5, lr}
 8004e00:	1a80      	subs	r0, r0, r2
 8004e02:	d10d      	bne.n	8004e20 <__mcmp+0x28>
 8004e04:	3314      	adds	r3, #20
 8004e06:	3114      	adds	r1, #20
 8004e08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004e0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004e10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004e14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004e18:	4295      	cmp	r5, r2
 8004e1a:	d002      	beq.n	8004e22 <__mcmp+0x2a>
 8004e1c:	d304      	bcc.n	8004e28 <__mcmp+0x30>
 8004e1e:	2001      	movs	r0, #1
 8004e20:	bd30      	pop	{r4, r5, pc}
 8004e22:	42a3      	cmp	r3, r4
 8004e24:	d3f4      	bcc.n	8004e10 <__mcmp+0x18>
 8004e26:	e7fb      	b.n	8004e20 <__mcmp+0x28>
 8004e28:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2c:	e7f8      	b.n	8004e20 <__mcmp+0x28>
	...

08004e30 <__mdiff>:
 8004e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e34:	460c      	mov	r4, r1
 8004e36:	4606      	mov	r6, r0
 8004e38:	4611      	mov	r1, r2
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	4692      	mov	sl, r2
 8004e3e:	f7ff ffdb 	bl	8004df8 <__mcmp>
 8004e42:	1e05      	subs	r5, r0, #0
 8004e44:	d111      	bne.n	8004e6a <__mdiff+0x3a>
 8004e46:	4629      	mov	r1, r5
 8004e48:	4630      	mov	r0, r6
 8004e4a:	f7ff fd5b 	bl	8004904 <_Balloc>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	b928      	cbnz	r0, 8004e5e <__mdiff+0x2e>
 8004e52:	f240 2132 	movw	r1, #562	; 0x232
 8004e56:	4b3c      	ldr	r3, [pc, #240]	; (8004f48 <__mdiff+0x118>)
 8004e58:	483c      	ldr	r0, [pc, #240]	; (8004f4c <__mdiff+0x11c>)
 8004e5a:	f000 faf5 	bl	8005448 <__assert_func>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004e64:	4610      	mov	r0, r2
 8004e66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6a:	bfa4      	itt	ge
 8004e6c:	4653      	movge	r3, sl
 8004e6e:	46a2      	movge	sl, r4
 8004e70:	4630      	mov	r0, r6
 8004e72:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004e76:	bfa6      	itte	ge
 8004e78:	461c      	movge	r4, r3
 8004e7a:	2500      	movge	r5, #0
 8004e7c:	2501      	movlt	r5, #1
 8004e7e:	f7ff fd41 	bl	8004904 <_Balloc>
 8004e82:	4602      	mov	r2, r0
 8004e84:	b918      	cbnz	r0, 8004e8e <__mdiff+0x5e>
 8004e86:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004e8a:	4b2f      	ldr	r3, [pc, #188]	; (8004f48 <__mdiff+0x118>)
 8004e8c:	e7e4      	b.n	8004e58 <__mdiff+0x28>
 8004e8e:	f100 0814 	add.w	r8, r0, #20
 8004e92:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004e96:	60c5      	str	r5, [r0, #12]
 8004e98:	f04f 0c00 	mov.w	ip, #0
 8004e9c:	f10a 0514 	add.w	r5, sl, #20
 8004ea0:	f10a 0010 	add.w	r0, sl, #16
 8004ea4:	46c2      	mov	sl, r8
 8004ea6:	6926      	ldr	r6, [r4, #16]
 8004ea8:	f104 0914 	add.w	r9, r4, #20
 8004eac:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004eb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004eb4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004eb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ebc:	fa1f f18b 	uxth.w	r1, fp
 8004ec0:	4461      	add	r1, ip
 8004ec2:	fa1f fc83 	uxth.w	ip, r3
 8004ec6:	0c1b      	lsrs	r3, r3, #16
 8004ec8:	eba1 010c 	sub.w	r1, r1, ip
 8004ecc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004ed0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004ed4:	b289      	uxth	r1, r1
 8004ed6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004eda:	454e      	cmp	r6, r9
 8004edc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004ee0:	f84a 3b04 	str.w	r3, [sl], #4
 8004ee4:	d8e6      	bhi.n	8004eb4 <__mdiff+0x84>
 8004ee6:	1b33      	subs	r3, r6, r4
 8004ee8:	3b15      	subs	r3, #21
 8004eea:	f023 0303 	bic.w	r3, r3, #3
 8004eee:	3415      	adds	r4, #21
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	42a6      	cmp	r6, r4
 8004ef4:	bf38      	it	cc
 8004ef6:	2304      	movcc	r3, #4
 8004ef8:	441d      	add	r5, r3
 8004efa:	4443      	add	r3, r8
 8004efc:	461e      	mov	r6, r3
 8004efe:	462c      	mov	r4, r5
 8004f00:	4574      	cmp	r4, lr
 8004f02:	d30e      	bcc.n	8004f22 <__mdiff+0xf2>
 8004f04:	f10e 0103 	add.w	r1, lr, #3
 8004f08:	1b49      	subs	r1, r1, r5
 8004f0a:	f021 0103 	bic.w	r1, r1, #3
 8004f0e:	3d03      	subs	r5, #3
 8004f10:	45ae      	cmp	lr, r5
 8004f12:	bf38      	it	cc
 8004f14:	2100      	movcc	r1, #0
 8004f16:	4419      	add	r1, r3
 8004f18:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004f1c:	b18b      	cbz	r3, 8004f42 <__mdiff+0x112>
 8004f1e:	6117      	str	r7, [r2, #16]
 8004f20:	e7a0      	b.n	8004e64 <__mdiff+0x34>
 8004f22:	f854 8b04 	ldr.w	r8, [r4], #4
 8004f26:	fa1f f188 	uxth.w	r1, r8
 8004f2a:	4461      	add	r1, ip
 8004f2c:	1408      	asrs	r0, r1, #16
 8004f2e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004f32:	b289      	uxth	r1, r1
 8004f34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004f38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004f3c:	f846 1b04 	str.w	r1, [r6], #4
 8004f40:	e7de      	b.n	8004f00 <__mdiff+0xd0>
 8004f42:	3f01      	subs	r7, #1
 8004f44:	e7e8      	b.n	8004f18 <__mdiff+0xe8>
 8004f46:	bf00      	nop
 8004f48:	080061d7 	.word	0x080061d7
 8004f4c:	080061e8 	.word	0x080061e8

08004f50 <__d2b>:
 8004f50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004f54:	2101      	movs	r1, #1
 8004f56:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004f5a:	4690      	mov	r8, r2
 8004f5c:	461d      	mov	r5, r3
 8004f5e:	f7ff fcd1 	bl	8004904 <_Balloc>
 8004f62:	4604      	mov	r4, r0
 8004f64:	b930      	cbnz	r0, 8004f74 <__d2b+0x24>
 8004f66:	4602      	mov	r2, r0
 8004f68:	f240 310a 	movw	r1, #778	; 0x30a
 8004f6c:	4b24      	ldr	r3, [pc, #144]	; (8005000 <__d2b+0xb0>)
 8004f6e:	4825      	ldr	r0, [pc, #148]	; (8005004 <__d2b+0xb4>)
 8004f70:	f000 fa6a 	bl	8005448 <__assert_func>
 8004f74:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004f78:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004f7c:	bb2d      	cbnz	r5, 8004fca <__d2b+0x7a>
 8004f7e:	9301      	str	r3, [sp, #4]
 8004f80:	f1b8 0300 	subs.w	r3, r8, #0
 8004f84:	d026      	beq.n	8004fd4 <__d2b+0x84>
 8004f86:	4668      	mov	r0, sp
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	f7ff fd87 	bl	8004a9c <__lo0bits>
 8004f8e:	9900      	ldr	r1, [sp, #0]
 8004f90:	b1f0      	cbz	r0, 8004fd0 <__d2b+0x80>
 8004f92:	9a01      	ldr	r2, [sp, #4]
 8004f94:	f1c0 0320 	rsb	r3, r0, #32
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	40c2      	lsrs	r2, r0
 8004fa0:	6163      	str	r3, [r4, #20]
 8004fa2:	9201      	str	r2, [sp, #4]
 8004fa4:	9b01      	ldr	r3, [sp, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	bf14      	ite	ne
 8004faa:	2102      	movne	r1, #2
 8004fac:	2101      	moveq	r1, #1
 8004fae:	61a3      	str	r3, [r4, #24]
 8004fb0:	6121      	str	r1, [r4, #16]
 8004fb2:	b1c5      	cbz	r5, 8004fe6 <__d2b+0x96>
 8004fb4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004fb8:	4405      	add	r5, r0
 8004fba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004fbe:	603d      	str	r5, [r7, #0]
 8004fc0:	6030      	str	r0, [r6, #0]
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	b002      	add	sp, #8
 8004fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fce:	e7d6      	b.n	8004f7e <__d2b+0x2e>
 8004fd0:	6161      	str	r1, [r4, #20]
 8004fd2:	e7e7      	b.n	8004fa4 <__d2b+0x54>
 8004fd4:	a801      	add	r0, sp, #4
 8004fd6:	f7ff fd61 	bl	8004a9c <__lo0bits>
 8004fda:	2101      	movs	r1, #1
 8004fdc:	9b01      	ldr	r3, [sp, #4]
 8004fde:	6121      	str	r1, [r4, #16]
 8004fe0:	6163      	str	r3, [r4, #20]
 8004fe2:	3020      	adds	r0, #32
 8004fe4:	e7e5      	b.n	8004fb2 <__d2b+0x62>
 8004fe6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004fea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004fee:	6038      	str	r0, [r7, #0]
 8004ff0:	6918      	ldr	r0, [r3, #16]
 8004ff2:	f7ff fd33 	bl	8004a5c <__hi0bits>
 8004ff6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004ffa:	6031      	str	r1, [r6, #0]
 8004ffc:	e7e1      	b.n	8004fc2 <__d2b+0x72>
 8004ffe:	bf00      	nop
 8005000:	080061d7 	.word	0x080061d7
 8005004:	080061e8 	.word	0x080061e8

08005008 <_calloc_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	fb02 f501 	mul.w	r5, r2, r1
 800500e:	4629      	mov	r1, r5
 8005010:	f000 f854 	bl	80050bc <_malloc_r>
 8005014:	4604      	mov	r4, r0
 8005016:	b118      	cbz	r0, 8005020 <_calloc_r+0x18>
 8005018:	462a      	mov	r2, r5
 800501a:	2100      	movs	r1, #0
 800501c:	f7fe f930 	bl	8003280 <memset>
 8005020:	4620      	mov	r0, r4
 8005022:	bd38      	pop	{r3, r4, r5, pc}

08005024 <_free_r>:
 8005024:	b538      	push	{r3, r4, r5, lr}
 8005026:	4605      	mov	r5, r0
 8005028:	2900      	cmp	r1, #0
 800502a:	d043      	beq.n	80050b4 <_free_r+0x90>
 800502c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005030:	1f0c      	subs	r4, r1, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	bfb8      	it	lt
 8005036:	18e4      	addlt	r4, r4, r3
 8005038:	f000 fa62 	bl	8005500 <__malloc_lock>
 800503c:	4a1e      	ldr	r2, [pc, #120]	; (80050b8 <_free_r+0x94>)
 800503e:	6813      	ldr	r3, [r2, #0]
 8005040:	4610      	mov	r0, r2
 8005042:	b933      	cbnz	r3, 8005052 <_free_r+0x2e>
 8005044:	6063      	str	r3, [r4, #4]
 8005046:	6014      	str	r4, [r2, #0]
 8005048:	4628      	mov	r0, r5
 800504a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800504e:	f000 ba5d 	b.w	800550c <__malloc_unlock>
 8005052:	42a3      	cmp	r3, r4
 8005054:	d90a      	bls.n	800506c <_free_r+0x48>
 8005056:	6821      	ldr	r1, [r4, #0]
 8005058:	1862      	adds	r2, r4, r1
 800505a:	4293      	cmp	r3, r2
 800505c:	bf01      	itttt	eq
 800505e:	681a      	ldreq	r2, [r3, #0]
 8005060:	685b      	ldreq	r3, [r3, #4]
 8005062:	1852      	addeq	r2, r2, r1
 8005064:	6022      	streq	r2, [r4, #0]
 8005066:	6063      	str	r3, [r4, #4]
 8005068:	6004      	str	r4, [r0, #0]
 800506a:	e7ed      	b.n	8005048 <_free_r+0x24>
 800506c:	461a      	mov	r2, r3
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	b10b      	cbz	r3, 8005076 <_free_r+0x52>
 8005072:	42a3      	cmp	r3, r4
 8005074:	d9fa      	bls.n	800506c <_free_r+0x48>
 8005076:	6811      	ldr	r1, [r2, #0]
 8005078:	1850      	adds	r0, r2, r1
 800507a:	42a0      	cmp	r0, r4
 800507c:	d10b      	bne.n	8005096 <_free_r+0x72>
 800507e:	6820      	ldr	r0, [r4, #0]
 8005080:	4401      	add	r1, r0
 8005082:	1850      	adds	r0, r2, r1
 8005084:	4283      	cmp	r3, r0
 8005086:	6011      	str	r1, [r2, #0]
 8005088:	d1de      	bne.n	8005048 <_free_r+0x24>
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4401      	add	r1, r0
 8005090:	6011      	str	r1, [r2, #0]
 8005092:	6053      	str	r3, [r2, #4]
 8005094:	e7d8      	b.n	8005048 <_free_r+0x24>
 8005096:	d902      	bls.n	800509e <_free_r+0x7a>
 8005098:	230c      	movs	r3, #12
 800509a:	602b      	str	r3, [r5, #0]
 800509c:	e7d4      	b.n	8005048 <_free_r+0x24>
 800509e:	6820      	ldr	r0, [r4, #0]
 80050a0:	1821      	adds	r1, r4, r0
 80050a2:	428b      	cmp	r3, r1
 80050a4:	bf01      	itttt	eq
 80050a6:	6819      	ldreq	r1, [r3, #0]
 80050a8:	685b      	ldreq	r3, [r3, #4]
 80050aa:	1809      	addeq	r1, r1, r0
 80050ac:	6021      	streq	r1, [r4, #0]
 80050ae:	6063      	str	r3, [r4, #4]
 80050b0:	6054      	str	r4, [r2, #4]
 80050b2:	e7c9      	b.n	8005048 <_free_r+0x24>
 80050b4:	bd38      	pop	{r3, r4, r5, pc}
 80050b6:	bf00      	nop
 80050b8:	20000244 	.word	0x20000244

080050bc <_malloc_r>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	1ccd      	adds	r5, r1, #3
 80050c0:	f025 0503 	bic.w	r5, r5, #3
 80050c4:	3508      	adds	r5, #8
 80050c6:	2d0c      	cmp	r5, #12
 80050c8:	bf38      	it	cc
 80050ca:	250c      	movcc	r5, #12
 80050cc:	2d00      	cmp	r5, #0
 80050ce:	4606      	mov	r6, r0
 80050d0:	db01      	blt.n	80050d6 <_malloc_r+0x1a>
 80050d2:	42a9      	cmp	r1, r5
 80050d4:	d903      	bls.n	80050de <_malloc_r+0x22>
 80050d6:	230c      	movs	r3, #12
 80050d8:	6033      	str	r3, [r6, #0]
 80050da:	2000      	movs	r0, #0
 80050dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050de:	f000 fa0f 	bl	8005500 <__malloc_lock>
 80050e2:	4921      	ldr	r1, [pc, #132]	; (8005168 <_malloc_r+0xac>)
 80050e4:	680a      	ldr	r2, [r1, #0]
 80050e6:	4614      	mov	r4, r2
 80050e8:	b99c      	cbnz	r4, 8005112 <_malloc_r+0x56>
 80050ea:	4f20      	ldr	r7, [pc, #128]	; (800516c <_malloc_r+0xb0>)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	b923      	cbnz	r3, 80050fa <_malloc_r+0x3e>
 80050f0:	4621      	mov	r1, r4
 80050f2:	4630      	mov	r0, r6
 80050f4:	f000 f998 	bl	8005428 <_sbrk_r>
 80050f8:	6038      	str	r0, [r7, #0]
 80050fa:	4629      	mov	r1, r5
 80050fc:	4630      	mov	r0, r6
 80050fe:	f000 f993 	bl	8005428 <_sbrk_r>
 8005102:	1c43      	adds	r3, r0, #1
 8005104:	d123      	bne.n	800514e <_malloc_r+0x92>
 8005106:	230c      	movs	r3, #12
 8005108:	4630      	mov	r0, r6
 800510a:	6033      	str	r3, [r6, #0]
 800510c:	f000 f9fe 	bl	800550c <__malloc_unlock>
 8005110:	e7e3      	b.n	80050da <_malloc_r+0x1e>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	1b5b      	subs	r3, r3, r5
 8005116:	d417      	bmi.n	8005148 <_malloc_r+0x8c>
 8005118:	2b0b      	cmp	r3, #11
 800511a:	d903      	bls.n	8005124 <_malloc_r+0x68>
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	441c      	add	r4, r3
 8005120:	6025      	str	r5, [r4, #0]
 8005122:	e004      	b.n	800512e <_malloc_r+0x72>
 8005124:	6863      	ldr	r3, [r4, #4]
 8005126:	42a2      	cmp	r2, r4
 8005128:	bf0c      	ite	eq
 800512a:	600b      	streq	r3, [r1, #0]
 800512c:	6053      	strne	r3, [r2, #4]
 800512e:	4630      	mov	r0, r6
 8005130:	f000 f9ec 	bl	800550c <__malloc_unlock>
 8005134:	f104 000b 	add.w	r0, r4, #11
 8005138:	1d23      	adds	r3, r4, #4
 800513a:	f020 0007 	bic.w	r0, r0, #7
 800513e:	1ac2      	subs	r2, r0, r3
 8005140:	d0cc      	beq.n	80050dc <_malloc_r+0x20>
 8005142:	1a1b      	subs	r3, r3, r0
 8005144:	50a3      	str	r3, [r4, r2]
 8005146:	e7c9      	b.n	80050dc <_malloc_r+0x20>
 8005148:	4622      	mov	r2, r4
 800514a:	6864      	ldr	r4, [r4, #4]
 800514c:	e7cc      	b.n	80050e8 <_malloc_r+0x2c>
 800514e:	1cc4      	adds	r4, r0, #3
 8005150:	f024 0403 	bic.w	r4, r4, #3
 8005154:	42a0      	cmp	r0, r4
 8005156:	d0e3      	beq.n	8005120 <_malloc_r+0x64>
 8005158:	1a21      	subs	r1, r4, r0
 800515a:	4630      	mov	r0, r6
 800515c:	f000 f964 	bl	8005428 <_sbrk_r>
 8005160:	3001      	adds	r0, #1
 8005162:	d1dd      	bne.n	8005120 <_malloc_r+0x64>
 8005164:	e7cf      	b.n	8005106 <_malloc_r+0x4a>
 8005166:	bf00      	nop
 8005168:	20000244 	.word	0x20000244
 800516c:	20000248 	.word	0x20000248

08005170 <__ssputs_r>:
 8005170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005174:	688e      	ldr	r6, [r1, #8]
 8005176:	4682      	mov	sl, r0
 8005178:	429e      	cmp	r6, r3
 800517a:	460c      	mov	r4, r1
 800517c:	4690      	mov	r8, r2
 800517e:	461f      	mov	r7, r3
 8005180:	d838      	bhi.n	80051f4 <__ssputs_r+0x84>
 8005182:	898a      	ldrh	r2, [r1, #12]
 8005184:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005188:	d032      	beq.n	80051f0 <__ssputs_r+0x80>
 800518a:	6825      	ldr	r5, [r4, #0]
 800518c:	6909      	ldr	r1, [r1, #16]
 800518e:	3301      	adds	r3, #1
 8005190:	eba5 0901 	sub.w	r9, r5, r1
 8005194:	6965      	ldr	r5, [r4, #20]
 8005196:	444b      	add	r3, r9
 8005198:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800519c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051a0:	106d      	asrs	r5, r5, #1
 80051a2:	429d      	cmp	r5, r3
 80051a4:	bf38      	it	cc
 80051a6:	461d      	movcc	r5, r3
 80051a8:	0553      	lsls	r3, r2, #21
 80051aa:	d531      	bpl.n	8005210 <__ssputs_r+0xa0>
 80051ac:	4629      	mov	r1, r5
 80051ae:	f7ff ff85 	bl	80050bc <_malloc_r>
 80051b2:	4606      	mov	r6, r0
 80051b4:	b950      	cbnz	r0, 80051cc <__ssputs_r+0x5c>
 80051b6:	230c      	movs	r3, #12
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	f8ca 3000 	str.w	r3, [sl]
 80051c0:	89a3      	ldrh	r3, [r4, #12]
 80051c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051c6:	81a3      	strh	r3, [r4, #12]
 80051c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051cc:	464a      	mov	r2, r9
 80051ce:	6921      	ldr	r1, [r4, #16]
 80051d0:	f7ff fb8a 	bl	80048e8 <memcpy>
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051de:	81a3      	strh	r3, [r4, #12]
 80051e0:	6126      	str	r6, [r4, #16]
 80051e2:	444e      	add	r6, r9
 80051e4:	6026      	str	r6, [r4, #0]
 80051e6:	463e      	mov	r6, r7
 80051e8:	6165      	str	r5, [r4, #20]
 80051ea:	eba5 0509 	sub.w	r5, r5, r9
 80051ee:	60a5      	str	r5, [r4, #8]
 80051f0:	42be      	cmp	r6, r7
 80051f2:	d900      	bls.n	80051f6 <__ssputs_r+0x86>
 80051f4:	463e      	mov	r6, r7
 80051f6:	4632      	mov	r2, r6
 80051f8:	4641      	mov	r1, r8
 80051fa:	6820      	ldr	r0, [r4, #0]
 80051fc:	f000 f966 	bl	80054cc <memmove>
 8005200:	68a3      	ldr	r3, [r4, #8]
 8005202:	6822      	ldr	r2, [r4, #0]
 8005204:	1b9b      	subs	r3, r3, r6
 8005206:	4432      	add	r2, r6
 8005208:	2000      	movs	r0, #0
 800520a:	60a3      	str	r3, [r4, #8]
 800520c:	6022      	str	r2, [r4, #0]
 800520e:	e7db      	b.n	80051c8 <__ssputs_r+0x58>
 8005210:	462a      	mov	r2, r5
 8005212:	f000 f981 	bl	8005518 <_realloc_r>
 8005216:	4606      	mov	r6, r0
 8005218:	2800      	cmp	r0, #0
 800521a:	d1e1      	bne.n	80051e0 <__ssputs_r+0x70>
 800521c:	4650      	mov	r0, sl
 800521e:	6921      	ldr	r1, [r4, #16]
 8005220:	f7ff ff00 	bl	8005024 <_free_r>
 8005224:	e7c7      	b.n	80051b6 <__ssputs_r+0x46>
	...

08005228 <_svfiprintf_r>:
 8005228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522c:	4698      	mov	r8, r3
 800522e:	898b      	ldrh	r3, [r1, #12]
 8005230:	4607      	mov	r7, r0
 8005232:	061b      	lsls	r3, r3, #24
 8005234:	460d      	mov	r5, r1
 8005236:	4614      	mov	r4, r2
 8005238:	b09d      	sub	sp, #116	; 0x74
 800523a:	d50e      	bpl.n	800525a <_svfiprintf_r+0x32>
 800523c:	690b      	ldr	r3, [r1, #16]
 800523e:	b963      	cbnz	r3, 800525a <_svfiprintf_r+0x32>
 8005240:	2140      	movs	r1, #64	; 0x40
 8005242:	f7ff ff3b 	bl	80050bc <_malloc_r>
 8005246:	6028      	str	r0, [r5, #0]
 8005248:	6128      	str	r0, [r5, #16]
 800524a:	b920      	cbnz	r0, 8005256 <_svfiprintf_r+0x2e>
 800524c:	230c      	movs	r3, #12
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	f04f 30ff 	mov.w	r0, #4294967295
 8005254:	e0d1      	b.n	80053fa <_svfiprintf_r+0x1d2>
 8005256:	2340      	movs	r3, #64	; 0x40
 8005258:	616b      	str	r3, [r5, #20]
 800525a:	2300      	movs	r3, #0
 800525c:	9309      	str	r3, [sp, #36]	; 0x24
 800525e:	2320      	movs	r3, #32
 8005260:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005264:	2330      	movs	r3, #48	; 0x30
 8005266:	f04f 0901 	mov.w	r9, #1
 800526a:	f8cd 800c 	str.w	r8, [sp, #12]
 800526e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005414 <_svfiprintf_r+0x1ec>
 8005272:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005276:	4623      	mov	r3, r4
 8005278:	469a      	mov	sl, r3
 800527a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800527e:	b10a      	cbz	r2, 8005284 <_svfiprintf_r+0x5c>
 8005280:	2a25      	cmp	r2, #37	; 0x25
 8005282:	d1f9      	bne.n	8005278 <_svfiprintf_r+0x50>
 8005284:	ebba 0b04 	subs.w	fp, sl, r4
 8005288:	d00b      	beq.n	80052a2 <_svfiprintf_r+0x7a>
 800528a:	465b      	mov	r3, fp
 800528c:	4622      	mov	r2, r4
 800528e:	4629      	mov	r1, r5
 8005290:	4638      	mov	r0, r7
 8005292:	f7ff ff6d 	bl	8005170 <__ssputs_r>
 8005296:	3001      	adds	r0, #1
 8005298:	f000 80aa 	beq.w	80053f0 <_svfiprintf_r+0x1c8>
 800529c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800529e:	445a      	add	r2, fp
 80052a0:	9209      	str	r2, [sp, #36]	; 0x24
 80052a2:	f89a 3000 	ldrb.w	r3, [sl]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 80a2 	beq.w	80053f0 <_svfiprintf_r+0x1c8>
 80052ac:	2300      	movs	r3, #0
 80052ae:	f04f 32ff 	mov.w	r2, #4294967295
 80052b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052b6:	f10a 0a01 	add.w	sl, sl, #1
 80052ba:	9304      	str	r3, [sp, #16]
 80052bc:	9307      	str	r3, [sp, #28]
 80052be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052c2:	931a      	str	r3, [sp, #104]	; 0x68
 80052c4:	4654      	mov	r4, sl
 80052c6:	2205      	movs	r2, #5
 80052c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052cc:	4851      	ldr	r0, [pc, #324]	; (8005414 <_svfiprintf_r+0x1ec>)
 80052ce:	f7ff fafd 	bl	80048cc <memchr>
 80052d2:	9a04      	ldr	r2, [sp, #16]
 80052d4:	b9d8      	cbnz	r0, 800530e <_svfiprintf_r+0xe6>
 80052d6:	06d0      	lsls	r0, r2, #27
 80052d8:	bf44      	itt	mi
 80052da:	2320      	movmi	r3, #32
 80052dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052e0:	0711      	lsls	r1, r2, #28
 80052e2:	bf44      	itt	mi
 80052e4:	232b      	movmi	r3, #43	; 0x2b
 80052e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052ea:	f89a 3000 	ldrb.w	r3, [sl]
 80052ee:	2b2a      	cmp	r3, #42	; 0x2a
 80052f0:	d015      	beq.n	800531e <_svfiprintf_r+0xf6>
 80052f2:	4654      	mov	r4, sl
 80052f4:	2000      	movs	r0, #0
 80052f6:	f04f 0c0a 	mov.w	ip, #10
 80052fa:	9a07      	ldr	r2, [sp, #28]
 80052fc:	4621      	mov	r1, r4
 80052fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005302:	3b30      	subs	r3, #48	; 0x30
 8005304:	2b09      	cmp	r3, #9
 8005306:	d94e      	bls.n	80053a6 <_svfiprintf_r+0x17e>
 8005308:	b1b0      	cbz	r0, 8005338 <_svfiprintf_r+0x110>
 800530a:	9207      	str	r2, [sp, #28]
 800530c:	e014      	b.n	8005338 <_svfiprintf_r+0x110>
 800530e:	eba0 0308 	sub.w	r3, r0, r8
 8005312:	fa09 f303 	lsl.w	r3, r9, r3
 8005316:	4313      	orrs	r3, r2
 8005318:	46a2      	mov	sl, r4
 800531a:	9304      	str	r3, [sp, #16]
 800531c:	e7d2      	b.n	80052c4 <_svfiprintf_r+0x9c>
 800531e:	9b03      	ldr	r3, [sp, #12]
 8005320:	1d19      	adds	r1, r3, #4
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	9103      	str	r1, [sp, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	bfbb      	ittet	lt
 800532a:	425b      	neglt	r3, r3
 800532c:	f042 0202 	orrlt.w	r2, r2, #2
 8005330:	9307      	strge	r3, [sp, #28]
 8005332:	9307      	strlt	r3, [sp, #28]
 8005334:	bfb8      	it	lt
 8005336:	9204      	strlt	r2, [sp, #16]
 8005338:	7823      	ldrb	r3, [r4, #0]
 800533a:	2b2e      	cmp	r3, #46	; 0x2e
 800533c:	d10c      	bne.n	8005358 <_svfiprintf_r+0x130>
 800533e:	7863      	ldrb	r3, [r4, #1]
 8005340:	2b2a      	cmp	r3, #42	; 0x2a
 8005342:	d135      	bne.n	80053b0 <_svfiprintf_r+0x188>
 8005344:	9b03      	ldr	r3, [sp, #12]
 8005346:	3402      	adds	r4, #2
 8005348:	1d1a      	adds	r2, r3, #4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	9203      	str	r2, [sp, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	bfb8      	it	lt
 8005352:	f04f 33ff 	movlt.w	r3, #4294967295
 8005356:	9305      	str	r3, [sp, #20]
 8005358:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005424 <_svfiprintf_r+0x1fc>
 800535c:	2203      	movs	r2, #3
 800535e:	4650      	mov	r0, sl
 8005360:	7821      	ldrb	r1, [r4, #0]
 8005362:	f7ff fab3 	bl	80048cc <memchr>
 8005366:	b140      	cbz	r0, 800537a <_svfiprintf_r+0x152>
 8005368:	2340      	movs	r3, #64	; 0x40
 800536a:	eba0 000a 	sub.w	r0, r0, sl
 800536e:	fa03 f000 	lsl.w	r0, r3, r0
 8005372:	9b04      	ldr	r3, [sp, #16]
 8005374:	3401      	adds	r4, #1
 8005376:	4303      	orrs	r3, r0
 8005378:	9304      	str	r3, [sp, #16]
 800537a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800537e:	2206      	movs	r2, #6
 8005380:	4825      	ldr	r0, [pc, #148]	; (8005418 <_svfiprintf_r+0x1f0>)
 8005382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005386:	f7ff faa1 	bl	80048cc <memchr>
 800538a:	2800      	cmp	r0, #0
 800538c:	d038      	beq.n	8005400 <_svfiprintf_r+0x1d8>
 800538e:	4b23      	ldr	r3, [pc, #140]	; (800541c <_svfiprintf_r+0x1f4>)
 8005390:	bb1b      	cbnz	r3, 80053da <_svfiprintf_r+0x1b2>
 8005392:	9b03      	ldr	r3, [sp, #12]
 8005394:	3307      	adds	r3, #7
 8005396:	f023 0307 	bic.w	r3, r3, #7
 800539a:	3308      	adds	r3, #8
 800539c:	9303      	str	r3, [sp, #12]
 800539e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a0:	4433      	add	r3, r6
 80053a2:	9309      	str	r3, [sp, #36]	; 0x24
 80053a4:	e767      	b.n	8005276 <_svfiprintf_r+0x4e>
 80053a6:	460c      	mov	r4, r1
 80053a8:	2001      	movs	r0, #1
 80053aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80053ae:	e7a5      	b.n	80052fc <_svfiprintf_r+0xd4>
 80053b0:	2300      	movs	r3, #0
 80053b2:	f04f 0c0a 	mov.w	ip, #10
 80053b6:	4619      	mov	r1, r3
 80053b8:	3401      	adds	r4, #1
 80053ba:	9305      	str	r3, [sp, #20]
 80053bc:	4620      	mov	r0, r4
 80053be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053c2:	3a30      	subs	r2, #48	; 0x30
 80053c4:	2a09      	cmp	r2, #9
 80053c6:	d903      	bls.n	80053d0 <_svfiprintf_r+0x1a8>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0c5      	beq.n	8005358 <_svfiprintf_r+0x130>
 80053cc:	9105      	str	r1, [sp, #20]
 80053ce:	e7c3      	b.n	8005358 <_svfiprintf_r+0x130>
 80053d0:	4604      	mov	r4, r0
 80053d2:	2301      	movs	r3, #1
 80053d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80053d8:	e7f0      	b.n	80053bc <_svfiprintf_r+0x194>
 80053da:	ab03      	add	r3, sp, #12
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	462a      	mov	r2, r5
 80053e0:	4638      	mov	r0, r7
 80053e2:	4b0f      	ldr	r3, [pc, #60]	; (8005420 <_svfiprintf_r+0x1f8>)
 80053e4:	a904      	add	r1, sp, #16
 80053e6:	f7fd fff1 	bl	80033cc <_printf_float>
 80053ea:	1c42      	adds	r2, r0, #1
 80053ec:	4606      	mov	r6, r0
 80053ee:	d1d6      	bne.n	800539e <_svfiprintf_r+0x176>
 80053f0:	89ab      	ldrh	r3, [r5, #12]
 80053f2:	065b      	lsls	r3, r3, #25
 80053f4:	f53f af2c 	bmi.w	8005250 <_svfiprintf_r+0x28>
 80053f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053fa:	b01d      	add	sp, #116	; 0x74
 80053fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005400:	ab03      	add	r3, sp, #12
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	462a      	mov	r2, r5
 8005406:	4638      	mov	r0, r7
 8005408:	4b05      	ldr	r3, [pc, #20]	; (8005420 <_svfiprintf_r+0x1f8>)
 800540a:	a904      	add	r1, sp, #16
 800540c:	f7fe fa7a 	bl	8003904 <_printf_i>
 8005410:	e7eb      	b.n	80053ea <_svfiprintf_r+0x1c2>
 8005412:	bf00      	nop
 8005414:	08006344 	.word	0x08006344
 8005418:	0800634e 	.word	0x0800634e
 800541c:	080033cd 	.word	0x080033cd
 8005420:	08005171 	.word	0x08005171
 8005424:	0800634a 	.word	0x0800634a

08005428 <_sbrk_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	2300      	movs	r3, #0
 800542c:	4d05      	ldr	r5, [pc, #20]	; (8005444 <_sbrk_r+0x1c>)
 800542e:	4604      	mov	r4, r0
 8005430:	4608      	mov	r0, r1
 8005432:	602b      	str	r3, [r5, #0]
 8005434:	f7fb ffe2 	bl	80013fc <_sbrk>
 8005438:	1c43      	adds	r3, r0, #1
 800543a:	d102      	bne.n	8005442 <_sbrk_r+0x1a>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	b103      	cbz	r3, 8005442 <_sbrk_r+0x1a>
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	bd38      	pop	{r3, r4, r5, pc}
 8005444:	20000378 	.word	0x20000378

08005448 <__assert_func>:
 8005448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800544a:	4614      	mov	r4, r2
 800544c:	461a      	mov	r2, r3
 800544e:	4b09      	ldr	r3, [pc, #36]	; (8005474 <__assert_func+0x2c>)
 8005450:	4605      	mov	r5, r0
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68d8      	ldr	r0, [r3, #12]
 8005456:	b14c      	cbz	r4, 800546c <__assert_func+0x24>
 8005458:	4b07      	ldr	r3, [pc, #28]	; (8005478 <__assert_func+0x30>)
 800545a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800545e:	9100      	str	r1, [sp, #0]
 8005460:	462b      	mov	r3, r5
 8005462:	4906      	ldr	r1, [pc, #24]	; (800547c <__assert_func+0x34>)
 8005464:	f000 f80e 	bl	8005484 <fiprintf>
 8005468:	f000 faa2 	bl	80059b0 <abort>
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <__assert_func+0x38>)
 800546e:	461c      	mov	r4, r3
 8005470:	e7f3      	b.n	800545a <__assert_func+0x12>
 8005472:	bf00      	nop
 8005474:	20000050 	.word	0x20000050
 8005478:	08006355 	.word	0x08006355
 800547c:	08006362 	.word	0x08006362
 8005480:	08006390 	.word	0x08006390

08005484 <fiprintf>:
 8005484:	b40e      	push	{r1, r2, r3}
 8005486:	b503      	push	{r0, r1, lr}
 8005488:	4601      	mov	r1, r0
 800548a:	ab03      	add	r3, sp, #12
 800548c:	4805      	ldr	r0, [pc, #20]	; (80054a4 <fiprintf+0x20>)
 800548e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005492:	6800      	ldr	r0, [r0, #0]
 8005494:	9301      	str	r3, [sp, #4]
 8005496:	f000 f88d 	bl	80055b4 <_vfiprintf_r>
 800549a:	b002      	add	sp, #8
 800549c:	f85d eb04 	ldr.w	lr, [sp], #4
 80054a0:	b003      	add	sp, #12
 80054a2:	4770      	bx	lr
 80054a4:	20000050 	.word	0x20000050

080054a8 <__ascii_mbtowc>:
 80054a8:	b082      	sub	sp, #8
 80054aa:	b901      	cbnz	r1, 80054ae <__ascii_mbtowc+0x6>
 80054ac:	a901      	add	r1, sp, #4
 80054ae:	b142      	cbz	r2, 80054c2 <__ascii_mbtowc+0x1a>
 80054b0:	b14b      	cbz	r3, 80054c6 <__ascii_mbtowc+0x1e>
 80054b2:	7813      	ldrb	r3, [r2, #0]
 80054b4:	600b      	str	r3, [r1, #0]
 80054b6:	7812      	ldrb	r2, [r2, #0]
 80054b8:	1e10      	subs	r0, r2, #0
 80054ba:	bf18      	it	ne
 80054bc:	2001      	movne	r0, #1
 80054be:	b002      	add	sp, #8
 80054c0:	4770      	bx	lr
 80054c2:	4610      	mov	r0, r2
 80054c4:	e7fb      	b.n	80054be <__ascii_mbtowc+0x16>
 80054c6:	f06f 0001 	mvn.w	r0, #1
 80054ca:	e7f8      	b.n	80054be <__ascii_mbtowc+0x16>

080054cc <memmove>:
 80054cc:	4288      	cmp	r0, r1
 80054ce:	b510      	push	{r4, lr}
 80054d0:	eb01 0402 	add.w	r4, r1, r2
 80054d4:	d902      	bls.n	80054dc <memmove+0x10>
 80054d6:	4284      	cmp	r4, r0
 80054d8:	4623      	mov	r3, r4
 80054da:	d807      	bhi.n	80054ec <memmove+0x20>
 80054dc:	1e43      	subs	r3, r0, #1
 80054de:	42a1      	cmp	r1, r4
 80054e0:	d008      	beq.n	80054f4 <memmove+0x28>
 80054e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054ea:	e7f8      	b.n	80054de <memmove+0x12>
 80054ec:	4601      	mov	r1, r0
 80054ee:	4402      	add	r2, r0
 80054f0:	428a      	cmp	r2, r1
 80054f2:	d100      	bne.n	80054f6 <memmove+0x2a>
 80054f4:	bd10      	pop	{r4, pc}
 80054f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054fe:	e7f7      	b.n	80054f0 <memmove+0x24>

08005500 <__malloc_lock>:
 8005500:	4801      	ldr	r0, [pc, #4]	; (8005508 <__malloc_lock+0x8>)
 8005502:	f000 bc15 	b.w	8005d30 <__retarget_lock_acquire_recursive>
 8005506:	bf00      	nop
 8005508:	20000380 	.word	0x20000380

0800550c <__malloc_unlock>:
 800550c:	4801      	ldr	r0, [pc, #4]	; (8005514 <__malloc_unlock+0x8>)
 800550e:	f000 bc10 	b.w	8005d32 <__retarget_lock_release_recursive>
 8005512:	bf00      	nop
 8005514:	20000380 	.word	0x20000380

08005518 <_realloc_r>:
 8005518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551a:	4607      	mov	r7, r0
 800551c:	4614      	mov	r4, r2
 800551e:	460e      	mov	r6, r1
 8005520:	b921      	cbnz	r1, 800552c <_realloc_r+0x14>
 8005522:	4611      	mov	r1, r2
 8005524:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005528:	f7ff bdc8 	b.w	80050bc <_malloc_r>
 800552c:	b922      	cbnz	r2, 8005538 <_realloc_r+0x20>
 800552e:	f7ff fd79 	bl	8005024 <_free_r>
 8005532:	4625      	mov	r5, r4
 8005534:	4628      	mov	r0, r5
 8005536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005538:	f000 fc60 	bl	8005dfc <_malloc_usable_size_r>
 800553c:	42a0      	cmp	r0, r4
 800553e:	d20f      	bcs.n	8005560 <_realloc_r+0x48>
 8005540:	4621      	mov	r1, r4
 8005542:	4638      	mov	r0, r7
 8005544:	f7ff fdba 	bl	80050bc <_malloc_r>
 8005548:	4605      	mov	r5, r0
 800554a:	2800      	cmp	r0, #0
 800554c:	d0f2      	beq.n	8005534 <_realloc_r+0x1c>
 800554e:	4631      	mov	r1, r6
 8005550:	4622      	mov	r2, r4
 8005552:	f7ff f9c9 	bl	80048e8 <memcpy>
 8005556:	4631      	mov	r1, r6
 8005558:	4638      	mov	r0, r7
 800555a:	f7ff fd63 	bl	8005024 <_free_r>
 800555e:	e7e9      	b.n	8005534 <_realloc_r+0x1c>
 8005560:	4635      	mov	r5, r6
 8005562:	e7e7      	b.n	8005534 <_realloc_r+0x1c>

08005564 <__sfputc_r>:
 8005564:	6893      	ldr	r3, [r2, #8]
 8005566:	b410      	push	{r4}
 8005568:	3b01      	subs	r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	6093      	str	r3, [r2, #8]
 800556e:	da07      	bge.n	8005580 <__sfputc_r+0x1c>
 8005570:	6994      	ldr	r4, [r2, #24]
 8005572:	42a3      	cmp	r3, r4
 8005574:	db01      	blt.n	800557a <__sfputc_r+0x16>
 8005576:	290a      	cmp	r1, #10
 8005578:	d102      	bne.n	8005580 <__sfputc_r+0x1c>
 800557a:	bc10      	pop	{r4}
 800557c:	f000 b94a 	b.w	8005814 <__swbuf_r>
 8005580:	6813      	ldr	r3, [r2, #0]
 8005582:	1c58      	adds	r0, r3, #1
 8005584:	6010      	str	r0, [r2, #0]
 8005586:	7019      	strb	r1, [r3, #0]
 8005588:	4608      	mov	r0, r1
 800558a:	bc10      	pop	{r4}
 800558c:	4770      	bx	lr

0800558e <__sfputs_r>:
 800558e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005590:	4606      	mov	r6, r0
 8005592:	460f      	mov	r7, r1
 8005594:	4614      	mov	r4, r2
 8005596:	18d5      	adds	r5, r2, r3
 8005598:	42ac      	cmp	r4, r5
 800559a:	d101      	bne.n	80055a0 <__sfputs_r+0x12>
 800559c:	2000      	movs	r0, #0
 800559e:	e007      	b.n	80055b0 <__sfputs_r+0x22>
 80055a0:	463a      	mov	r2, r7
 80055a2:	4630      	mov	r0, r6
 80055a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055a8:	f7ff ffdc 	bl	8005564 <__sfputc_r>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d1f3      	bne.n	8005598 <__sfputs_r+0xa>
 80055b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055b4 <_vfiprintf_r>:
 80055b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b8:	460d      	mov	r5, r1
 80055ba:	4614      	mov	r4, r2
 80055bc:	4698      	mov	r8, r3
 80055be:	4606      	mov	r6, r0
 80055c0:	b09d      	sub	sp, #116	; 0x74
 80055c2:	b118      	cbz	r0, 80055cc <_vfiprintf_r+0x18>
 80055c4:	6983      	ldr	r3, [r0, #24]
 80055c6:	b90b      	cbnz	r3, 80055cc <_vfiprintf_r+0x18>
 80055c8:	f000 fb14 	bl	8005bf4 <__sinit>
 80055cc:	4b89      	ldr	r3, [pc, #548]	; (80057f4 <_vfiprintf_r+0x240>)
 80055ce:	429d      	cmp	r5, r3
 80055d0:	d11b      	bne.n	800560a <_vfiprintf_r+0x56>
 80055d2:	6875      	ldr	r5, [r6, #4]
 80055d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055d6:	07d9      	lsls	r1, r3, #31
 80055d8:	d405      	bmi.n	80055e6 <_vfiprintf_r+0x32>
 80055da:	89ab      	ldrh	r3, [r5, #12]
 80055dc:	059a      	lsls	r2, r3, #22
 80055de:	d402      	bmi.n	80055e6 <_vfiprintf_r+0x32>
 80055e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055e2:	f000 fba5 	bl	8005d30 <__retarget_lock_acquire_recursive>
 80055e6:	89ab      	ldrh	r3, [r5, #12]
 80055e8:	071b      	lsls	r3, r3, #28
 80055ea:	d501      	bpl.n	80055f0 <_vfiprintf_r+0x3c>
 80055ec:	692b      	ldr	r3, [r5, #16]
 80055ee:	b9eb      	cbnz	r3, 800562c <_vfiprintf_r+0x78>
 80055f0:	4629      	mov	r1, r5
 80055f2:	4630      	mov	r0, r6
 80055f4:	f000 f96e 	bl	80058d4 <__swsetup_r>
 80055f8:	b1c0      	cbz	r0, 800562c <_vfiprintf_r+0x78>
 80055fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055fc:	07dc      	lsls	r4, r3, #31
 80055fe:	d50e      	bpl.n	800561e <_vfiprintf_r+0x6a>
 8005600:	f04f 30ff 	mov.w	r0, #4294967295
 8005604:	b01d      	add	sp, #116	; 0x74
 8005606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800560a:	4b7b      	ldr	r3, [pc, #492]	; (80057f8 <_vfiprintf_r+0x244>)
 800560c:	429d      	cmp	r5, r3
 800560e:	d101      	bne.n	8005614 <_vfiprintf_r+0x60>
 8005610:	68b5      	ldr	r5, [r6, #8]
 8005612:	e7df      	b.n	80055d4 <_vfiprintf_r+0x20>
 8005614:	4b79      	ldr	r3, [pc, #484]	; (80057fc <_vfiprintf_r+0x248>)
 8005616:	429d      	cmp	r5, r3
 8005618:	bf08      	it	eq
 800561a:	68f5      	ldreq	r5, [r6, #12]
 800561c:	e7da      	b.n	80055d4 <_vfiprintf_r+0x20>
 800561e:	89ab      	ldrh	r3, [r5, #12]
 8005620:	0598      	lsls	r0, r3, #22
 8005622:	d4ed      	bmi.n	8005600 <_vfiprintf_r+0x4c>
 8005624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005626:	f000 fb84 	bl	8005d32 <__retarget_lock_release_recursive>
 800562a:	e7e9      	b.n	8005600 <_vfiprintf_r+0x4c>
 800562c:	2300      	movs	r3, #0
 800562e:	9309      	str	r3, [sp, #36]	; 0x24
 8005630:	2320      	movs	r3, #32
 8005632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005636:	2330      	movs	r3, #48	; 0x30
 8005638:	f04f 0901 	mov.w	r9, #1
 800563c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005640:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005800 <_vfiprintf_r+0x24c>
 8005644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005648:	4623      	mov	r3, r4
 800564a:	469a      	mov	sl, r3
 800564c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005650:	b10a      	cbz	r2, 8005656 <_vfiprintf_r+0xa2>
 8005652:	2a25      	cmp	r2, #37	; 0x25
 8005654:	d1f9      	bne.n	800564a <_vfiprintf_r+0x96>
 8005656:	ebba 0b04 	subs.w	fp, sl, r4
 800565a:	d00b      	beq.n	8005674 <_vfiprintf_r+0xc0>
 800565c:	465b      	mov	r3, fp
 800565e:	4622      	mov	r2, r4
 8005660:	4629      	mov	r1, r5
 8005662:	4630      	mov	r0, r6
 8005664:	f7ff ff93 	bl	800558e <__sfputs_r>
 8005668:	3001      	adds	r0, #1
 800566a:	f000 80aa 	beq.w	80057c2 <_vfiprintf_r+0x20e>
 800566e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005670:	445a      	add	r2, fp
 8005672:	9209      	str	r2, [sp, #36]	; 0x24
 8005674:	f89a 3000 	ldrb.w	r3, [sl]
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 80a2 	beq.w	80057c2 <_vfiprintf_r+0x20e>
 800567e:	2300      	movs	r3, #0
 8005680:	f04f 32ff 	mov.w	r2, #4294967295
 8005684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005688:	f10a 0a01 	add.w	sl, sl, #1
 800568c:	9304      	str	r3, [sp, #16]
 800568e:	9307      	str	r3, [sp, #28]
 8005690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005694:	931a      	str	r3, [sp, #104]	; 0x68
 8005696:	4654      	mov	r4, sl
 8005698:	2205      	movs	r2, #5
 800569a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800569e:	4858      	ldr	r0, [pc, #352]	; (8005800 <_vfiprintf_r+0x24c>)
 80056a0:	f7ff f914 	bl	80048cc <memchr>
 80056a4:	9a04      	ldr	r2, [sp, #16]
 80056a6:	b9d8      	cbnz	r0, 80056e0 <_vfiprintf_r+0x12c>
 80056a8:	06d1      	lsls	r1, r2, #27
 80056aa:	bf44      	itt	mi
 80056ac:	2320      	movmi	r3, #32
 80056ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056b2:	0713      	lsls	r3, r2, #28
 80056b4:	bf44      	itt	mi
 80056b6:	232b      	movmi	r3, #43	; 0x2b
 80056b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056bc:	f89a 3000 	ldrb.w	r3, [sl]
 80056c0:	2b2a      	cmp	r3, #42	; 0x2a
 80056c2:	d015      	beq.n	80056f0 <_vfiprintf_r+0x13c>
 80056c4:	4654      	mov	r4, sl
 80056c6:	2000      	movs	r0, #0
 80056c8:	f04f 0c0a 	mov.w	ip, #10
 80056cc:	9a07      	ldr	r2, [sp, #28]
 80056ce:	4621      	mov	r1, r4
 80056d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056d4:	3b30      	subs	r3, #48	; 0x30
 80056d6:	2b09      	cmp	r3, #9
 80056d8:	d94e      	bls.n	8005778 <_vfiprintf_r+0x1c4>
 80056da:	b1b0      	cbz	r0, 800570a <_vfiprintf_r+0x156>
 80056dc:	9207      	str	r2, [sp, #28]
 80056de:	e014      	b.n	800570a <_vfiprintf_r+0x156>
 80056e0:	eba0 0308 	sub.w	r3, r0, r8
 80056e4:	fa09 f303 	lsl.w	r3, r9, r3
 80056e8:	4313      	orrs	r3, r2
 80056ea:	46a2      	mov	sl, r4
 80056ec:	9304      	str	r3, [sp, #16]
 80056ee:	e7d2      	b.n	8005696 <_vfiprintf_r+0xe2>
 80056f0:	9b03      	ldr	r3, [sp, #12]
 80056f2:	1d19      	adds	r1, r3, #4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	9103      	str	r1, [sp, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	bfbb      	ittet	lt
 80056fc:	425b      	neglt	r3, r3
 80056fe:	f042 0202 	orrlt.w	r2, r2, #2
 8005702:	9307      	strge	r3, [sp, #28]
 8005704:	9307      	strlt	r3, [sp, #28]
 8005706:	bfb8      	it	lt
 8005708:	9204      	strlt	r2, [sp, #16]
 800570a:	7823      	ldrb	r3, [r4, #0]
 800570c:	2b2e      	cmp	r3, #46	; 0x2e
 800570e:	d10c      	bne.n	800572a <_vfiprintf_r+0x176>
 8005710:	7863      	ldrb	r3, [r4, #1]
 8005712:	2b2a      	cmp	r3, #42	; 0x2a
 8005714:	d135      	bne.n	8005782 <_vfiprintf_r+0x1ce>
 8005716:	9b03      	ldr	r3, [sp, #12]
 8005718:	3402      	adds	r4, #2
 800571a:	1d1a      	adds	r2, r3, #4
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	9203      	str	r2, [sp, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	bfb8      	it	lt
 8005724:	f04f 33ff 	movlt.w	r3, #4294967295
 8005728:	9305      	str	r3, [sp, #20]
 800572a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005810 <_vfiprintf_r+0x25c>
 800572e:	2203      	movs	r2, #3
 8005730:	4650      	mov	r0, sl
 8005732:	7821      	ldrb	r1, [r4, #0]
 8005734:	f7ff f8ca 	bl	80048cc <memchr>
 8005738:	b140      	cbz	r0, 800574c <_vfiprintf_r+0x198>
 800573a:	2340      	movs	r3, #64	; 0x40
 800573c:	eba0 000a 	sub.w	r0, r0, sl
 8005740:	fa03 f000 	lsl.w	r0, r3, r0
 8005744:	9b04      	ldr	r3, [sp, #16]
 8005746:	3401      	adds	r4, #1
 8005748:	4303      	orrs	r3, r0
 800574a:	9304      	str	r3, [sp, #16]
 800574c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005750:	2206      	movs	r2, #6
 8005752:	482c      	ldr	r0, [pc, #176]	; (8005804 <_vfiprintf_r+0x250>)
 8005754:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005758:	f7ff f8b8 	bl	80048cc <memchr>
 800575c:	2800      	cmp	r0, #0
 800575e:	d03f      	beq.n	80057e0 <_vfiprintf_r+0x22c>
 8005760:	4b29      	ldr	r3, [pc, #164]	; (8005808 <_vfiprintf_r+0x254>)
 8005762:	bb1b      	cbnz	r3, 80057ac <_vfiprintf_r+0x1f8>
 8005764:	9b03      	ldr	r3, [sp, #12]
 8005766:	3307      	adds	r3, #7
 8005768:	f023 0307 	bic.w	r3, r3, #7
 800576c:	3308      	adds	r3, #8
 800576e:	9303      	str	r3, [sp, #12]
 8005770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005772:	443b      	add	r3, r7
 8005774:	9309      	str	r3, [sp, #36]	; 0x24
 8005776:	e767      	b.n	8005648 <_vfiprintf_r+0x94>
 8005778:	460c      	mov	r4, r1
 800577a:	2001      	movs	r0, #1
 800577c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005780:	e7a5      	b.n	80056ce <_vfiprintf_r+0x11a>
 8005782:	2300      	movs	r3, #0
 8005784:	f04f 0c0a 	mov.w	ip, #10
 8005788:	4619      	mov	r1, r3
 800578a:	3401      	adds	r4, #1
 800578c:	9305      	str	r3, [sp, #20]
 800578e:	4620      	mov	r0, r4
 8005790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005794:	3a30      	subs	r2, #48	; 0x30
 8005796:	2a09      	cmp	r2, #9
 8005798:	d903      	bls.n	80057a2 <_vfiprintf_r+0x1ee>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0c5      	beq.n	800572a <_vfiprintf_r+0x176>
 800579e:	9105      	str	r1, [sp, #20]
 80057a0:	e7c3      	b.n	800572a <_vfiprintf_r+0x176>
 80057a2:	4604      	mov	r4, r0
 80057a4:	2301      	movs	r3, #1
 80057a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80057aa:	e7f0      	b.n	800578e <_vfiprintf_r+0x1da>
 80057ac:	ab03      	add	r3, sp, #12
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	462a      	mov	r2, r5
 80057b2:	4630      	mov	r0, r6
 80057b4:	4b15      	ldr	r3, [pc, #84]	; (800580c <_vfiprintf_r+0x258>)
 80057b6:	a904      	add	r1, sp, #16
 80057b8:	f7fd fe08 	bl	80033cc <_printf_float>
 80057bc:	4607      	mov	r7, r0
 80057be:	1c78      	adds	r0, r7, #1
 80057c0:	d1d6      	bne.n	8005770 <_vfiprintf_r+0x1bc>
 80057c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057c4:	07d9      	lsls	r1, r3, #31
 80057c6:	d405      	bmi.n	80057d4 <_vfiprintf_r+0x220>
 80057c8:	89ab      	ldrh	r3, [r5, #12]
 80057ca:	059a      	lsls	r2, r3, #22
 80057cc:	d402      	bmi.n	80057d4 <_vfiprintf_r+0x220>
 80057ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057d0:	f000 faaf 	bl	8005d32 <__retarget_lock_release_recursive>
 80057d4:	89ab      	ldrh	r3, [r5, #12]
 80057d6:	065b      	lsls	r3, r3, #25
 80057d8:	f53f af12 	bmi.w	8005600 <_vfiprintf_r+0x4c>
 80057dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057de:	e711      	b.n	8005604 <_vfiprintf_r+0x50>
 80057e0:	ab03      	add	r3, sp, #12
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	462a      	mov	r2, r5
 80057e6:	4630      	mov	r0, r6
 80057e8:	4b08      	ldr	r3, [pc, #32]	; (800580c <_vfiprintf_r+0x258>)
 80057ea:	a904      	add	r1, sp, #16
 80057ec:	f7fe f88a 	bl	8003904 <_printf_i>
 80057f0:	e7e4      	b.n	80057bc <_vfiprintf_r+0x208>
 80057f2:	bf00      	nop
 80057f4:	080064bc 	.word	0x080064bc
 80057f8:	080064dc 	.word	0x080064dc
 80057fc:	0800649c 	.word	0x0800649c
 8005800:	08006344 	.word	0x08006344
 8005804:	0800634e 	.word	0x0800634e
 8005808:	080033cd 	.word	0x080033cd
 800580c:	0800558f 	.word	0x0800558f
 8005810:	0800634a 	.word	0x0800634a

08005814 <__swbuf_r>:
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005816:	460e      	mov	r6, r1
 8005818:	4614      	mov	r4, r2
 800581a:	4605      	mov	r5, r0
 800581c:	b118      	cbz	r0, 8005826 <__swbuf_r+0x12>
 800581e:	6983      	ldr	r3, [r0, #24]
 8005820:	b90b      	cbnz	r3, 8005826 <__swbuf_r+0x12>
 8005822:	f000 f9e7 	bl	8005bf4 <__sinit>
 8005826:	4b21      	ldr	r3, [pc, #132]	; (80058ac <__swbuf_r+0x98>)
 8005828:	429c      	cmp	r4, r3
 800582a:	d12b      	bne.n	8005884 <__swbuf_r+0x70>
 800582c:	686c      	ldr	r4, [r5, #4]
 800582e:	69a3      	ldr	r3, [r4, #24]
 8005830:	60a3      	str	r3, [r4, #8]
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	071a      	lsls	r2, r3, #28
 8005836:	d52f      	bpl.n	8005898 <__swbuf_r+0x84>
 8005838:	6923      	ldr	r3, [r4, #16]
 800583a:	b36b      	cbz	r3, 8005898 <__swbuf_r+0x84>
 800583c:	6923      	ldr	r3, [r4, #16]
 800583e:	6820      	ldr	r0, [r4, #0]
 8005840:	b2f6      	uxtb	r6, r6
 8005842:	1ac0      	subs	r0, r0, r3
 8005844:	6963      	ldr	r3, [r4, #20]
 8005846:	4637      	mov	r7, r6
 8005848:	4283      	cmp	r3, r0
 800584a:	dc04      	bgt.n	8005856 <__swbuf_r+0x42>
 800584c:	4621      	mov	r1, r4
 800584e:	4628      	mov	r0, r5
 8005850:	f000 f93c 	bl	8005acc <_fflush_r>
 8005854:	bb30      	cbnz	r0, 80058a4 <__swbuf_r+0x90>
 8005856:	68a3      	ldr	r3, [r4, #8]
 8005858:	3001      	adds	r0, #1
 800585a:	3b01      	subs	r3, #1
 800585c:	60a3      	str	r3, [r4, #8]
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	6022      	str	r2, [r4, #0]
 8005864:	701e      	strb	r6, [r3, #0]
 8005866:	6963      	ldr	r3, [r4, #20]
 8005868:	4283      	cmp	r3, r0
 800586a:	d004      	beq.n	8005876 <__swbuf_r+0x62>
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	07db      	lsls	r3, r3, #31
 8005870:	d506      	bpl.n	8005880 <__swbuf_r+0x6c>
 8005872:	2e0a      	cmp	r6, #10
 8005874:	d104      	bne.n	8005880 <__swbuf_r+0x6c>
 8005876:	4621      	mov	r1, r4
 8005878:	4628      	mov	r0, r5
 800587a:	f000 f927 	bl	8005acc <_fflush_r>
 800587e:	b988      	cbnz	r0, 80058a4 <__swbuf_r+0x90>
 8005880:	4638      	mov	r0, r7
 8005882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005884:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <__swbuf_r+0x9c>)
 8005886:	429c      	cmp	r4, r3
 8005888:	d101      	bne.n	800588e <__swbuf_r+0x7a>
 800588a:	68ac      	ldr	r4, [r5, #8]
 800588c:	e7cf      	b.n	800582e <__swbuf_r+0x1a>
 800588e:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <__swbuf_r+0xa0>)
 8005890:	429c      	cmp	r4, r3
 8005892:	bf08      	it	eq
 8005894:	68ec      	ldreq	r4, [r5, #12]
 8005896:	e7ca      	b.n	800582e <__swbuf_r+0x1a>
 8005898:	4621      	mov	r1, r4
 800589a:	4628      	mov	r0, r5
 800589c:	f000 f81a 	bl	80058d4 <__swsetup_r>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d0cb      	beq.n	800583c <__swbuf_r+0x28>
 80058a4:	f04f 37ff 	mov.w	r7, #4294967295
 80058a8:	e7ea      	b.n	8005880 <__swbuf_r+0x6c>
 80058aa:	bf00      	nop
 80058ac:	080064bc 	.word	0x080064bc
 80058b0:	080064dc 	.word	0x080064dc
 80058b4:	0800649c 	.word	0x0800649c

080058b8 <__ascii_wctomb>:
 80058b8:	4603      	mov	r3, r0
 80058ba:	4608      	mov	r0, r1
 80058bc:	b141      	cbz	r1, 80058d0 <__ascii_wctomb+0x18>
 80058be:	2aff      	cmp	r2, #255	; 0xff
 80058c0:	d904      	bls.n	80058cc <__ascii_wctomb+0x14>
 80058c2:	228a      	movs	r2, #138	; 0x8a
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	4770      	bx	lr
 80058cc:	2001      	movs	r0, #1
 80058ce:	700a      	strb	r2, [r1, #0]
 80058d0:	4770      	bx	lr
	...

080058d4 <__swsetup_r>:
 80058d4:	4b32      	ldr	r3, [pc, #200]	; (80059a0 <__swsetup_r+0xcc>)
 80058d6:	b570      	push	{r4, r5, r6, lr}
 80058d8:	681d      	ldr	r5, [r3, #0]
 80058da:	4606      	mov	r6, r0
 80058dc:	460c      	mov	r4, r1
 80058de:	b125      	cbz	r5, 80058ea <__swsetup_r+0x16>
 80058e0:	69ab      	ldr	r3, [r5, #24]
 80058e2:	b913      	cbnz	r3, 80058ea <__swsetup_r+0x16>
 80058e4:	4628      	mov	r0, r5
 80058e6:	f000 f985 	bl	8005bf4 <__sinit>
 80058ea:	4b2e      	ldr	r3, [pc, #184]	; (80059a4 <__swsetup_r+0xd0>)
 80058ec:	429c      	cmp	r4, r3
 80058ee:	d10f      	bne.n	8005910 <__swsetup_r+0x3c>
 80058f0:	686c      	ldr	r4, [r5, #4]
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058f8:	0719      	lsls	r1, r3, #28
 80058fa:	d42c      	bmi.n	8005956 <__swsetup_r+0x82>
 80058fc:	06dd      	lsls	r5, r3, #27
 80058fe:	d411      	bmi.n	8005924 <__swsetup_r+0x50>
 8005900:	2309      	movs	r3, #9
 8005902:	6033      	str	r3, [r6, #0]
 8005904:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005908:	f04f 30ff 	mov.w	r0, #4294967295
 800590c:	81a3      	strh	r3, [r4, #12]
 800590e:	e03e      	b.n	800598e <__swsetup_r+0xba>
 8005910:	4b25      	ldr	r3, [pc, #148]	; (80059a8 <__swsetup_r+0xd4>)
 8005912:	429c      	cmp	r4, r3
 8005914:	d101      	bne.n	800591a <__swsetup_r+0x46>
 8005916:	68ac      	ldr	r4, [r5, #8]
 8005918:	e7eb      	b.n	80058f2 <__swsetup_r+0x1e>
 800591a:	4b24      	ldr	r3, [pc, #144]	; (80059ac <__swsetup_r+0xd8>)
 800591c:	429c      	cmp	r4, r3
 800591e:	bf08      	it	eq
 8005920:	68ec      	ldreq	r4, [r5, #12]
 8005922:	e7e6      	b.n	80058f2 <__swsetup_r+0x1e>
 8005924:	0758      	lsls	r0, r3, #29
 8005926:	d512      	bpl.n	800594e <__swsetup_r+0x7a>
 8005928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800592a:	b141      	cbz	r1, 800593e <__swsetup_r+0x6a>
 800592c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005930:	4299      	cmp	r1, r3
 8005932:	d002      	beq.n	800593a <__swsetup_r+0x66>
 8005934:	4630      	mov	r0, r6
 8005936:	f7ff fb75 	bl	8005024 <_free_r>
 800593a:	2300      	movs	r3, #0
 800593c:	6363      	str	r3, [r4, #52]	; 0x34
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005944:	81a3      	strh	r3, [r4, #12]
 8005946:	2300      	movs	r3, #0
 8005948:	6063      	str	r3, [r4, #4]
 800594a:	6923      	ldr	r3, [r4, #16]
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	89a3      	ldrh	r3, [r4, #12]
 8005950:	f043 0308 	orr.w	r3, r3, #8
 8005954:	81a3      	strh	r3, [r4, #12]
 8005956:	6923      	ldr	r3, [r4, #16]
 8005958:	b94b      	cbnz	r3, 800596e <__swsetup_r+0x9a>
 800595a:	89a3      	ldrh	r3, [r4, #12]
 800595c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005964:	d003      	beq.n	800596e <__swsetup_r+0x9a>
 8005966:	4621      	mov	r1, r4
 8005968:	4630      	mov	r0, r6
 800596a:	f000 fa07 	bl	8005d7c <__smakebuf_r>
 800596e:	89a0      	ldrh	r0, [r4, #12]
 8005970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005974:	f010 0301 	ands.w	r3, r0, #1
 8005978:	d00a      	beq.n	8005990 <__swsetup_r+0xbc>
 800597a:	2300      	movs	r3, #0
 800597c:	60a3      	str	r3, [r4, #8]
 800597e:	6963      	ldr	r3, [r4, #20]
 8005980:	425b      	negs	r3, r3
 8005982:	61a3      	str	r3, [r4, #24]
 8005984:	6923      	ldr	r3, [r4, #16]
 8005986:	b943      	cbnz	r3, 800599a <__swsetup_r+0xc6>
 8005988:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800598c:	d1ba      	bne.n	8005904 <__swsetup_r+0x30>
 800598e:	bd70      	pop	{r4, r5, r6, pc}
 8005990:	0781      	lsls	r1, r0, #30
 8005992:	bf58      	it	pl
 8005994:	6963      	ldrpl	r3, [r4, #20]
 8005996:	60a3      	str	r3, [r4, #8]
 8005998:	e7f4      	b.n	8005984 <__swsetup_r+0xb0>
 800599a:	2000      	movs	r0, #0
 800599c:	e7f7      	b.n	800598e <__swsetup_r+0xba>
 800599e:	bf00      	nop
 80059a0:	20000050 	.word	0x20000050
 80059a4:	080064bc 	.word	0x080064bc
 80059a8:	080064dc 	.word	0x080064dc
 80059ac:	0800649c 	.word	0x0800649c

080059b0 <abort>:
 80059b0:	2006      	movs	r0, #6
 80059b2:	b508      	push	{r3, lr}
 80059b4:	f000 fa52 	bl	8005e5c <raise>
 80059b8:	2001      	movs	r0, #1
 80059ba:	f7fb fcc8 	bl	800134e <_exit>
	...

080059c0 <__sflush_r>:
 80059c0:	898a      	ldrh	r2, [r1, #12]
 80059c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c6:	4605      	mov	r5, r0
 80059c8:	0710      	lsls	r0, r2, #28
 80059ca:	460c      	mov	r4, r1
 80059cc:	d458      	bmi.n	8005a80 <__sflush_r+0xc0>
 80059ce:	684b      	ldr	r3, [r1, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	dc05      	bgt.n	80059e0 <__sflush_r+0x20>
 80059d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	dc02      	bgt.n	80059e0 <__sflush_r+0x20>
 80059da:	2000      	movs	r0, #0
 80059dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059e2:	2e00      	cmp	r6, #0
 80059e4:	d0f9      	beq.n	80059da <__sflush_r+0x1a>
 80059e6:	2300      	movs	r3, #0
 80059e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059ec:	682f      	ldr	r7, [r5, #0]
 80059ee:	602b      	str	r3, [r5, #0]
 80059f0:	d032      	beq.n	8005a58 <__sflush_r+0x98>
 80059f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	075a      	lsls	r2, r3, #29
 80059f8:	d505      	bpl.n	8005a06 <__sflush_r+0x46>
 80059fa:	6863      	ldr	r3, [r4, #4]
 80059fc:	1ac0      	subs	r0, r0, r3
 80059fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a00:	b10b      	cbz	r3, 8005a06 <__sflush_r+0x46>
 8005a02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a04:	1ac0      	subs	r0, r0, r3
 8005a06:	2300      	movs	r3, #0
 8005a08:	4602      	mov	r2, r0
 8005a0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	6a21      	ldr	r1, [r4, #32]
 8005a10:	47b0      	blx	r6
 8005a12:	1c43      	adds	r3, r0, #1
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	d106      	bne.n	8005a26 <__sflush_r+0x66>
 8005a18:	6829      	ldr	r1, [r5, #0]
 8005a1a:	291d      	cmp	r1, #29
 8005a1c:	d82c      	bhi.n	8005a78 <__sflush_r+0xb8>
 8005a1e:	4a2a      	ldr	r2, [pc, #168]	; (8005ac8 <__sflush_r+0x108>)
 8005a20:	40ca      	lsrs	r2, r1
 8005a22:	07d6      	lsls	r6, r2, #31
 8005a24:	d528      	bpl.n	8005a78 <__sflush_r+0xb8>
 8005a26:	2200      	movs	r2, #0
 8005a28:	6062      	str	r2, [r4, #4]
 8005a2a:	6922      	ldr	r2, [r4, #16]
 8005a2c:	04d9      	lsls	r1, r3, #19
 8005a2e:	6022      	str	r2, [r4, #0]
 8005a30:	d504      	bpl.n	8005a3c <__sflush_r+0x7c>
 8005a32:	1c42      	adds	r2, r0, #1
 8005a34:	d101      	bne.n	8005a3a <__sflush_r+0x7a>
 8005a36:	682b      	ldr	r3, [r5, #0]
 8005a38:	b903      	cbnz	r3, 8005a3c <__sflush_r+0x7c>
 8005a3a:	6560      	str	r0, [r4, #84]	; 0x54
 8005a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a3e:	602f      	str	r7, [r5, #0]
 8005a40:	2900      	cmp	r1, #0
 8005a42:	d0ca      	beq.n	80059da <__sflush_r+0x1a>
 8005a44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a48:	4299      	cmp	r1, r3
 8005a4a:	d002      	beq.n	8005a52 <__sflush_r+0x92>
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f7ff fae9 	bl	8005024 <_free_r>
 8005a52:	2000      	movs	r0, #0
 8005a54:	6360      	str	r0, [r4, #52]	; 0x34
 8005a56:	e7c1      	b.n	80059dc <__sflush_r+0x1c>
 8005a58:	6a21      	ldr	r1, [r4, #32]
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	47b0      	blx	r6
 8005a60:	1c41      	adds	r1, r0, #1
 8005a62:	d1c7      	bne.n	80059f4 <__sflush_r+0x34>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0c4      	beq.n	80059f4 <__sflush_r+0x34>
 8005a6a:	2b1d      	cmp	r3, #29
 8005a6c:	d001      	beq.n	8005a72 <__sflush_r+0xb2>
 8005a6e:	2b16      	cmp	r3, #22
 8005a70:	d101      	bne.n	8005a76 <__sflush_r+0xb6>
 8005a72:	602f      	str	r7, [r5, #0]
 8005a74:	e7b1      	b.n	80059da <__sflush_r+0x1a>
 8005a76:	89a3      	ldrh	r3, [r4, #12]
 8005a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a7c:	81a3      	strh	r3, [r4, #12]
 8005a7e:	e7ad      	b.n	80059dc <__sflush_r+0x1c>
 8005a80:	690f      	ldr	r7, [r1, #16]
 8005a82:	2f00      	cmp	r7, #0
 8005a84:	d0a9      	beq.n	80059da <__sflush_r+0x1a>
 8005a86:	0793      	lsls	r3, r2, #30
 8005a88:	bf18      	it	ne
 8005a8a:	2300      	movne	r3, #0
 8005a8c:	680e      	ldr	r6, [r1, #0]
 8005a8e:	bf08      	it	eq
 8005a90:	694b      	ldreq	r3, [r1, #20]
 8005a92:	eba6 0807 	sub.w	r8, r6, r7
 8005a96:	600f      	str	r7, [r1, #0]
 8005a98:	608b      	str	r3, [r1, #8]
 8005a9a:	f1b8 0f00 	cmp.w	r8, #0
 8005a9e:	dd9c      	ble.n	80059da <__sflush_r+0x1a>
 8005aa0:	4643      	mov	r3, r8
 8005aa2:	463a      	mov	r2, r7
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	6a21      	ldr	r1, [r4, #32]
 8005aa8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005aaa:	47b0      	blx	r6
 8005aac:	2800      	cmp	r0, #0
 8005aae:	dc06      	bgt.n	8005abe <__sflush_r+0xfe>
 8005ab0:	89a3      	ldrh	r3, [r4, #12]
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aba:	81a3      	strh	r3, [r4, #12]
 8005abc:	e78e      	b.n	80059dc <__sflush_r+0x1c>
 8005abe:	4407      	add	r7, r0
 8005ac0:	eba8 0800 	sub.w	r8, r8, r0
 8005ac4:	e7e9      	b.n	8005a9a <__sflush_r+0xda>
 8005ac6:	bf00      	nop
 8005ac8:	20400001 	.word	0x20400001

08005acc <_fflush_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	690b      	ldr	r3, [r1, #16]
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	b913      	cbnz	r3, 8005adc <_fflush_r+0x10>
 8005ad6:	2500      	movs	r5, #0
 8005ad8:	4628      	mov	r0, r5
 8005ada:	bd38      	pop	{r3, r4, r5, pc}
 8005adc:	b118      	cbz	r0, 8005ae6 <_fflush_r+0x1a>
 8005ade:	6983      	ldr	r3, [r0, #24]
 8005ae0:	b90b      	cbnz	r3, 8005ae6 <_fflush_r+0x1a>
 8005ae2:	f000 f887 	bl	8005bf4 <__sinit>
 8005ae6:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <_fflush_r+0x6c>)
 8005ae8:	429c      	cmp	r4, r3
 8005aea:	d11b      	bne.n	8005b24 <_fflush_r+0x58>
 8005aec:	686c      	ldr	r4, [r5, #4]
 8005aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0ef      	beq.n	8005ad6 <_fflush_r+0xa>
 8005af6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005af8:	07d0      	lsls	r0, r2, #31
 8005afa:	d404      	bmi.n	8005b06 <_fflush_r+0x3a>
 8005afc:	0599      	lsls	r1, r3, #22
 8005afe:	d402      	bmi.n	8005b06 <_fflush_r+0x3a>
 8005b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b02:	f000 f915 	bl	8005d30 <__retarget_lock_acquire_recursive>
 8005b06:	4628      	mov	r0, r5
 8005b08:	4621      	mov	r1, r4
 8005b0a:	f7ff ff59 	bl	80059c0 <__sflush_r>
 8005b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b10:	4605      	mov	r5, r0
 8005b12:	07da      	lsls	r2, r3, #31
 8005b14:	d4e0      	bmi.n	8005ad8 <_fflush_r+0xc>
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	059b      	lsls	r3, r3, #22
 8005b1a:	d4dd      	bmi.n	8005ad8 <_fflush_r+0xc>
 8005b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b1e:	f000 f908 	bl	8005d32 <__retarget_lock_release_recursive>
 8005b22:	e7d9      	b.n	8005ad8 <_fflush_r+0xc>
 8005b24:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <_fflush_r+0x70>)
 8005b26:	429c      	cmp	r4, r3
 8005b28:	d101      	bne.n	8005b2e <_fflush_r+0x62>
 8005b2a:	68ac      	ldr	r4, [r5, #8]
 8005b2c:	e7df      	b.n	8005aee <_fflush_r+0x22>
 8005b2e:	4b04      	ldr	r3, [pc, #16]	; (8005b40 <_fflush_r+0x74>)
 8005b30:	429c      	cmp	r4, r3
 8005b32:	bf08      	it	eq
 8005b34:	68ec      	ldreq	r4, [r5, #12]
 8005b36:	e7da      	b.n	8005aee <_fflush_r+0x22>
 8005b38:	080064bc 	.word	0x080064bc
 8005b3c:	080064dc 	.word	0x080064dc
 8005b40:	0800649c 	.word	0x0800649c

08005b44 <std>:
 8005b44:	2300      	movs	r3, #0
 8005b46:	b510      	push	{r4, lr}
 8005b48:	4604      	mov	r4, r0
 8005b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b52:	6083      	str	r3, [r0, #8]
 8005b54:	8181      	strh	r1, [r0, #12]
 8005b56:	6643      	str	r3, [r0, #100]	; 0x64
 8005b58:	81c2      	strh	r2, [r0, #14]
 8005b5a:	6183      	str	r3, [r0, #24]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	2208      	movs	r2, #8
 8005b60:	305c      	adds	r0, #92	; 0x5c
 8005b62:	f7fd fb8d 	bl	8003280 <memset>
 8005b66:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <std+0x38>)
 8005b68:	6224      	str	r4, [r4, #32]
 8005b6a:	6263      	str	r3, [r4, #36]	; 0x24
 8005b6c:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <std+0x3c>)
 8005b6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b70:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <std+0x40>)
 8005b72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b74:	4b04      	ldr	r3, [pc, #16]	; (8005b88 <std+0x44>)
 8005b76:	6323      	str	r3, [r4, #48]	; 0x30
 8005b78:	bd10      	pop	{r4, pc}
 8005b7a:	bf00      	nop
 8005b7c:	08005e95 	.word	0x08005e95
 8005b80:	08005eb7 	.word	0x08005eb7
 8005b84:	08005eef 	.word	0x08005eef
 8005b88:	08005f13 	.word	0x08005f13

08005b8c <_cleanup_r>:
 8005b8c:	4901      	ldr	r1, [pc, #4]	; (8005b94 <_cleanup_r+0x8>)
 8005b8e:	f000 b8af 	b.w	8005cf0 <_fwalk_reent>
 8005b92:	bf00      	nop
 8005b94:	08005acd 	.word	0x08005acd

08005b98 <__sfmoreglue>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	2568      	movs	r5, #104	; 0x68
 8005b9c:	1e4a      	subs	r2, r1, #1
 8005b9e:	4355      	muls	r5, r2
 8005ba0:	460e      	mov	r6, r1
 8005ba2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ba6:	f7ff fa89 	bl	80050bc <_malloc_r>
 8005baa:	4604      	mov	r4, r0
 8005bac:	b140      	cbz	r0, 8005bc0 <__sfmoreglue+0x28>
 8005bae:	2100      	movs	r1, #0
 8005bb0:	e9c0 1600 	strd	r1, r6, [r0]
 8005bb4:	300c      	adds	r0, #12
 8005bb6:	60a0      	str	r0, [r4, #8]
 8005bb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bbc:	f7fd fb60 	bl	8003280 <memset>
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	bd70      	pop	{r4, r5, r6, pc}

08005bc4 <__sfp_lock_acquire>:
 8005bc4:	4801      	ldr	r0, [pc, #4]	; (8005bcc <__sfp_lock_acquire+0x8>)
 8005bc6:	f000 b8b3 	b.w	8005d30 <__retarget_lock_acquire_recursive>
 8005bca:	bf00      	nop
 8005bcc:	20000384 	.word	0x20000384

08005bd0 <__sfp_lock_release>:
 8005bd0:	4801      	ldr	r0, [pc, #4]	; (8005bd8 <__sfp_lock_release+0x8>)
 8005bd2:	f000 b8ae 	b.w	8005d32 <__retarget_lock_release_recursive>
 8005bd6:	bf00      	nop
 8005bd8:	20000384 	.word	0x20000384

08005bdc <__sinit_lock_acquire>:
 8005bdc:	4801      	ldr	r0, [pc, #4]	; (8005be4 <__sinit_lock_acquire+0x8>)
 8005bde:	f000 b8a7 	b.w	8005d30 <__retarget_lock_acquire_recursive>
 8005be2:	bf00      	nop
 8005be4:	2000037f 	.word	0x2000037f

08005be8 <__sinit_lock_release>:
 8005be8:	4801      	ldr	r0, [pc, #4]	; (8005bf0 <__sinit_lock_release+0x8>)
 8005bea:	f000 b8a2 	b.w	8005d32 <__retarget_lock_release_recursive>
 8005bee:	bf00      	nop
 8005bf0:	2000037f 	.word	0x2000037f

08005bf4 <__sinit>:
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	f7ff fff0 	bl	8005bdc <__sinit_lock_acquire>
 8005bfc:	69a3      	ldr	r3, [r4, #24]
 8005bfe:	b11b      	cbz	r3, 8005c08 <__sinit+0x14>
 8005c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c04:	f7ff bff0 	b.w	8005be8 <__sinit_lock_release>
 8005c08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c0c:	6523      	str	r3, [r4, #80]	; 0x50
 8005c0e:	4b13      	ldr	r3, [pc, #76]	; (8005c5c <__sinit+0x68>)
 8005c10:	4a13      	ldr	r2, [pc, #76]	; (8005c60 <__sinit+0x6c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c16:	42a3      	cmp	r3, r4
 8005c18:	bf08      	it	eq
 8005c1a:	2301      	moveq	r3, #1
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	bf08      	it	eq
 8005c20:	61a3      	streq	r3, [r4, #24]
 8005c22:	f000 f81f 	bl	8005c64 <__sfp>
 8005c26:	6060      	str	r0, [r4, #4]
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 f81b 	bl	8005c64 <__sfp>
 8005c2e:	60a0      	str	r0, [r4, #8]
 8005c30:	4620      	mov	r0, r4
 8005c32:	f000 f817 	bl	8005c64 <__sfp>
 8005c36:	2200      	movs	r2, #0
 8005c38:	2104      	movs	r1, #4
 8005c3a:	60e0      	str	r0, [r4, #12]
 8005c3c:	6860      	ldr	r0, [r4, #4]
 8005c3e:	f7ff ff81 	bl	8005b44 <std>
 8005c42:	2201      	movs	r2, #1
 8005c44:	2109      	movs	r1, #9
 8005c46:	68a0      	ldr	r0, [r4, #8]
 8005c48:	f7ff ff7c 	bl	8005b44 <std>
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	2112      	movs	r1, #18
 8005c50:	68e0      	ldr	r0, [r4, #12]
 8005c52:	f7ff ff77 	bl	8005b44 <std>
 8005c56:	2301      	movs	r3, #1
 8005c58:	61a3      	str	r3, [r4, #24]
 8005c5a:	e7d1      	b.n	8005c00 <__sinit+0xc>
 8005c5c:	0800611c 	.word	0x0800611c
 8005c60:	08005b8d 	.word	0x08005b8d

08005c64 <__sfp>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	4607      	mov	r7, r0
 8005c68:	f7ff ffac 	bl	8005bc4 <__sfp_lock_acquire>
 8005c6c:	4b1e      	ldr	r3, [pc, #120]	; (8005ce8 <__sfp+0x84>)
 8005c6e:	681e      	ldr	r6, [r3, #0]
 8005c70:	69b3      	ldr	r3, [r6, #24]
 8005c72:	b913      	cbnz	r3, 8005c7a <__sfp+0x16>
 8005c74:	4630      	mov	r0, r6
 8005c76:	f7ff ffbd 	bl	8005bf4 <__sinit>
 8005c7a:	3648      	adds	r6, #72	; 0x48
 8005c7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c80:	3b01      	subs	r3, #1
 8005c82:	d503      	bpl.n	8005c8c <__sfp+0x28>
 8005c84:	6833      	ldr	r3, [r6, #0]
 8005c86:	b30b      	cbz	r3, 8005ccc <__sfp+0x68>
 8005c88:	6836      	ldr	r6, [r6, #0]
 8005c8a:	e7f7      	b.n	8005c7c <__sfp+0x18>
 8005c8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c90:	b9d5      	cbnz	r5, 8005cc8 <__sfp+0x64>
 8005c92:	4b16      	ldr	r3, [pc, #88]	; (8005cec <__sfp+0x88>)
 8005c94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c98:	60e3      	str	r3, [r4, #12]
 8005c9a:	6665      	str	r5, [r4, #100]	; 0x64
 8005c9c:	f000 f847 	bl	8005d2e <__retarget_lock_init_recursive>
 8005ca0:	f7ff ff96 	bl	8005bd0 <__sfp_lock_release>
 8005ca4:	2208      	movs	r2, #8
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cb0:	6025      	str	r5, [r4, #0]
 8005cb2:	61a5      	str	r5, [r4, #24]
 8005cb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cb8:	f7fd fae2 	bl	8003280 <memset>
 8005cbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cc8:	3468      	adds	r4, #104	; 0x68
 8005cca:	e7d9      	b.n	8005c80 <__sfp+0x1c>
 8005ccc:	2104      	movs	r1, #4
 8005cce:	4638      	mov	r0, r7
 8005cd0:	f7ff ff62 	bl	8005b98 <__sfmoreglue>
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	6030      	str	r0, [r6, #0]
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	d1d5      	bne.n	8005c88 <__sfp+0x24>
 8005cdc:	f7ff ff78 	bl	8005bd0 <__sfp_lock_release>
 8005ce0:	230c      	movs	r3, #12
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	e7ee      	b.n	8005cc4 <__sfp+0x60>
 8005ce6:	bf00      	nop
 8005ce8:	0800611c 	.word	0x0800611c
 8005cec:	ffff0001 	.word	0xffff0001

08005cf0 <_fwalk_reent>:
 8005cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cf4:	4606      	mov	r6, r0
 8005cf6:	4688      	mov	r8, r1
 8005cf8:	2700      	movs	r7, #0
 8005cfa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005cfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d02:	f1b9 0901 	subs.w	r9, r9, #1
 8005d06:	d505      	bpl.n	8005d14 <_fwalk_reent+0x24>
 8005d08:	6824      	ldr	r4, [r4, #0]
 8005d0a:	2c00      	cmp	r4, #0
 8005d0c:	d1f7      	bne.n	8005cfe <_fwalk_reent+0xe>
 8005d0e:	4638      	mov	r0, r7
 8005d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d14:	89ab      	ldrh	r3, [r5, #12]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d907      	bls.n	8005d2a <_fwalk_reent+0x3a>
 8005d1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	d003      	beq.n	8005d2a <_fwalk_reent+0x3a>
 8005d22:	4629      	mov	r1, r5
 8005d24:	4630      	mov	r0, r6
 8005d26:	47c0      	blx	r8
 8005d28:	4307      	orrs	r7, r0
 8005d2a:	3568      	adds	r5, #104	; 0x68
 8005d2c:	e7e9      	b.n	8005d02 <_fwalk_reent+0x12>

08005d2e <__retarget_lock_init_recursive>:
 8005d2e:	4770      	bx	lr

08005d30 <__retarget_lock_acquire_recursive>:
 8005d30:	4770      	bx	lr

08005d32 <__retarget_lock_release_recursive>:
 8005d32:	4770      	bx	lr

08005d34 <__swhatbuf_r>:
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	460e      	mov	r6, r1
 8005d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d3c:	4614      	mov	r4, r2
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	461d      	mov	r5, r3
 8005d42:	b096      	sub	sp, #88	; 0x58
 8005d44:	da07      	bge.n	8005d56 <__swhatbuf_r+0x22>
 8005d46:	2300      	movs	r3, #0
 8005d48:	602b      	str	r3, [r5, #0]
 8005d4a:	89b3      	ldrh	r3, [r6, #12]
 8005d4c:	061a      	lsls	r2, r3, #24
 8005d4e:	d410      	bmi.n	8005d72 <__swhatbuf_r+0x3e>
 8005d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d54:	e00e      	b.n	8005d74 <__swhatbuf_r+0x40>
 8005d56:	466a      	mov	r2, sp
 8005d58:	f000 f902 	bl	8005f60 <_fstat_r>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	dbf2      	blt.n	8005d46 <__swhatbuf_r+0x12>
 8005d60:	9a01      	ldr	r2, [sp, #4]
 8005d62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d6a:	425a      	negs	r2, r3
 8005d6c:	415a      	adcs	r2, r3
 8005d6e:	602a      	str	r2, [r5, #0]
 8005d70:	e7ee      	b.n	8005d50 <__swhatbuf_r+0x1c>
 8005d72:	2340      	movs	r3, #64	; 0x40
 8005d74:	2000      	movs	r0, #0
 8005d76:	6023      	str	r3, [r4, #0]
 8005d78:	b016      	add	sp, #88	; 0x58
 8005d7a:	bd70      	pop	{r4, r5, r6, pc}

08005d7c <__smakebuf_r>:
 8005d7c:	898b      	ldrh	r3, [r1, #12]
 8005d7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d80:	079d      	lsls	r5, r3, #30
 8005d82:	4606      	mov	r6, r0
 8005d84:	460c      	mov	r4, r1
 8005d86:	d507      	bpl.n	8005d98 <__smakebuf_r+0x1c>
 8005d88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	6123      	str	r3, [r4, #16]
 8005d90:	2301      	movs	r3, #1
 8005d92:	6163      	str	r3, [r4, #20]
 8005d94:	b002      	add	sp, #8
 8005d96:	bd70      	pop	{r4, r5, r6, pc}
 8005d98:	466a      	mov	r2, sp
 8005d9a:	ab01      	add	r3, sp, #4
 8005d9c:	f7ff ffca 	bl	8005d34 <__swhatbuf_r>
 8005da0:	9900      	ldr	r1, [sp, #0]
 8005da2:	4605      	mov	r5, r0
 8005da4:	4630      	mov	r0, r6
 8005da6:	f7ff f989 	bl	80050bc <_malloc_r>
 8005daa:	b948      	cbnz	r0, 8005dc0 <__smakebuf_r+0x44>
 8005dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005db0:	059a      	lsls	r2, r3, #22
 8005db2:	d4ef      	bmi.n	8005d94 <__smakebuf_r+0x18>
 8005db4:	f023 0303 	bic.w	r3, r3, #3
 8005db8:	f043 0302 	orr.w	r3, r3, #2
 8005dbc:	81a3      	strh	r3, [r4, #12]
 8005dbe:	e7e3      	b.n	8005d88 <__smakebuf_r+0xc>
 8005dc0:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <__smakebuf_r+0x7c>)
 8005dc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	6020      	str	r0, [r4, #0]
 8005dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dcc:	81a3      	strh	r3, [r4, #12]
 8005dce:	9b00      	ldr	r3, [sp, #0]
 8005dd0:	6120      	str	r0, [r4, #16]
 8005dd2:	6163      	str	r3, [r4, #20]
 8005dd4:	9b01      	ldr	r3, [sp, #4]
 8005dd6:	b15b      	cbz	r3, 8005df0 <__smakebuf_r+0x74>
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dde:	f000 f8d1 	bl	8005f84 <_isatty_r>
 8005de2:	b128      	cbz	r0, 8005df0 <__smakebuf_r+0x74>
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	f023 0303 	bic.w	r3, r3, #3
 8005dea:	f043 0301 	orr.w	r3, r3, #1
 8005dee:	81a3      	strh	r3, [r4, #12]
 8005df0:	89a0      	ldrh	r0, [r4, #12]
 8005df2:	4305      	orrs	r5, r0
 8005df4:	81a5      	strh	r5, [r4, #12]
 8005df6:	e7cd      	b.n	8005d94 <__smakebuf_r+0x18>
 8005df8:	08005b8d 	.word	0x08005b8d

08005dfc <_malloc_usable_size_r>:
 8005dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e00:	1f18      	subs	r0, r3, #4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	bfbc      	itt	lt
 8005e06:	580b      	ldrlt	r3, [r1, r0]
 8005e08:	18c0      	addlt	r0, r0, r3
 8005e0a:	4770      	bx	lr

08005e0c <_raise_r>:
 8005e0c:	291f      	cmp	r1, #31
 8005e0e:	b538      	push	{r3, r4, r5, lr}
 8005e10:	4604      	mov	r4, r0
 8005e12:	460d      	mov	r5, r1
 8005e14:	d904      	bls.n	8005e20 <_raise_r+0x14>
 8005e16:	2316      	movs	r3, #22
 8005e18:	6003      	str	r3, [r0, #0]
 8005e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e22:	b112      	cbz	r2, 8005e2a <_raise_r+0x1e>
 8005e24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e28:	b94b      	cbnz	r3, 8005e3e <_raise_r+0x32>
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f000 f830 	bl	8005e90 <_getpid_r>
 8005e30:	462a      	mov	r2, r5
 8005e32:	4601      	mov	r1, r0
 8005e34:	4620      	mov	r0, r4
 8005e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e3a:	f000 b817 	b.w	8005e6c <_kill_r>
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d00a      	beq.n	8005e58 <_raise_r+0x4c>
 8005e42:	1c59      	adds	r1, r3, #1
 8005e44:	d103      	bne.n	8005e4e <_raise_r+0x42>
 8005e46:	2316      	movs	r3, #22
 8005e48:	6003      	str	r3, [r0, #0]
 8005e4a:	2001      	movs	r0, #1
 8005e4c:	e7e7      	b.n	8005e1e <_raise_r+0x12>
 8005e4e:	2400      	movs	r4, #0
 8005e50:	4628      	mov	r0, r5
 8005e52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e56:	4798      	blx	r3
 8005e58:	2000      	movs	r0, #0
 8005e5a:	e7e0      	b.n	8005e1e <_raise_r+0x12>

08005e5c <raise>:
 8005e5c:	4b02      	ldr	r3, [pc, #8]	; (8005e68 <raise+0xc>)
 8005e5e:	4601      	mov	r1, r0
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	f7ff bfd3 	b.w	8005e0c <_raise_r>
 8005e66:	bf00      	nop
 8005e68:	20000050 	.word	0x20000050

08005e6c <_kill_r>:
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	2300      	movs	r3, #0
 8005e70:	4d06      	ldr	r5, [pc, #24]	; (8005e8c <_kill_r+0x20>)
 8005e72:	4604      	mov	r4, r0
 8005e74:	4608      	mov	r0, r1
 8005e76:	4611      	mov	r1, r2
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	f7fb fa58 	bl	800132e <_kill>
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	d102      	bne.n	8005e88 <_kill_r+0x1c>
 8005e82:	682b      	ldr	r3, [r5, #0]
 8005e84:	b103      	cbz	r3, 8005e88 <_kill_r+0x1c>
 8005e86:	6023      	str	r3, [r4, #0]
 8005e88:	bd38      	pop	{r3, r4, r5, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000378 	.word	0x20000378

08005e90 <_getpid_r>:
 8005e90:	f7fb ba46 	b.w	8001320 <_getpid>

08005e94 <__sread>:
 8005e94:	b510      	push	{r4, lr}
 8005e96:	460c      	mov	r4, r1
 8005e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9c:	f000 f894 	bl	8005fc8 <_read_r>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	bfab      	itete	ge
 8005ea4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ea6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ea8:	181b      	addge	r3, r3, r0
 8005eaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005eae:	bfac      	ite	ge
 8005eb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005eb2:	81a3      	strhlt	r3, [r4, #12]
 8005eb4:	bd10      	pop	{r4, pc}

08005eb6 <__swrite>:
 8005eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eba:	461f      	mov	r7, r3
 8005ebc:	898b      	ldrh	r3, [r1, #12]
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	05db      	lsls	r3, r3, #23
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	4616      	mov	r6, r2
 8005ec6:	d505      	bpl.n	8005ed4 <__swrite+0x1e>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed0:	f000 f868 	bl	8005fa4 <_lseek_r>
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	4632      	mov	r2, r6
 8005ed8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005edc:	81a3      	strh	r3, [r4, #12]
 8005ede:	4628      	mov	r0, r5
 8005ee0:	463b      	mov	r3, r7
 8005ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eea:	f000 b817 	b.w	8005f1c <_write_r>

08005eee <__sseek>:
 8005eee:	b510      	push	{r4, lr}
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef6:	f000 f855 	bl	8005fa4 <_lseek_r>
 8005efa:	1c43      	adds	r3, r0, #1
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	bf15      	itete	ne
 8005f00:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f0a:	81a3      	strheq	r3, [r4, #12]
 8005f0c:	bf18      	it	ne
 8005f0e:	81a3      	strhne	r3, [r4, #12]
 8005f10:	bd10      	pop	{r4, pc}

08005f12 <__sclose>:
 8005f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f16:	f000 b813 	b.w	8005f40 <_close_r>
	...

08005f1c <_write_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4604      	mov	r4, r0
 8005f20:	4608      	mov	r0, r1
 8005f22:	4611      	mov	r1, r2
 8005f24:	2200      	movs	r2, #0
 8005f26:	4d05      	ldr	r5, [pc, #20]	; (8005f3c <_write_r+0x20>)
 8005f28:	602a      	str	r2, [r5, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f7fa fdd2 	bl	8000ad4 <_write>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d102      	bne.n	8005f3a <_write_r+0x1e>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	b103      	cbz	r3, 8005f3a <_write_r+0x1e>
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	bd38      	pop	{r3, r4, r5, pc}
 8005f3c:	20000378 	.word	0x20000378

08005f40 <_close_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	2300      	movs	r3, #0
 8005f44:	4d05      	ldr	r5, [pc, #20]	; (8005f5c <_close_r+0x1c>)
 8005f46:	4604      	mov	r4, r0
 8005f48:	4608      	mov	r0, r1
 8005f4a:	602b      	str	r3, [r5, #0]
 8005f4c:	f7fb fa26 	bl	800139c <_close>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d102      	bne.n	8005f5a <_close_r+0x1a>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	b103      	cbz	r3, 8005f5a <_close_r+0x1a>
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	20000378 	.word	0x20000378

08005f60 <_fstat_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	2300      	movs	r3, #0
 8005f64:	4d06      	ldr	r5, [pc, #24]	; (8005f80 <_fstat_r+0x20>)
 8005f66:	4604      	mov	r4, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	602b      	str	r3, [r5, #0]
 8005f6e:	f7fb fa20 	bl	80013b2 <_fstat>
 8005f72:	1c43      	adds	r3, r0, #1
 8005f74:	d102      	bne.n	8005f7c <_fstat_r+0x1c>
 8005f76:	682b      	ldr	r3, [r5, #0]
 8005f78:	b103      	cbz	r3, 8005f7c <_fstat_r+0x1c>
 8005f7a:	6023      	str	r3, [r4, #0]
 8005f7c:	bd38      	pop	{r3, r4, r5, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000378 	.word	0x20000378

08005f84 <_isatty_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	2300      	movs	r3, #0
 8005f88:	4d05      	ldr	r5, [pc, #20]	; (8005fa0 <_isatty_r+0x1c>)
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	602b      	str	r3, [r5, #0]
 8005f90:	f7fb fa1e 	bl	80013d0 <_isatty>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d102      	bne.n	8005f9e <_isatty_r+0x1a>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	b103      	cbz	r3, 8005f9e <_isatty_r+0x1a>
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	20000378 	.word	0x20000378

08005fa4 <_lseek_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	4608      	mov	r0, r1
 8005faa:	4611      	mov	r1, r2
 8005fac:	2200      	movs	r2, #0
 8005fae:	4d05      	ldr	r5, [pc, #20]	; (8005fc4 <_lseek_r+0x20>)
 8005fb0:	602a      	str	r2, [r5, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f7fb fa16 	bl	80013e4 <_lseek>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d102      	bne.n	8005fc2 <_lseek_r+0x1e>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	b103      	cbz	r3, 8005fc2 <_lseek_r+0x1e>
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	bd38      	pop	{r3, r4, r5, pc}
 8005fc4:	20000378 	.word	0x20000378

08005fc8 <_read_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4604      	mov	r4, r0
 8005fcc:	4608      	mov	r0, r1
 8005fce:	4611      	mov	r1, r2
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	4d05      	ldr	r5, [pc, #20]	; (8005fe8 <_read_r+0x20>)
 8005fd4:	602a      	str	r2, [r5, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f7fb f9c3 	bl	8001362 <_read>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_read_r+0x1e>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_read_r+0x1e>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	20000378 	.word	0x20000378

08005fec <_init>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	bf00      	nop
 8005ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff2:	bc08      	pop	{r3}
 8005ff4:	469e      	mov	lr, r3
 8005ff6:	4770      	bx	lr

08005ff8 <_fini>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	bf00      	nop
 8005ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffe:	bc08      	pop	{r3}
 8006000:	469e      	mov	lr, r3
 8006002:	4770      	bx	lr
